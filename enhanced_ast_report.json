{
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\edgewall\\trac\\trac\\upgrades\\db25.py": {
        "vulnerabilities": [
            {
                "line": 38,
                "test_id": "B608",
                "test_name": "hardcoded_sql_expressions",
                "severity": "MEDIUM",
                "confidence": "MEDIUM",
                "context": "37         # Convert timestamps to microseconds\n38         cursor.execute(\"UPDATE %s SET %s\" % (table,\n39                         ', '.join(\"%s=%s*1000000\" % (column, column)\n40                                   for column in columns)))\n41 \n"
            },
            {
                "line": 44,
                "test_id": "B608",
                "test_name": "hardcoded_sql_expressions",
                "severity": "MEDIUM",
                "confidence": "MEDIUM",
                "context": "43     with env.db_query as db:\n44         cursor.execute(\"\"\"\n45             UPDATE ticket_change SET newvalue=%s*1000000\n46             WHERE field %s\"\"\" % (db.cast('newvalue', 'int64'), db.like()),\n47             ('_comment%',))\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "module": "trac.db",
                    "names": [
                        {
                            "name": "DatabaseManager",
                            "asname": null
                        }
                    ],
                    "line": 14
                }
            ],
            "variables": [
                {
                    "name": "tables",
                    "line": 19
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "Convert time values from integer seconds to integer microseconds.",
                    "line": 18
                },
                {
                    "type": "str",
                    "value": "attachment",
                    "line": 20
                },
                {
                    "type": "str",
                    "value": "wiki",
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "revision",
                    "line": 22
                },
                {
                    "type": "str",
                    "value": "ticket",
                    "line": 23
                },
                {
                    "type": "str",
                    "value": "ticket_change",
                    "line": 25
                },
                {
                    "type": "str",
                    "value": "milestone",
                    "line": 26
                },
                {
                    "type": "str",
                    "value": "version",
                    "line": 28
                },
                {
                    "type": "str",
                    "value": "time",
                    "line": 20
                },
                {
                    "type": "str",
                    "value": "time",
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "time",
                    "line": 22
                },
                {
                    "type": "str",
                    "value": "time",
                    "line": 23
                },
                {
                    "type": "str",
                    "value": "changetime",
                    "line": 24
                },
                {
                    "type": "str",
                    "value": "time",
                    "line": 25
                },
                {
                    "type": "str",
                    "value": "due",
                    "line": 26
                },
                {
                    "type": "str",
                    "value": "completed",
                    "line": 27
                },
                {
                    "type": "str",
                    "value": "time",
                    "line": 28
                },
                {
                    "type": "str",
                    "value": "UPDATE %s SET %s",
                    "line": 38
                },
                {
                    "type": "str",
                    "value": "\n            UPDATE ticket_change SET newvalue=%s*1000000\n            WHERE field %s",
                    "line": 44
                },
                {
                    "type": "str",
                    "value": "_comment%",
                    "line": 47
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 20
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 20
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 22
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 22
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 23
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 23
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 24
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 24
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 25
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 25
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 26
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 26
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 27
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 27
                },
                {
                    "type": "str",
                    "value": "int",
                    "line": 28
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 28
                },
                {
                    "type": "str",
                    "value": "newvalue",
                    "line": 46
                },
                {
                    "type": "str",
                    "value": "int64",
                    "line": 46
                },
                {
                    "type": "str",
                    "value": ", ",
                    "line": 39
                },
                {
                    "type": "str",
                    "value": "%s=%s*1000000",
                    "line": 39
                }
            ],
            "calls": [
                {
                    "func": "DatabaseManager(env).get_connector",
                    "args": [],
                    "keywords": [],
                    "line": 31
                },
                {
                    "func": "db_connector.alter_column_types",
                    "args": [
                        "table",
                        "columns"
                    ],
                    "keywords": [],
                    "line": 34
                },
                {
                    "func": "cursor.execute",
                    "args": [
                        "'UPDATE %s SET %s' % (table, ', '.join(('%s=%s*1000000' % (column, column) for column in columns)))"
                    ],
                    "keywords": [],
                    "line": 38
                },
                {
                    "func": "cursor.execute",
                    "args": [
                        "'\\n            UPDATE ticket_change SET newvalue=%s*1000000\\n            WHERE field %s' % (db.cast('newvalue', 'int64'), db.like())",
                        "('_comment%',)"
                    ],
                    "keywords": [],
                    "line": 44
                },
                {
                    "func": "DatabaseManager",
                    "args": [
                        "env"
                    ],
                    "keywords": [],
                    "line": 31
                },
                {
                    "func": "cursor.execute",
                    "args": [
                        "sql"
                    ],
                    "keywords": [],
                    "line": 35
                },
                {
                    "func": "', '.join",
                    "args": [
                        "('%s=%s*1000000' % (column, column) for column in columns)"
                    ],
                    "keywords": [],
                    "line": 39
                },
                {
                    "func": "db.cast",
                    "args": [
                        "'newvalue'",
                        "'int64'"
                    ],
                    "keywords": [],
                    "line": 46
                },
                {
                    "func": "db.like",
                    "args": [],
                    "keywords": [],
                    "line": 46
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\openstack\\freezer-api\\freezer_api\\tests\\unit\\test_jobs.py": {
        "vulnerabilities": [
            {
                "line": 204,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "203     def test_on_patch_ok_with_some_fields(self):\n204         new_version = random.randint(0, 99)\n205         self.mock_db.update_job.return_value = new_version\n"
            },
            {
                "line": 223,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "222     def test_on_post_ok(self):\n223         new_version = random.randint(0, 99)\n224         self.mock_db.replace_job.return_value = new_version\n"
            },
            {
                "line": 267,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "266     def test_on_post_start_event_ok(self):\n267         new_version = random.randint(0, 99)\n268         self.mock_db.get_job.return_value = {\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "unittest",
                            "asname": null
                        }
                    ],
                    "line": 19
                },
                {
                    "module": "mock",
                    "names": [
                        {
                            "name": "Mock",
                            "asname": null
                        },
                        {
                            "name": "patch",
                            "asname": null
                        }
                    ],
                    "line": 20
                },
                {
                    "names": [
                        {
                            "name": "random",
                            "asname": null
                        }
                    ],
                    "line": 22
                },
                {
                    "names": [
                        {
                            "name": "json",
                            "asname": null
                        }
                    ],
                    "line": 23
                },
                {
                    "module": "common",
                    "names": [
                        {
                            "name": "*",
                            "asname": null
                        }
                    ],
                    "line": 25
                },
                {
                    "module": "freezer_api.common.exceptions",
                    "names": [
                        {
                            "name": "*",
                            "asname": null
                        }
                    ],
                    "line": 26
                },
                {
                    "module": "freezer_api.api.v1",
                    "names": [
                        {
                            "name": "jobs",
                            "asname": "v1_jobs"
                        }
                    ],
                    "line": 28
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "Freezer swift.py related tests\n\nCopyright 2015 Hewlett-Packard\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n",
                    "line": 1
                },
                {
                    "type": "str",
                    "value": "awesome_result",
                    "line": 38
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 49
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 67
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 124
                },
                {
                    "type": "str",
                    "value": "pjiofrdslaikfunr",
                    "line": 162
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 183
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 184
                },
                {
                    "type": "str",
                    "value": "start",
                    "line": 455
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 461
                },
                {
                    "type": "str",
                    "value": "abort",
                    "line": 467
                },
                {
                    "type": "str",
                    "value": "user-id",
                    "line": 39
                },
                {
                    "type": "str",
                    "value": "action-id",
                    "line": 39
                },
                {
                    "type": "str",
                    "value": "awesome_result",
                    "line": 40
                },
                {
                    "type": "str",
                    "value": "regular test failure",
                    "line": 43
                },
                {
                    "type": "str",
                    "value": "user-id",
                    "line": 44
                },
                {
                    "type": "str",
                    "value": "action-id",
                    "line": 44
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 52
                },
                {
                    "type": "str",
                    "value": "max_retries",
                    "line": 56
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 56
                },
                {
                    "type": "str",
                    "value": "job_actions",
                    "line": 58
                },
                {
                    "type": "str",
                    "value": "description",
                    "line": 59
                },
                {
                    "type": "str",
                    "value": "three actions backup",
                    "line": 59
                },
                {
                    "type": "str",
                    "value": "duder",
                    "line": 61
                },
                {
                    "type": "str",
                    "value": "action_id",
                    "line": 69
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 70
                },
                {
                    "type": "str",
                    "value": "max_retries",
                    "line": 74
                },
                {
                    "type": "str",
                    "value": "ottonero",
                    "line": 69
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 74
                },
                {
                    "type": "str",
                    "value": "job_actions",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "description",
                    "line": 77
                },
                {
                    "type": "str",
                    "value": "three actions backup",
                    "line": 77
                },
                {
                    "type": "str",
                    "value": "duder",
                    "line": 79
                },
                {
                    "type": "str",
                    "value": "action_id",
                    "line": 86
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 87
                },
                {
                    "type": "str",
                    "value": "max_retries",
                    "line": 91
                },
                {
                    "type": "str",
                    "value": "ottonero",
                    "line": 86
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 91
                },
                {
                    "type": "str",
                    "value": "job_actions",
                    "line": 93
                },
                {
                    "type": "str",
                    "value": "description",
                    "line": 94
                },
                {
                    "type": "str",
                    "value": "three actions backup",
                    "line": 94
                },
                {
                    "type": "str",
                    "value": "duder",
                    "line": 97
                },
                {
                    "type": "str",
                    "value": "action_id",
                    "line": 103
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 104
                },
                {
                    "type": "str",
                    "value": "max_retries",
                    "line": 108
                },
                {
                    "type": "str",
                    "value": "ottonero",
                    "line": 103
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 108
                },
                {
                    "type": "str",
                    "value": "job_actions",
                    "line": 110
                },
                {
                    "type": "str",
                    "value": "description",
                    "line": 111
                },
                {
                    "type": "str",
                    "value": "three actions backup",
                    "line": 111
                },
                {
                    "type": "str",
                    "value": "action_id",
                    "line": 115
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 116
                },
                {
                    "type": "str",
                    "value": "max_retries",
                    "line": 120
                },
                {
                    "type": "str",
                    "value": "ottonero",
                    "line": 115
                },
                {
                    "type": "int",
                    "value": 4,
                    "line": 120
                },
                {
                    "type": "str",
                    "value": "action_id",
                    "line": 124
                },
                {
                    "type": "str",
                    "value": "duder",
                    "line": 126
                },
                {
                    "type": "str",
                    "value": "jobs",
                    "line": 145
                },
                {
                    "type": "str",
                    "value": "jobs",
                    "line": 153
                },
                {
                    "type": "str",
                    "value": "job_id",
                    "line": 163
                },
                {
                    "type": "str",
                    "value": "pjiofrdslaikfunr",
                    "line": 163
                },
                {
                    "type": "str",
                    "value": "job_id",
                    "line": 199
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 204
                },
                {
                    "type": "int",
                    "value": 99,
                    "line": 204
                },
                {
                    "type": "str",
                    "value": "some_field",
                    "line": 206
                },
                {
                    "type": "str",
                    "value": "because",
                    "line": 207
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 208
                },
                {
                    "type": "str",
                    "value": "some_value",
                    "line": 206
                },
                {
                    "type": "str",
                    "value": "size_matters",
                    "line": 207
                },
                {
                    "type": "str",
                    "value": "job_id",
                    "line": 210
                },
                {
                    "type": "str",
                    "value": "version",
                    "line": 211
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 223
                },
                {
                    "type": "int",
                    "value": 99,
                    "line": 223
                },
                {
                    "type": "str",
                    "value": "job_id",
                    "line": 227
                },
                {
                    "type": "str",
                    "value": "version",
                    "line": 228
                },
                {
                    "type": "str",
                    "value": "regular test failure",
                    "line": 235
                },
                {
                    "type": "str",
                    "value": "user_id",
                    "line": 249
                },
                {
                    "type": "str",
                    "value": "my_job_id",
                    "line": 264
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 267
                },
                {
                    "type": "int",
                    "value": 99,
                    "line": 267
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 269
                },
                {
                    "type": "str",
                    "value": "start",
                    "line": 274
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 274
                },
                {
                    "type": "str",
                    "value": "result",
                    "line": 276
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 276
                },
                {
                    "type": "str",
                    "value": "my_job_id",
                    "line": 277
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 285
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 295
                },
                {
                    "type": "str",
                    "value": "already active",
                    "line": 302
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 306
                },
                {
                    "type": "str",
                    "value": "already active",
                    "line": 313
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 317
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 324
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 325
                },
                {
                    "type": "str",
                    "value": "start",
                    "line": 326
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 330
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 337
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 338
                },
                {
                    "type": "str",
                    "value": "start",
                    "line": 339
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 343
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 350
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 351
                },
                {
                    "type": "str",
                    "value": "start",
                    "line": 352
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 356
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 363
                },
                {
                    "type": "str",
                    "value": "scheduled",
                    "line": 364
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 365
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 369
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 376
                },
                {
                    "type": "str",
                    "value": "running",
                    "line": 377
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 378
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 382
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 389
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 390
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 391
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 395
                },
                {
                    "type": "str",
                    "value": "already stopped",
                    "line": 402
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 406
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 413
                },
                {
                    "type": "str",
                    "value": "scheduled",
                    "line": 414
                },
                {
                    "type": "str",
                    "value": "abort",
                    "line": 415
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 419
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 426
                },
                {
                    "type": "str",
                    "value": "running",
                    "line": 427
                },
                {
                    "type": "str",
                    "value": "abort",
                    "line": 428
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 432
                },
                {
                    "type": "str",
                    "value": "success",
                    "line": 439
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 440
                },
                {
                    "type": "str",
                    "value": "abort",
                    "line": 441
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 445
                },
                {
                    "type": "str",
                    "value": "already stopped",
                    "line": 452
                },
                {
                    "type": "str",
                    "value": "start",
                    "line": 458
                },
                {
                    "type": "str",
                    "value": "my_params",
                    "line": 458
                },
                {
                    "type": "str",
                    "value": "my_params",
                    "line": 459
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 464
                },
                {
                    "type": "str",
                    "value": "my_params",
                    "line": 464
                },
                {
                    "type": "str",
                    "value": "my_params",
                    "line": 465
                },
                {
                    "type": "str",
                    "value": "abort",
                    "line": 470
                },
                {
                    "type": "str",
                    "value": "my_params",
                    "line": 470
                },
                {
                    "type": "str",
                    "value": "my_params",
                    "line": 471
                },
                {
                    "type": "str",
                    "value": "smile",
                    "line": 475
                },
                {
                    "type": "str",
                    "value": "my_params",
                    "line": 475
                },
                {
                    "type": "str",
                    "value": "action_defaults",
                    "line": 479
                },
                {
                    "type": "str",
                    "value": "job_actions",
                    "line": 480
                },
                {
                    "type": "str",
                    "value": "job_actions",
                    "line": 486
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 491
                },
                {
                    "type": "str",
                    "value": "mode",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "container",
                    "line": 54
                },
                {
                    "type": "str",
                    "value": "mysql",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "freezer_backup_test",
                    "line": 54
                },
                {
                    "type": "str",
                    "value": "duder",
                    "line": 62
                },
                {
                    "type": "str",
                    "value": "mode",
                    "line": 71
                },
                {
                    "type": "str",
                    "value": "container",
                    "line": 72
                },
                {
                    "type": "str",
                    "value": "mysql",
                    "line": 71
                },
                {
                    "type": "str",
                    "value": "freezer_backup_test",
                    "line": 72
                },
                {
                    "type": "str",
                    "value": "duder",
                    "line": 80
                },
                {
                    "type": "str",
                    "value": "mode",
                    "line": 88
                },
                {
                    "type": "str",
                    "value": "container",
                    "line": 89
                },
                {
                    "type": "str",
                    "value": "mysql",
                    "line": 88
                },
                {
                    "type": "str",
                    "value": "freezer_backup_test",
                    "line": 89
                },
                {
                    "type": "str",
                    "value": "mode",
                    "line": 105
                },
                {
                    "type": "str",
                    "value": "container",
                    "line": 106
                },
                {
                    "type": "str",
                    "value": "mysql",
                    "line": 105
                },
                {
                    "type": "str",
                    "value": "freezer_backup_test",
                    "line": 106
                },
                {
                    "type": "str",
                    "value": "mode",
                    "line": 117
                },
                {
                    "type": "str",
                    "value": "container",
                    "line": 118
                },
                {
                    "type": "str",
                    "value": "mysql",
                    "line": 117
                },
                {
                    "type": "str",
                    "value": "different_drum",
                    "line": 118
                },
                {
                    "type": "str",
                    "value": "duder",
                    "line": 127
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 270
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 270
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 287
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 288
                },
                {
                    "type": "str",
                    "value": "complicated",
                    "line": 287
                },
                {
                    "type": "str",
                    "value": "boost",
                    "line": 288
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 297
                },
                {
                    "type": "str",
                    "value": "scheduled",
                    "line": 297
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 308
                },
                {
                    "type": "str",
                    "value": "running",
                    "line": 308
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 319
                },
                {
                    "type": "str",
                    "value": "stop",
                    "line": 319
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 325
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 326
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 332
                },
                {
                    "type": "str",
                    "value": "completed",
                    "line": 332
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 338
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 339
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 345
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 345
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 351
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 352
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 358
                },
                {
                    "type": "str",
                    "value": "scheduled",
                    "line": 358
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 364
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 365
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 371
                },
                {
                    "type": "str",
                    "value": "running",
                    "line": 371
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 377
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 378
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 384
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 384
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 390
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 391
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 397
                },
                {
                    "type": "str",
                    "value": "whatever",
                    "line": 397
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 408
                },
                {
                    "type": "str",
                    "value": "scheduled",
                    "line": 408
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 414
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 415
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 421
                },
                {
                    "type": "str",
                    "value": "running",
                    "line": 421
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 427
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 428
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 434
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 434
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 440
                },
                {
                    "type": "str",
                    "value": "event",
                    "line": 441
                },
                {
                    "type": "str",
                    "value": "status",
                    "line": 447
                },
                {
                    "type": "str",
                    "value": "whatever",
                    "line": 447
                },
                {
                    "type": "str",
                    "value": "that_field",
                    "line": 479
                },
                {
                    "type": "str",
                    "value": "that_value",
                    "line": 479
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 325
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 326
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 338
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 339
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 351
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 352
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 364
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 365
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 377
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 378
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 390
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 391
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 414
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 415
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 427
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 428
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 440
                },
                {
                    "type": "str",
                    "value": "job_schedule",
                    "line": 441
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 481
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 482
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 487
                },
                {
                    "type": "str",
                    "value": "freezer_action",
                    "line": 489
                },
                {
                    "type": "str",
                    "value": "not_that_field",
                    "line": 481
                },
                {
                    "type": "str",
                    "value": "some_value",
                    "line": 481
                },
                {
                    "type": "str",
                    "value": "that_field",
                    "line": 482
                },
                {
                    "type": "str",
                    "value": "another_value",
                    "line": 482
                },
                {
                    "type": "str",
                    "value": "not_that_field",
                    "line": 487
                },
                {
                    "type": "str",
                    "value": "that_field",
                    "line": 488
                },
                {
                    "type": "str",
                    "value": "some_value",
                    "line": 487
                },
                {
                    "type": "str",
                    "value": "that_value",
                    "line": 488
                },
                {
                    "type": "str",
                    "value": "that_field",
                    "line": 489
                },
                {
                    "type": "str",
                    "value": "another_value",
                    "line": 489
                }
            ],
            "variables": [
                {
                    "name": "result",
                    "line": 39
                },
                {
                    "name": "result",
                    "line": 44
                },
                {
                    "name": "action_doc",
                    "line": 50
                },
                {
                    "name": "job_doc",
                    "line": 58
                },
                {
                    "name": "action_doc",
                    "line": 68
                },
                {
                    "name": "job_doc",
                    "line": 76
                },
                {
                    "name": "action_doc",
                    "line": 85
                },
                {
                    "name": "job_doc",
                    "line": 93
                },
                {
                    "name": "action_doc",
                    "line": 102
                },
                {
                    "name": "job_doc",
                    "line": 110
                },
                {
                    "name": "found_action",
                    "line": 114
                },
                {
                    "name": "new_doc",
                    "line": 123
                },
                {
                    "name": "expected_result",
                    "line": 145
                },
                {
                    "name": "result",
                    "line": 147
                },
                {
                    "name": "expected_result",
                    "line": 153
                },
                {
                    "name": "result",
                    "line": 155
                },
                {
                    "name": "job",
                    "line": 160
                },
                {
                    "name": "expected_result",
                    "line": 163
                },
                {
                    "name": "result",
                    "line": 192
                },
                {
                    "name": "result",
                    "line": 198
                },
                {
                    "name": "expected_result",
                    "line": 199
                },
                {
                    "name": "new_version",
                    "line": 204
                },
                {
                    "name": "patch_doc",
                    "line": 206
                },
                {
                    "name": "expected_result",
                    "line": 210
                },
                {
                    "name": "result",
                    "line": 219
                },
                {
                    "name": "new_version",
                    "line": 223
                },
                {
                    "name": "job",
                    "line": 225
                },
                {
                    "name": "expected_result",
                    "line": 227
                },
                {
                    "name": "job",
                    "line": 236
                },
                {
                    "name": "new_version",
                    "line": 267
                },
                {
                    "name": "event",
                    "line": 274
                },
                {
                    "name": "expected_result",
                    "line": 276
                },
                {
                    "name": "job_doc",
                    "line": 285
                },
                {
                    "name": "job",
                    "line": 291
                },
                {
                    "name": "job_doc",
                    "line": 295
                },
                {
                    "name": "job",
                    "line": 300
                },
                {
                    "name": "res",
                    "line": 301
                },
                {
                    "name": "job_doc",
                    "line": 306
                },
                {
                    "name": "job",
                    "line": 311
                },
                {
                    "name": "res",
                    "line": 312
                },
                {
                    "name": "job_doc",
                    "line": 317
                },
                {
                    "name": "job",
                    "line": 322
                },
                {
                    "name": "res",
                    "line": 323
                },
                {
                    "name": "job_doc",
                    "line": 330
                },
                {
                    "name": "job",
                    "line": 335
                },
                {
                    "name": "res",
                    "line": 336
                },
                {
                    "name": "job_doc",
                    "line": 343
                },
                {
                    "name": "job",
                    "line": 348
                },
                {
                    "name": "res",
                    "line": 349
                },
                {
                    "name": "job_doc",
                    "line": 356
                },
                {
                    "name": "job",
                    "line": 361
                },
                {
                    "name": "res",
                    "line": 362
                },
                {
                    "name": "job_doc",
                    "line": 369
                },
                {
                    "name": "job",
                    "line": 374
                },
                {
                    "name": "res",
                    "line": 375
                },
                {
                    "name": "job_doc",
                    "line": 382
                },
                {
                    "name": "job",
                    "line": 387
                },
                {
                    "name": "res",
                    "line": 388
                },
                {
                    "name": "job_doc",
                    "line": 395
                },
                {
                    "name": "job",
                    "line": 400
                },
                {
                    "name": "res",
                    "line": 401
                },
                {
                    "name": "job_doc",
                    "line": 406
                },
                {
                    "name": "job",
                    "line": 411
                },
                {
                    "name": "res",
                    "line": 412
                },
                {
                    "name": "job_doc",
                    "line": 419
                },
                {
                    "name": "job",
                    "line": 424
                },
                {
                    "name": "res",
                    "line": 425
                },
                {
                    "name": "job_doc",
                    "line": 432
                },
                {
                    "name": "job",
                    "line": 437
                },
                {
                    "name": "res",
                    "line": 438
                },
                {
                    "name": "job_doc",
                    "line": 445
                },
                {
                    "name": "job",
                    "line": 450
                },
                {
                    "name": "res",
                    "line": 451
                },
                {
                    "name": "job",
                    "line": 457
                },
                {
                    "name": "res",
                    "line": 458
                },
                {
                    "name": "job",
                    "line": 463
                },
                {
                    "name": "res",
                    "line": 464
                },
                {
                    "name": "job",
                    "line": 469
                },
                {
                    "name": "res",
                    "line": 470
                },
                {
                    "name": "job",
                    "line": 474
                },
                {
                    "name": "job_doc",
                    "line": 478
                },
                {
                    "name": "expected_job_doc",
                    "line": 485
                },
                {
                    "name": "job",
                    "line": 493
                }
            ],
            "calls": [
                {
                    "func": "patch.object",
                    "args": [
                        "v1_jobs.Job",
                        "'start'"
                    ],
                    "keywords": [],
                    "line": 455
                },
                {
                    "func": "patch.object",
                    "args": [
                        "v1_jobs.Job",
                        "'stop'"
                    ],
                    "keywords": [],
                    "line": 461
                },
                {
                    "func": "patch.object",
                    "args": [
                        "v1_jobs.Job",
                        "'abort'"
                    ],
                    "keywords": [],
                    "line": 467
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 34
                },
                {
                    "func": "v1_jobs.JobsBaseResource",
                    "args": [
                        "self.mock_db"
                    ],
                    "keywords": [],
                    "line": 35
                },
                {
                    "func": "self.resource.get_action",
                    "args": [
                        "'user-id'",
                        "'action-id'"
                    ],
                    "keywords": [],
                    "line": 39
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "result",
                        "'awesome_result'"
                    ],
                    "keywords": [],
                    "line": 40
                },
                {
                    "func": "DocumentNotFound",
                    "args": [
                        "'regular test failure'"
                    ],
                    "keywords": [],
                    "line": 43
                },
                {
                    "func": "self.resource.get_action",
                    "args": [
                        "'user-id'",
                        "'action-id'"
                    ],
                    "keywords": [],
                    "line": 44
                },
                {
                    "func": "self.assertIsNone",
                    "args": [
                        "result"
                    ],
                    "keywords": [],
                    "line": 45
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 48
                },
                {
                    "func": "self.resource.update_actions_in_job",
                    "args": [
                        "'duder'"
                    ],
                    "keywords": [
                        {
                            "keyword": "job_doc",
                            "value": "job_doc"
                        }
                    ],
                    "line": 61
                },
                {
                    "func": "self.mock_db.add_action.assert_called_with",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "user_id",
                            "value": "'duder'"
                        },
                        {
                            "keyword": "doc",
                            "value": "action_doc"
                        }
                    ],
                    "line": 62
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 66
                },
                {
                    "func": "self.resource.update_actions_in_job",
                    "args": [
                        "'duder'"
                    ],
                    "keywords": [
                        {
                            "keyword": "job_doc",
                            "value": "job_doc"
                        }
                    ],
                    "line": 79
                },
                {
                    "func": "self.mock_db.add_action.assert_called_with",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "user_id",
                            "value": "'duder'"
                        },
                        {
                            "keyword": "doc",
                            "value": "action_doc"
                        }
                    ],
                    "line": 80
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 84
                },
                {
                    "func": "action_doc.copy",
                    "args": [],
                    "keywords": [],
                    "line": 96
                },
                {
                    "func": "self.resource.update_actions_in_job",
                    "args": [
                        "'duder'"
                    ],
                    "keywords": [
                        {
                            "keyword": "job_doc",
                            "value": "job_doc"
                        }
                    ],
                    "line": 97
                },
                {
                    "func": "self.mock_db.add_action.assert_not_called",
                    "args": [],
                    "keywords": [],
                    "line": 98
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 101
                },
                {
                    "func": "action_doc.copy",
                    "args": [],
                    "keywords": [],
                    "line": 123
                },
                {
                    "func": "self.resource.update_actions_in_job",
                    "args": [
                        "'duder'"
                    ],
                    "keywords": [
                        {
                            "keyword": "job_doc",
                            "value": "job_doc"
                        }
                    ],
                    "line": 126
                },
                {
                    "func": "self.mock_db.add_action.assert_called_with",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "user_id",
                            "value": "'duder'"
                        },
                        {
                            "keyword": "doc",
                            "value": "new_doc"
                        }
                    ],
                    "line": 127
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 134
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 136
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 137
                },
                {
                    "func": "v1_jobs.JobsCollectionResource",
                    "args": [
                        "self.mock_db"
                    ],
                    "keywords": [],
                    "line": 140
                },
                {
                    "func": "self.resource.on_get",
                    "args": [
                        "self.mock_req",
                        "self.mock_req"
                    ],
                    "keywords": [],
                    "line": 146
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "result",
                        "expected_result"
                    ],
                    "keywords": [],
                    "line": 148
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_200"
                    ],
                    "keywords": [],
                    "line": 149
                },
                {
                    "func": "self.resource.on_get",
                    "args": [
                        "self.mock_req",
                        "self.mock_req"
                    ],
                    "keywords": [],
                    "line": 154
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "result",
                        "expected_result"
                    ],
                    "keywords": [],
                    "line": 156
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_200"
                    ],
                    "keywords": [],
                    "line": 157
                },
                {
                    "func": "get_fake_job_0",
                    "args": [],
                    "keywords": [],
                    "line": 160
                },
                {
                    "func": "self.resource.on_post",
                    "args": [
                        "self.mock_req",
                        "self.mock_req"
                    ],
                    "keywords": [],
                    "line": 164
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_201"
                    ],
                    "keywords": [],
                    "line": 165
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.body",
                        "expected_result"
                    ],
                    "keywords": [],
                    "line": 166
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 172
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 173
                },
                {
                    "func": "v1_jobs.JobsResource",
                    "args": [
                        "self.mock_db"
                    ],
                    "keywords": [],
                    "line": 177
                },
                {
                    "func": "self.assertIsInstance",
                    "args": [
                        "self.resource",
                        "v1_jobs.JobsResource"
                    ],
                    "keywords": [],
                    "line": 180
                },
                {
                    "func": "self.resource.on_get",
                    "args": [
                        "self.mock_req",
                        "self.mock_req",
                        "fake_job_0_job_id"
                    ],
                    "keywords": [],
                    "line": 185
                },
                {
                    "func": "self.assertIsNone",
                    "args": [
                        "self.mock_req.body"
                    ],
                    "keywords": [],
                    "line": 186
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_404"
                    ],
                    "keywords": [],
                    "line": 187
                },
                {
                    "func": "get_fake_job_0",
                    "args": [],
                    "keywords": [],
                    "line": 190
                },
                {
                    "func": "self.resource.on_get",
                    "args": [
                        "self.mock_req",
                        "self.mock_req",
                        "fake_job_0_job_id"
                    ],
                    "keywords": [],
                    "line": 191
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "result",
                        "get_fake_job_0()"
                    ],
                    "keywords": [],
                    "line": 193
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_200"
                    ],
                    "keywords": [],
                    "line": 194
                },
                {
                    "func": "self.resource.on_delete",
                    "args": [
                        "self.mock_req",
                        "self.mock_req",
                        "fake_job_0_job_id"
                    ],
                    "keywords": [],
                    "line": 197
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_204"
                    ],
                    "keywords": [],
                    "line": 200
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "result",
                        "expected_result"
                    ],
                    "keywords": [],
                    "line": 201
                },
                {
                    "func": "random.randint",
                    "args": [
                        "0",
                        "99"
                    ],
                    "keywords": [],
                    "line": 204
                },
                {
                    "func": "json.dumps",
                    "args": [
                        "patch_doc"
                    ],
                    "keywords": [],
                    "line": 209
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 212
                },
                {
                    "func": "self.resource.on_patch",
                    "args": [
                        "self.mock_req",
                        "self.mock_req",
                        "fake_job_0_job_id"
                    ],
                    "keywords": [],
                    "line": 213
                },
                {
                    "func": "self.mock_db.update_job.assert_called_with",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "user_id",
                            "value": "fake_job_0_user_id"
                        },
                        {
                            "keyword": "job_id",
                            "value": "fake_job_0_job_id"
                        },
                        {
                            "keyword": "patch_doc",
                            "value": "patch_doc"
                        }
                    ],
                    "line": 214
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_200"
                    ],
                    "keywords": [],
                    "line": 218
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "result",
                        "expected_result"
                    ],
                    "keywords": [],
                    "line": 220
                },
                {
                    "func": "random.randint",
                    "args": [
                        "0",
                        "99"
                    ],
                    "keywords": [],
                    "line": 223
                },
                {
                    "func": "get_fake_job_0",
                    "args": [],
                    "keywords": [],
                    "line": 225
                },
                {
                    "func": "json.dumps",
                    "args": [
                        "job"
                    ],
                    "keywords": [],
                    "line": 226
                },
                {
                    "func": "self.resource.on_post",
                    "args": [
                        "self.mock_req",
                        "self.mock_req",
                        "fake_job_0_job_id"
                    ],
                    "keywords": [],
                    "line": 230
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_201"
                    ],
                    "keywords": [],
                    "line": 231
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.body",
                        "expected_result"
                    ],
                    "keywords": [],
                    "line": 232
                },
                {
                    "func": "AccessForbidden",
                    "args": [
                        "'regular test failure'"
                    ],
                    "keywords": [],
                    "line": 235
                },
                {
                    "func": "get_fake_job_0",
                    "args": [],
                    "keywords": [],
                    "line": 236
                },
                {
                    "func": "json.dumps",
                    "args": [
                        "job"
                    ],
                    "keywords": [],
                    "line": 237
                },
                {
                    "func": "self.assertRaises",
                    "args": [
                        "AccessForbidden",
                        "self.resource.on_post",
                        "self.mock_req",
                        "self.mock_req",
                        "fake_job_0_job_id"
                    ],
                    "keywords": [],
                    "line": 238
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 247
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 248
                },
                {
                    "func": "v1_jobs.JobsEvent",
                    "args": [
                        "self.mock_db"
                    ],
                    "keywords": [],
                    "line": 251
                },
                {
                    "func": "Mock",
                    "args": [],
                    "keywords": [],
                    "line": 252
                },
                {
                    "func": "self.assertIsInstance",
                    "args": [
                        "self.resource",
                        "v1_jobs.JobsEvent"
                    ],
                    "keywords": [],
                    "line": 257
                },
                {
                    "func": "self.assertRaises",
                    "args": [
                        "BadDataFormat",
                        "self.resource.on_post",
                        "self.mock_req",
                        "self.mock_req",
                        "'my_job_id'"
                    ],
                    "keywords": [],
                    "line": 261
                },
                {
                    "func": "random.randint",
                    "args": [
                        "0",
                        "99"
                    ],
                    "keywords": [],
                    "line": 267
                },
                {
                    "func": "self.resource.on_post",
                    "args": [
                        "self.mock_req",
                        "self.mock_req",
                        "'my_job_id'"
                    ],
                    "keywords": [],
                    "line": 277
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.status",
                        "falcon.HTTP_202"
                    ],
                    "keywords": [],
                    "line": 278
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "self.mock_req.body",
                        "expected_result"
                    ],
                    "keywords": [],
                    "line": 279
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 291
                },
                {
                    "func": "self.assertRaises",
                    "args": [
                        "BadDataFormat",
                        "job.start"
                    ],
                    "keywords": [],
                    "line": 292
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 300
                },
                {
                    "func": "job.start",
                    "args": [],
                    "keywords": [],
                    "line": 301
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'already active'"
                    ],
                    "keywords": [],
                    "line": 302
                },
                {
                    "func": "self.assertFalse",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 303
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 311
                },
                {
                    "func": "job.start",
                    "args": [],
                    "keywords": [],
                    "line": 312
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'already active'"
                    ],
                    "keywords": [],
                    "line": 313
                },
                {
                    "func": "self.assertFalse",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 314
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 322
                },
                {
                    "func": "job.start",
                    "args": [],
                    "keywords": [],
                    "line": 323
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 324
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "'stop'"
                    ],
                    "keywords": [],
                    "line": 325
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'start'"
                    ],
                    "keywords": [],
                    "line": 326
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 327
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 335
                },
                {
                    "func": "job.start",
                    "args": [],
                    "keywords": [],
                    "line": 336
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 337
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "'stop'"
                    ],
                    "keywords": [],
                    "line": 338
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'start'"
                    ],
                    "keywords": [],
                    "line": 339
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 340
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 348
                },
                {
                    "func": "job.start",
                    "args": [],
                    "keywords": [],
                    "line": 349
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 350
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "'stop'"
                    ],
                    "keywords": [],
                    "line": 351
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'start'"
                    ],
                    "keywords": [],
                    "line": 352
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 353
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 361
                },
                {
                    "func": "job.stop",
                    "args": [],
                    "keywords": [],
                    "line": 362
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 363
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "'scheduled'"
                    ],
                    "keywords": [],
                    "line": 364
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'stop'"
                    ],
                    "keywords": [],
                    "line": 365
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 366
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 374
                },
                {
                    "func": "job.stop",
                    "args": [],
                    "keywords": [],
                    "line": 375
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 376
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "'running'"
                    ],
                    "keywords": [],
                    "line": 377
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'stop'"
                    ],
                    "keywords": [],
                    "line": 378
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 379
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 387
                },
                {
                    "func": "job.stop",
                    "args": [],
                    "keywords": [],
                    "line": 388
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 389
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "''"
                    ],
                    "keywords": [],
                    "line": 390
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'stop'"
                    ],
                    "keywords": [],
                    "line": 391
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 392
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 400
                },
                {
                    "func": "job.stop",
                    "args": [],
                    "keywords": [],
                    "line": 401
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'already stopped'"
                    ],
                    "keywords": [],
                    "line": 402
                },
                {
                    "func": "self.assertFalse",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 403
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 411
                },
                {
                    "func": "job.abort",
                    "args": [],
                    "keywords": [],
                    "line": 412
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 413
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "'scheduled'"
                    ],
                    "keywords": [],
                    "line": 414
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'abort'"
                    ],
                    "keywords": [],
                    "line": 415
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 416
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 424
                },
                {
                    "func": "job.abort",
                    "args": [],
                    "keywords": [],
                    "line": 425
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 426
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "'running'"
                    ],
                    "keywords": [],
                    "line": 427
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'abort'"
                    ],
                    "keywords": [],
                    "line": 428
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 429
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 437
                },
                {
                    "func": "job.abort",
                    "args": [],
                    "keywords": [],
                    "line": 438
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'success'"
                    ],
                    "keywords": [],
                    "line": 439
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['status']",
                        "''"
                    ],
                    "keywords": [],
                    "line": 440
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc['job_schedule']['event']",
                        "'abort'"
                    ],
                    "keywords": [],
                    "line": 441
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 442
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 450
                },
                {
                    "func": "job.abort",
                    "args": [],
                    "keywords": [],
                    "line": 451
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "res",
                        "'already stopped'"
                    ],
                    "keywords": [],
                    "line": 452
                },
                {
                    "func": "self.assertFalse",
                    "args": [
                        "job.need_update"
                    ],
                    "keywords": [],
                    "line": 453
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "{}"
                    ],
                    "keywords": [],
                    "line": 457
                },
                {
                    "func": "job.execute_event",
                    "args": [
                        "'start'",
                        "'my_params'"
                    ],
                    "keywords": [],
                    "line": 458
                },
                {
                    "func": "mock_start.assert_called_once_with",
                    "args": [
                        "'my_params'"
                    ],
                    "keywords": [],
                    "line": 459
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "{}"
                    ],
                    "keywords": [],
                    "line": 463
                },
                {
                    "func": "job.execute_event",
                    "args": [
                        "'stop'",
                        "'my_params'"
                    ],
                    "keywords": [],
                    "line": 464
                },
                {
                    "func": "mock_stop.assert_called_once_with",
                    "args": [
                        "'my_params'"
                    ],
                    "keywords": [],
                    "line": 465
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "{}"
                    ],
                    "keywords": [],
                    "line": 469
                },
                {
                    "func": "job.execute_event",
                    "args": [
                        "'abort'",
                        "'my_params'"
                    ],
                    "keywords": [],
                    "line": 470
                },
                {
                    "func": "mock_abort.assert_called_once_with",
                    "args": [
                        "'my_params'"
                    ],
                    "keywords": [],
                    "line": 471
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "{}"
                    ],
                    "keywords": [],
                    "line": 474
                },
                {
                    "func": "self.assertRaises",
                    "args": [
                        "BadDataFormat",
                        "job.execute_event",
                        "'smile'",
                        "'my_params'"
                    ],
                    "keywords": [],
                    "line": 475
                },
                {
                    "func": "v1_jobs.Job",
                    "args": [
                        "job_doc"
                    ],
                    "keywords": [],
                    "line": 493
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "job.doc",
                        "expected_job_doc"
                    ],
                    "keywords": [],
                    "line": 494
                },
                {
                    "func": "get_fake_job_0",
                    "args": [],
                    "keywords": [],
                    "line": 152
                },
                {
                    "func": "get_fake_job_1",
                    "args": [],
                    "keywords": [],
                    "line": 152
                },
                {
                    "func": "get_fake_job_0",
                    "args": [],
                    "keywords": [],
                    "line": 193
                },
                {
                    "func": "action_doc.copy",
                    "args": [],
                    "keywords": [],
                    "line": 58
                },
                {
                    "func": "action_doc.copy",
                    "args": [],
                    "keywords": [],
                    "line": 76
                },
                {
                    "func": "action_doc.copy",
                    "args": [],
                    "keywords": [],
                    "line": 93
                },
                {
                    "func": "action_doc.copy",
                    "args": [],
                    "keywords": [],
                    "line": 110
                },
                {
                    "func": "get_fake_job_0",
                    "args": [],
                    "keywords": [],
                    "line": 153
                },
                {
                    "func": "get_fake_job_1",
                    "args": [],
                    "keywords": [],
                    "line": 153
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\dimagi\\commcare-hq\\corehq\\ex-submodules\\casexml\\apps\\case\\tests\\util.py": {
        "vulnerabilities": [
            {
                "line": 4,
                "test_id": "B405",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "3 from datetime import datetime\n4 from xml.etree import ElementTree\n5 from corehq.apps.domain.models import Domain\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "os",
                            "asname": null
                        }
                    ],
                    "line": 1
                },
                {
                    "names": [
                        {
                            "name": "uuid",
                            "asname": null
                        }
                    ],
                    "line": 2
                },
                {
                    "module": "datetime",
                    "names": [
                        {
                            "name": "datetime",
                            "asname": null
                        }
                    ],
                    "line": 3
                },
                {
                    "module": "xml.etree",
                    "names": [
                        {
                            "name": "ElementTree",
                            "asname": null
                        }
                    ],
                    "line": 4
                },
                {
                    "module": "corehq.apps.domain.models",
                    "names": [
                        {
                            "name": "Domain",
                            "asname": null
                        }
                    ],
                    "line": 5
                },
                {
                    "module": "corehq.apps.receiverwrapper",
                    "names": [
                        {
                            "name": "submit_form_locally",
                            "asname": null
                        }
                    ],
                    "line": 6
                },
                {
                    "module": "corehq.form_processor.tests.utils",
                    "names": [
                        {
                            "name": "FormProcessorTestUtils",
                            "asname": null
                        }
                    ],
                    "line": 7
                },
                {
                    "module": "corehq.util.test_utils",
                    "names": [
                        {
                            "name": "unit_testing_only",
                            "asname": null
                        }
                    ],
                    "line": 8
                },
                {
                    "module": "dimagi.utils.dates",
                    "names": [
                        {
                            "name": "utcnow_sans_milliseconds",
                            "asname": null
                        }
                    ],
                    "line": 10
                },
                {
                    "module": "lxml",
                    "names": [
                        {
                            "name": "etree",
                            "asname": null
                        }
                    ],
                    "line": 11
                },
                {
                    "module": "casexml.apps.case.mock",
                    "names": [
                        {
                            "name": "CaseBlock",
                            "asname": null
                        }
                    ],
                    "line": 13
                },
                {
                    "module": "casexml.apps.case.xml",
                    "names": [
                        {
                            "name": "V1",
                            "asname": null
                        },
                        {
                            "name": "V2",
                            "asname": null
                        },
                        {
                            "name": "NS_VERSION_MAP",
                            "asname": null
                        }
                    ],
                    "line": 14
                },
                {
                    "module": "casexml.apps.phone.models",
                    "names": [
                        {
                            "name": "SyncLog",
                            "asname": null
                        }
                    ],
                    "line": 15
                },
                {
                    "module": "casexml.apps.phone.restore",
                    "names": [
                        {
                            "name": "RestoreConfig",
                            "asname": null
                        },
                        {
                            "name": "RestoreParams",
                            "asname": null
                        }
                    ],
                    "line": 16
                },
                {
                    "names": [
                        {
                            "name": "logging",
                            "asname": null
                        }
                    ],
                    "line": 101
                }
            ],
            "variables": [
                {
                    "name": "TEST_DOMAIN_NAME",
                    "line": 19
                },
                {
                    "name": "starttime",
                    "line": 47
                },
                {
                    "name": "file_path",
                    "line": 49
                },
                {
                    "name": "domain",
                    "line": 57
                },
                {
                    "name": "xml_data",
                    "line": 72
                },
                {
                    "name": "xml_data",
                    "line": 73
                },
                {
                    "name": "parser",
                    "line": 81
                },
                {
                    "name": "parsed_expected",
                    "line": 82
                },
                {
                    "name": "parsed_actual",
                    "line": 83
                },
                {
                    "name": "case_blocks",
                    "line": 111
                },
                {
                    "name": "case_blocks",
                    "line": 121
                },
                {
                    "name": "parsed_payload",
                    "line": 131
                },
                {
                    "name": "xml_blocks",
                    "line": 132
                },
                {
                    "name": "XMLNS",
                    "line": 144
                },
                {
                    "name": "restore_config",
                    "line": 148
                },
                {
                    "name": "payload_string",
                    "line": 152
                },
                {
                    "name": "blocks",
                    "line": 153
                },
                {
                    "name": "matches",
                    "line": 192
                },
                {
                    "name": "xml_data",
                    "line": 51
                },
                {
                    "name": "case_id",
                    "line": 70
                },
                {
                    "name": "expected_lines",
                    "line": 89
                },
                {
                    "name": "actual_lines",
                    "line": 90
                },
                {
                    "name": "case_blocks",
                    "line": 141
                },
                {
                    "name": "return_single",
                    "line": 142
                },
                {
                    "name": "case_block",
                    "line": 157
                },
                {
                    "name": "case_id",
                    "line": 158
                },
                {
                    "name": "n",
                    "line": 159
                },
                {
                    "name": "match",
                    "line": 164
                },
                {
                    "name": "match",
                    "line": 174
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "test-domain",
                    "line": 19
                },
                {
                    "type": "str",
                    "value": "\n    Little shim class for working with XML case blocks in a restore payload\n    ",
                    "line": 23
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 46
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 46
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 65
                },
                {
                    "type": "str",
                    "value": "Does what it's called, hopefully parameters are self-explanatory",
                    "line": 78
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 136
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 137
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 137
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 138
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 138
                },
                {
                    "type": "str",
                    "value": "get_case_name not yet supported for legacy V1 casexml",
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "data",
                    "line": 49
                },
                {
                    "type": "str",
                    "value": "test-domain",
                    "line": 57
                },
                {
                    "type": "str",
                    "value": "REPLACE_UID",
                    "line": 72
                },
                {
                    "type": "str",
                    "value": "REPLACE_CASEID",
                    "line": 73
                },
                {
                    "type": "str",
                    "value": "http://openrosa.org/http/response",
                    "line": 127
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 142
                },
                {
                    "type": "str",
                    "value": "http://openrosa.org/http/response",
                    "line": 144
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 159
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 164
                },
                {
                    "type": "str",
                    "value": "rb",
                    "line": 50
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 81
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 82
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 83
                },
                {
                    "type": "str",
                    "value": "\n",
                    "line": 89
                },
                {
                    "type": "str",
                    "value": "\n",
                    "line": 90
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 107
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 113
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 113
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 117
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 123
                },
                {
                    "type": "str",
                    "value": "xmlns",
                    "line": 156
                },
                {
                    "type": "str",
                    "value": "case_id",
                    "line": 38
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 67
                },
                {
                    "type": "str",
                    "value": "Parsed xml files are different lengths\n",
                    "line": 94
                },
                {
                    "type": "str",
                    "value": "{{{0}}}case",
                    "line": 132
                },
                {
                    "type": "str",
                    "value": "\n%s\n%s",
                    "line": 162
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 193
                },
                {
                    "type": "str",
                    "value": "{{{0}}}create/{{{0}}}case_name",
                    "line": 43
                },
                {
                    "type": "str",
                    "value": "Expected: \n%s\nActual:\n%s",
                    "line": 95
                },
                {
                    "type": "str",
                    "value": "Failure in xml comparison\nExpected:\n%s\nActual:\n%s",
                    "line": 102
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 175
                },
                {
                    "type": "str",
                    "value": "Block for case_id '%s' doesn't appear in ota restore for user '%s':%s",
                    "line": 187
                },
                {
                    "type": "str",
                    "value": "{{{0}}}case_id",
                    "line": 36
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 176
                },
                {
                    "type": "str",
                    "value": "User '%s' gets case '%s' but shouldn't:%s",
                    "line": 183
                },
                {
                    "type": "str",
                    "value": "Block for case_id '%s' appears twice in ota restore for user '%s':%s",
                    "line": 178
                }
            ],
            "calls": [
                {
                    "func": "utcnow_sans_milliseconds",
                    "args": [],
                    "keywords": [],
                    "line": 47
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "os.path.dirname(__file__)",
                        "'data'",
                        "filename"
                    ],
                    "keywords": [],
                    "line": 49
                },
                {
                    "func": "_replace_ids_in_xform_xml",
                    "args": [
                        "xml_data"
                    ],
                    "keywords": [
                        {
                            "keyword": "case_id_override",
                            "value": "case_id_override"
                        }
                    ],
                    "line": 52
                },
                {
                    "func": "submit_form_locally",
                    "args": [
                        "updated_xml"
                    ],
                    "keywords": [
                        {
                            "keyword": "domain",
                            "value": "domain"
                        }
                    ],
                    "line": 58
                },
                {
                    "func": "test_class.assertLessEqual",
                    "args": [
                        "starttime",
                        "case.server_modified_on"
                    ],
                    "keywords": [],
                    "line": 59
                },
                {
                    "func": "test_class.assertGreaterEqual",
                    "args": [
                        "datetime.utcnow()",
                        "case.server_modified_on"
                    ],
                    "keywords": [],
                    "line": 60
                },
                {
                    "func": "test_class.assertEqual",
                    "args": [
                        "case_id",
                        "case.case_id"
                    ],
                    "keywords": [],
                    "line": 61
                },
                {
                    "func": "xml_data.replace",
                    "args": [
                        "'REPLACE_UID'",
                        "uid"
                    ],
                    "keywords": [],
                    "line": 72
                },
                {
                    "func": "xml_data.replace",
                    "args": [
                        "'REPLACE_CASEID'",
                        "case_id"
                    ],
                    "keywords": [],
                    "line": 73
                },
                {
                    "func": "etree.XMLParser",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "remove_blank_text",
                            "value": "True"
                        }
                    ],
                    "line": 81
                },
                {
                    "func": "etree.tostring",
                    "args": [
                        "etree.XML(expected, parser)"
                    ],
                    "keywords": [
                        {
                            "keyword": "pretty_print",
                            "value": "True"
                        }
                    ],
                    "line": 82
                },
                {
                    "func": "etree.tostring",
                    "args": [
                        "etree.XML(actual, parser)"
                    ],
                    "keywords": [
                        {
                            "keyword": "pretty_print",
                            "value": "True"
                        }
                    ],
                    "line": 83
                },
                {
                    "func": "assert_user_has_cases",
                    "args": [
                        "testcase",
                        "user",
                        "[case_id]"
                    ],
                    "keywords": [
                        {
                            "keyword": "return_single",
                            "value": "True"
                        }
                    ],
                    "line": 107
                },
                {
                    "func": "check_user_has_case",
                    "args": [
                        "testcase",
                        "user",
                        "case_blocks"
                    ],
                    "keywords": [
                        {
                            "keyword": "should_have",
                            "value": "True"
                        },
                        {
                            "keyword": "line_by_line",
                            "value": "False"
                        }
                    ],
                    "line": 112
                },
                {
                    "func": "assert_user_doesnt_have_cases",
                    "args": [
                        "testcase",
                        "user",
                        "[case_id]"
                    ],
                    "keywords": [
                        {
                            "keyword": "return_single",
                            "value": "True"
                        }
                    ],
                    "line": 117
                },
                {
                    "func": "check_user_has_case",
                    "args": [
                        "testcase",
                        "user",
                        "case_blocks"
                    ],
                    "keywords": [
                        {
                            "keyword": "should_have",
                            "value": "False"
                        }
                    ],
                    "line": 122
                },
                {
                    "func": "NS_VERSION_MAP.get",
                    "args": [
                        "version",
                        "'http://openrosa.org/http/response'"
                    ],
                    "keywords": [],
                    "line": 127
                },
                {
                    "func": "ElementTree.fromstring",
                    "args": [
                        "payload_string"
                    ],
                    "keywords": [],
                    "line": 131
                },
                {
                    "func": "parsed_payload.findall",
                    "args": [
                        "'{{{0}}}case'.format(get_case_xmlns(version))"
                    ],
                    "keywords": [],
                    "line": 132
                },
                {
                    "func": "NS_VERSION_MAP.get",
                    "args": [
                        "version",
                        "'http://openrosa.org/http/response'"
                    ],
                    "keywords": [],
                    "line": 144
                },
                {
                    "func": "RestoreConfig",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "project",
                            "value": "Domain(name=user.domain or TEST_DOMAIN_NAME)"
                        },
                        {
                            "keyword": "user",
                            "value": "user"
                        },
                        {
                            "keyword": "params",
                            "value": "RestoreParams(restore_id, version=version)"
                        }
                    ],
                    "line": 148
                },
                {
                    "func": "restore_config.get_payload().as_string",
                    "args": [],
                    "keywords": [],
                    "line": 152
                },
                {
                    "func": "extract_caseblocks_from_xml",
                    "args": [
                        "payload_string",
                        "version"
                    ],
                    "keywords": [],
                    "line": 153
                },
                {
                    "func": "FormProcessorTestUtils.delete_all_cases",
                    "args": [],
                    "keywords": [],
                    "line": 198
                },
                {
                    "func": "FormProcessorTestUtils.delete_all_xforms",
                    "args": [],
                    "keywords": [],
                    "line": 203
                },
                {
                    "func": "FormProcessorTestUtils.delete_all_sync_logs",
                    "args": [],
                    "keywords": [],
                    "line": 208
                },
                {
                    "func": "ElementTree.tostring",
                    "args": [
                        "self.xml_element"
                    ],
                    "keywords": [],
                    "line": 32
                },
                {
                    "func": "self.xml_element.findtext",
                    "args": [
                        "'{{{0}}}create/{{{0}}}case_name'.format(get_case_xmlns(self.version))"
                    ],
                    "keywords": [],
                    "line": 43
                },
                {
                    "func": "os.path.dirname",
                    "args": [
                        "__file__"
                    ],
                    "keywords": [],
                    "line": 49
                },
                {
                    "func": "open",
                    "args": [
                        "file_path",
                        "'rb'"
                    ],
                    "keywords": [],
                    "line": 50
                },
                {
                    "func": "f.read",
                    "args": [],
                    "keywords": [],
                    "line": 51
                },
                {
                    "func": "datetime.utcnow",
                    "args": [],
                    "keywords": [],
                    "line": 60
                },
                {
                    "func": "etree.XML",
                    "args": [
                        "expected",
                        "parser"
                    ],
                    "keywords": [],
                    "line": 82
                },
                {
                    "func": "etree.XML",
                    "args": [
                        "actual",
                        "parser"
                    ],
                    "keywords": [],
                    "line": 83
                },
                {
                    "func": "parsed_expected.split",
                    "args": [
                        "'\\n'"
                    ],
                    "keywords": [],
                    "line": 89
                },
                {
                    "func": "parsed_actual.split",
                    "args": [
                        "'\\n'"
                    ],
                    "keywords": [],
                    "line": 90
                },
                {
                    "func": "test_case.assertEqual",
                    "args": [
                        "len(expected_lines)",
                        "len(actual_lines)",
                        "'Parsed xml files are different lengths\\n' + 'Expected: \\n%s\\nActual:\\n%s' % (parsed_expected, parsed_actual)"
                    ],
                    "keywords": [],
                    "line": 91
                },
                {
                    "func": "range",
                    "args": [
                        "len(expected_lines)"
                    ],
                    "keywords": [],
                    "line": 97
                },
                {
                    "func": "CaseBlock(case_id=case_id).as_xml",
                    "args": [],
                    "keywords": [],
                    "line": 111
                },
                {
                    "func": "CaseBlock(case_id=case_id).as_xml",
                    "args": [],
                    "keywords": [],
                    "line": 121
                },
                {
                    "func": "'{{{0}}}case'.format",
                    "args": [
                        "get_case_xmlns(version)"
                    ],
                    "keywords": [],
                    "line": 132
                },
                {
                    "func": "RestoreCaseBlock",
                    "args": [
                        "b",
                        "version"
                    ],
                    "keywords": [],
                    "line": 133
                },
                {
                    "func": "isinstance",
                    "args": [
                        "case_blocks",
                        "list"
                    ],
                    "keywords": [],
                    "line": 140
                },
                {
                    "func": "SyncLog.get(restore_id).invalidate_cached_payloads",
                    "args": [],
                    "keywords": [],
                    "line": 147
                },
                {
                    "func": "case_block.set",
                    "args": [
                        "'xmlns'",
                        "XMLNS"
                    ],
                    "keywords": [],
                    "line": 156
                },
                {
                    "func": "RestoreCaseBlock",
                    "args": [
                        "ElementTree.fromstring(ElementTree.tostring(case_block))"
                    ],
                    "keywords": [
                        {
                            "keyword": "version",
                            "value": "version"
                        }
                    ],
                    "line": 157
                },
                {
                    "func": "case_block.get_case_id",
                    "args": [],
                    "keywords": [],
                    "line": 158
                },
                {
                    "func": "check_block",
                    "args": [
                        "case_block"
                    ],
                    "keywords": [],
                    "line": 192
                },
                {
                    "func": "self.xml_element.findtext",
                    "args": [
                        "'{{{0}}}case_id'.format(get_case_xmlns(self.version))"
                    ],
                    "keywords": [],
                    "line": 36
                },
                {
                    "func": "self.xml_element.get",
                    "args": [
                        "'case_id'"
                    ],
                    "keywords": [],
                    "line": 38
                },
                {
                    "func": "'{{{0}}}create/{{{0}}}case_name'.format",
                    "args": [
                        "get_case_xmlns(self.version)"
                    ],
                    "keywords": [],
                    "line": 43
                },
                {
                    "func": "uuid.uuid4",
                    "args": [],
                    "keywords": [],
                    "line": 67
                },
                {
                    "func": "range",
                    "args": [
                        "2"
                    ],
                    "keywords": [],
                    "line": 67
                },
                {
                    "func": "len",
                    "args": [
                        "expected_lines"
                    ],
                    "keywords": [],
                    "line": 92
                },
                {
                    "func": "len",
                    "args": [
                        "actual_lines"
                    ],
                    "keywords": [],
                    "line": 93
                },
                {
                    "func": "len",
                    "args": [
                        "expected_lines"
                    ],
                    "keywords": [],
                    "line": 97
                },
                {
                    "func": "test_case.assertEqual",
                    "args": [
                        "expected_lines[i]",
                        "actual_lines[i]"
                    ],
                    "keywords": [],
                    "line": 98
                },
                {
                    "func": "logging.error",
                    "args": [
                        "'Failure in xml comparison\\nExpected:\\n%s\\nActual:\\n%s' % (parsed_expected, parsed_actual)"
                    ],
                    "keywords": [],
                    "line": 102
                },
                {
                    "func": "get_case_xmlns",
                    "args": [
                        "version"
                    ],
                    "keywords": [],
                    "line": 132
                },
                {
                    "func": "Domain",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "name",
                            "value": "user.domain or TEST_DOMAIN_NAME"
                        }
                    ],
                    "line": 149
                },
                {
                    "func": "RestoreParams",
                    "args": [
                        "restore_id"
                    ],
                    "keywords": [
                        {
                            "keyword": "version",
                            "value": "version"
                        }
                    ],
                    "line": 150
                },
                {
                    "func": "restore_config.get_payload",
                    "args": [],
                    "keywords": [],
                    "line": 152
                },
                {
                    "func": "ElementTree.fromstring",
                    "args": [
                        "ElementTree.tostring(case_block)"
                    ],
                    "keywords": [],
                    "line": 157
                },
                {
                    "func": "testcase.fail",
                    "args": [
                        "\"Block for case_id '%s' doesn't appear in ota restore for user '%s':%s\" % (case_id, user.username, extra_info())"
                    ],
                    "keywords": [],
                    "line": 187
                },
                {
                    "func": "'{{{0}}}case_id'.format",
                    "args": [
                        "get_case_xmlns(self.version)"
                    ],
                    "keywords": [],
                    "line": 36
                },
                {
                    "func": "get_case_xmlns",
                    "args": [
                        "self.version"
                    ],
                    "keywords": [],
                    "line": 43
                },
                {
                    "func": "CaseBlock",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "case_id",
                            "value": "case_id"
                        }
                    ],
                    "line": 111
                },
                {
                    "func": "CaseBlock",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "case_id",
                            "value": "case_id"
                        }
                    ],
                    "line": 121
                },
                {
                    "func": "SyncLog.get",
                    "args": [
                        "restore_id"
                    ],
                    "keywords": [],
                    "line": 147
                },
                {
                    "func": "ElementTree.tostring",
                    "args": [
                        "case_block"
                    ],
                    "keywords": [],
                    "line": 157
                },
                {
                    "func": "block.get_case_id",
                    "args": [],
                    "keywords": [],
                    "line": 166
                },
                {
                    "func": "get_case_xmlns",
                    "args": [
                        "self.version"
                    ],
                    "keywords": [],
                    "line": 36
                },
                {
                    "func": "case_block.to_string",
                    "args": [],
                    "keywords": [],
                    "line": 162
                },
                {
                    "func": "map",
                    "args": [
                        "lambda b: b.to_string()",
                        "blocks"
                    ],
                    "keywords": [],
                    "line": 162
                },
                {
                    "func": "testcase.fail",
                    "args": [
                        "\"User '%s' gets case '%s' but shouldn't:%s\" % (user.username, case_id, extra_info())"
                    ],
                    "keywords": [],
                    "line": 182
                },
                {
                    "func": "check_xml_line_by_line",
                    "args": [
                        "testcase",
                        "case_block.to_string()",
                        "block.to_string()"
                    ],
                    "keywords": [],
                    "line": 169
                },
                {
                    "func": "testcase.fail",
                    "args": [
                        "\"Block for case_id '%s' appears twice in ota restore for user '%s':%s\" % (case_id, user.username, extra_info())"
                    ],
                    "keywords": [],
                    "line": 177
                },
                {
                    "func": "extra_info",
                    "args": [],
                    "keywords": [],
                    "line": 188
                },
                {
                    "func": "b.to_string",
                    "args": [],
                    "keywords": [],
                    "line": 162
                },
                {
                    "func": "case_block.to_string",
                    "args": [],
                    "keywords": [],
                    "line": 171
                },
                {
                    "func": "block.to_string",
                    "args": [],
                    "keywords": [],
                    "line": 172
                },
                {
                    "func": "extra_info",
                    "args": [],
                    "keywords": [],
                    "line": 184
                },
                {
                    "func": "extra_info",
                    "args": [],
                    "keywords": [],
                    "line": 179
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\Fantomas42\\django-blog-zinnia\\zinnia\\templatetags\\zinnia.py": {
        "vulnerabilities": [
            {
                "line": 363,
                "test_id": "B324",
                "test_name": "hashlib",
                "severity": "HIGH",
                "confidence": "HIGH",
                "context": "362         GRAVATAR_PROTOCOLS[protocol],\n363         md5(email.strip().lower().encode('utf-8')).hexdigest())\n364     options = {'s': size, 'r': rating}\n"
            },
            {
                "line": 411,
                "test_id": "B703",
                "test_name": "django_mark_safe",
                "severity": "MEDIUM",
                "confidence": "HIGH",
                "context": "410 \n411     return mark_safe(value)\n412 \n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "re",
                            "asname": null
                        }
                    ],
                    "line": 2
                },
                {
                    "module": "hashlib",
                    "names": [
                        {
                            "name": "md5",
                            "asname": null
                        }
                    ],
                    "line": 3
                },
                {
                    "module": "datetime",
                    "names": [
                        {
                            "name": "date",
                            "asname": null
                        }
                    ],
                    "line": 4
                },
                {
                    "module": "django.db.models",
                    "names": [
                        {
                            "name": "Q",
                            "asname": null
                        }
                    ],
                    "line": 10
                },
                {
                    "module": "django.db.models",
                    "names": [
                        {
                            "name": "Count",
                            "asname": null
                        }
                    ],
                    "line": 11
                },
                {
                    "module": "django.conf",
                    "names": [
                        {
                            "name": "settings",
                            "asname": null
                        }
                    ],
                    "line": 12
                },
                {
                    "module": "django.utils",
                    "names": [
                        {
                            "name": "timezone",
                            "asname": null
                        }
                    ],
                    "line": 13
                },
                {
                    "module": "django.template",
                    "names": [
                        {
                            "name": "Library",
                            "asname": null
                        }
                    ],
                    "line": 14
                },
                {
                    "module": "django.utils.encoding",
                    "names": [
                        {
                            "name": "smart_text",
                            "asname": null
                        }
                    ],
                    "line": 15
                },
                {
                    "module": "django.utils.safestring",
                    "names": [
                        {
                            "name": "mark_safe",
                            "asname": null
                        }
                    ],
                    "line": 16
                },
                {
                    "module": "django.utils.translation",
                    "names": [
                        {
                            "name": "ugettext",
                            "asname": "_"
                        }
                    ],
                    "line": 17
                },
                {
                    "module": "django.utils.html",
                    "names": [
                        {
                            "name": "conditional_escape",
                            "asname": null
                        }
                    ],
                    "line": 18
                },
                {
                    "module": "django.template.loader",
                    "names": [
                        {
                            "name": "select_template",
                            "asname": null
                        }
                    ],
                    "line": 19
                },
                {
                    "module": "django.template.defaultfilters",
                    "names": [
                        {
                            "name": "stringfilter",
                            "asname": null
                        }
                    ],
                    "line": 20
                },
                {
                    "module": "django.contrib.auth",
                    "names": [
                        {
                            "name": "get_user_model",
                            "asname": null
                        }
                    ],
                    "line": 21
                },
                {
                    "module": "django.contrib.contenttypes.models",
                    "names": [
                        {
                            "name": "ContentType",
                            "asname": null
                        }
                    ],
                    "line": 22
                },
                {
                    "module": "django_comments.models",
                    "names": [
                        {
                            "name": "CommentFlag",
                            "asname": null
                        }
                    ],
                    "line": 24
                },
                {
                    "module": "django_comments",
                    "names": [
                        {
                            "name": "get_model",
                            "asname": "get_comment_model"
                        }
                    ],
                    "line": 25
                },
                {
                    "module": "tagging.models",
                    "names": [
                        {
                            "name": "Tag",
                            "asname": null
                        }
                    ],
                    "line": 27
                },
                {
                    "module": "tagging.utils",
                    "names": [
                        {
                            "name": "calculate_cloud",
                            "asname": null
                        }
                    ],
                    "line": 28
                },
                {
                    "module": "models.entry",
                    "names": [
                        {
                            "name": "Entry",
                            "asname": null
                        }
                    ],
                    "line": 31
                },
                {
                    "module": "models.author",
                    "names": [
                        {
                            "name": "Author",
                            "asname": null
                        }
                    ],
                    "line": 32
                },
                {
                    "module": "models.category",
                    "names": [
                        {
                            "name": "Category",
                            "asname": null
                        }
                    ],
                    "line": 33
                },
                {
                    "module": "managers",
                    "names": [
                        {
                            "name": "DRAFT",
                            "asname": null
                        }
                    ],
                    "line": 34
                },
                {
                    "module": "managers",
                    "names": [
                        {
                            "name": "tags_published",
                            "asname": null
                        }
                    ],
                    "line": 35
                },
                {
                    "module": "flags",
                    "names": [
                        {
                            "name": "PINGBACK",
                            "asname": null
                        },
                        {
                            "name": "TRACKBACK",
                            "asname": null
                        }
                    ],
                    "line": 36
                },
                {
                    "module": "settings",
                    "names": [
                        {
                            "name": "PROTOCOL",
                            "asname": null
                        }
                    ],
                    "line": 37
                },
                {
                    "module": "settings",
                    "names": [
                        {
                            "name": "ENTRY_LOOP_TEMPLATES",
                            "asname": null
                        }
                    ],
                    "line": 38
                },
                {
                    "module": "comparison",
                    "names": [
                        {
                            "name": "EntryPublishedVectorBuilder",
                            "asname": null
                        }
                    ],
                    "line": 39
                },
                {
                    "module": "calendar",
                    "names": [
                        {
                            "name": "Calendar",
                            "asname": null
                        }
                    ],
                    "line": 40
                },
                {
                    "module": "breadcrumbs",
                    "names": [
                        {
                            "name": "retrieve_breadcrumbs",
                            "asname": null
                        }
                    ],
                    "line": 41
                },
                {
                    "module": "context",
                    "names": [
                        {
                            "name": "get_context_first_object",
                            "asname": null
                        }
                    ],
                    "line": 42
                },
                {
                    "module": "context",
                    "names": [
                        {
                            "name": "get_context_first_matching_object",
                            "asname": null
                        }
                    ],
                    "line": 43
                },
                {
                    "module": "context",
                    "names": [
                        {
                            "name": "get_context_loop_positions",
                            "asname": null
                        }
                    ],
                    "line": 44
                },
                {
                    "module": "templates",
                    "names": [
                        {
                            "name": "loop_template_list",
                            "asname": null
                        }
                    ],
                    "line": 45
                },
                {
                    "module": "urllib.parse",
                    "names": [
                        {
                            "name": "urlencode",
                            "asname": null
                        }
                    ],
                    "line": 6
                },
                {
                    "module": "urllib",
                    "names": [
                        {
                            "name": "urlencode",
                            "asname": null
                        }
                    ],
                    "line": 8
                }
            ],
            "variables": [
                {
                    "name": "WIDONT_REGEXP",
                    "line": 48
                },
                {
                    "name": "DOUBLE_SPACE_PUNCTUATION_WIDONT_REGEXP",
                    "line": 50
                },
                {
                    "name": "END_PUNCTUATION_WIDONT_REGEXP",
                    "line": 52
                },
                {
                    "name": "register",
                    "line": 55
                },
                {
                    "name": "entry",
                    "line": 145
                },
                {
                    "name": "vectors",
                    "line": 149
                },
                {
                    "name": "entries",
                    "line": 150
                },
                {
                    "name": "dates",
                    "line": 204
                },
                {
                    "name": "index",
                    "line": 211
                },
                {
                    "name": "previous_month",
                    "line": 213
                },
                {
                    "name": "next_month",
                    "line": 214
                },
                {
                    "name": "calendar",
                    "line": 215
                },
                {
                    "name": "entry_published_pks",
                    "line": 233
                },
                {
                    "name": "content_type",
                    "line": 235
                },
                {
                    "name": "comments",
                    "line": 237
                },
                {
                    "name": "comments",
                    "line": 242
                },
                {
                    "name": "entry_published_pks",
                    "line": 254
                },
                {
                    "name": "content_type",
                    "line": 256
                },
                {
                    "name": "linkbacks",
                    "line": 258
                },
                {
                    "name": "linkbacks",
                    "line": 264
                },
                {
                    "name": "GET_string",
                    "line": 278
                },
                {
                    "name": "page_range",
                    "line": 283
                },
                {
                    "name": "begin",
                    "line": 284
                },
                {
                    "name": "end",
                    "line": 285
                },
                {
                    "name": "middle",
                    "line": 286
                },
                {
                    "name": "path",
                    "line": 323
                },
                {
                    "name": "context_object",
                    "line": 324
                },
                {
                    "name": "context_page",
                    "line": 326
                },
                {
                    "name": "breadcrumbs",
                    "line": 327
                },
                {
                    "name": "context_positions",
                    "line": 344
                },
                {
                    "name": "templates",
                    "line": 346
                },
                {
                    "name": "GRAVATAR_PROTOCOLS",
                    "line": 359
                },
                {
                    "name": "url",
                    "line": 361
                },
                {
                    "name": "options",
                    "line": 364
                },
                {
                    "name": "url",
                    "line": 368
                },
                {
                    "name": "tags",
                    "line": 387
                },
                {
                    "name": "esc",
                    "line": 402
                },
                {
                    "name": "value",
                    "line": 407
                },
                {
                    "name": "value",
                    "line": 408
                },
                {
                    "name": "value",
                    "line": 409
                },
                {
                    "name": "week_number",
                    "line": 421
                },
                {
                    "name": "comment",
                    "line": 432
                },
                {
                    "name": "user",
                    "line": 443
                },
                {
                    "name": "content_type",
                    "line": 454
                },
                {
                    "name": "discussions",
                    "line": 455
                },
                {
                    "name": "entries",
                    "line": 458
                },
                {
                    "name": "categories",
                    "line": 459
                },
                {
                    "name": "tags",
                    "line": 460
                },
                {
                    "name": "authors",
                    "line": 461
                },
                {
                    "name": "replies",
                    "line": 462
                },
                {
                    "name": "pingbacks",
                    "line": 464
                },
                {
                    "name": "trackbacks",
                    "line": 466
                },
                {
                    "name": "rejects",
                    "line": 468
                },
                {
                    "name": "entries_count",
                    "line": 470
                },
                {
                    "name": "replies_count",
                    "line": 471
                },
                {
                    "name": "pingbacks_count",
                    "line": 472
                },
                {
                    "name": "trackbacks_count",
                    "line": 473
                },
                {
                    "name": "day_week_month",
                    "line": 184
                },
                {
                    "name": "publication_date",
                    "line": 187
                },
                {
                    "name": "current_month",
                    "line": 200
                },
                {
                    "name": "current_month",
                    "line": 202
                },
                {
                    "name": "begin",
                    "line": 290
                },
                {
                    "name": "middle",
                    "line": 291
                },
                {
                    "name": "begin",
                    "line": 303
                },
                {
                    "name": "week_number",
                    "line": 423
                },
                {
                    "name": "first_entry",
                    "line": 476
                },
                {
                    "name": "last_entry",
                    "line": 477
                },
                {
                    "name": "months_count",
                    "line": 478
                },
                {
                    "name": "entries_per_month",
                    "line": 480
                },
                {
                    "name": "comments_per_entry",
                    "line": 482
                },
                {
                    "name": "linkbacks_per_entry",
                    "line": 483
                },
                {
                    "name": "total_words_entry",
                    "line": 486
                },
                {
                    "name": "words_per_entry",
                    "line": 489
                },
                {
                    "name": "words_per_comment",
                    "line": 491
                },
                {
                    "name": "words_per_entry",
                    "line": 498
                },
                {
                    "name": "words_per_comment",
                    "line": 498
                },
                {
                    "name": "entries_per_month",
                    "line": 498
                },
                {
                    "name": "comments_per_entry",
                    "line": 498
                },
                {
                    "name": "linkbacks_per_entry",
                    "line": 498
                },
                {
                    "name": "current_month",
                    "line": 190
                },
                {
                    "name": "middle",
                    "line": 294
                },
                {
                    "name": "total_words_comment",
                    "line": 493
                },
                {
                    "name": "words_per_comment",
                    "line": 496
                },
                {
                    "name": "current_month",
                    "line": 194
                },
                {
                    "name": "today",
                    "line": 196
                },
                {
                    "name": "current_month",
                    "line": 199
                },
                {
                    "name": "end",
                    "line": 296
                },
                {
                    "name": "middle",
                    "line": 297
                },
                {
                    "name": "publication_date",
                    "line": 193
                },
                {
                    "name": "today",
                    "line": 198
                },
                {
                    "name": "end",
                    "line": 299
                },
                {
                    "name": "middle",
                    "line": 300
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "Template tags and filters for Zinnia",
                    "line": 1
                },
                {
                    "type": "str",
                    "value": "\\s+(\\S+\\s*)$",
                    "line": 49
                },
                {
                    "type": "str",
                    "value": "\\s+([-+*/%=;:!?]+&nbsp;\\S+\\s*)$",
                    "line": 51
                },
                {
                    "type": "str",
                    "value": "\\s+([?!]+\\s*)$",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/categories.html",
                    "line": 59
                },
                {
                    "type": "str",
                    "value": "\n    Return the published categories.\n    ",
                    "line": 60
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 58
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/categories_tree.html",
                    "line": 70
                },
                {
                    "type": "str",
                    "value": "\n    Return the categories as a tree.\n    ",
                    "line": 71
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 69
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/authors.html",
                    "line": 80
                },
                {
                    "type": "str",
                    "value": "\n    Return the published authors.\n    ",
                    "line": 81
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 79
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 91
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_recent.html",
                    "line": 91
                },
                {
                    "type": "str",
                    "value": "\n    Return the most recent entries.\n    ",
                    "line": 92
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 90
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 100
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_featured.html",
                    "line": 101
                },
                {
                    "type": "str",
                    "value": "\n    Return the featured entries.\n    ",
                    "line": 102
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 99
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 110
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_draft.html",
                    "line": 111
                },
                {
                    "type": "str",
                    "value": "\n    Return the last draft entries.\n    ",
                    "line": 112
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 109
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 120
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_random.html",
                    "line": 120
                },
                {
                    "type": "str",
                    "value": "\n    Return random entries.\n    ",
                    "line": 121
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 119
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 129
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_popular.html",
                    "line": 129
                },
                {
                    "type": "str",
                    "value": "\n    Return popular entries.\n    ",
                    "line": 130
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 128
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 140
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_similar.html",
                    "line": 141
                },
                {
                    "type": "str",
                    "value": "\n    Return similar entries.\n    ",
                    "line": 142
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 139
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_archives.html",
                    "line": 157
                },
                {
                    "type": "str",
                    "value": "\n    Return archives entries.\n    ",
                    "line": 158
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 156
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_archives_tree.html",
                    "line": 168
                },
                {
                    "type": "str",
                    "value": "\n    Return archives entries as a tree.\n    ",
                    "line": 169
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 166
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 178
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 178
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/entries_calendar.html",
                    "line": 179
                },
                {
                    "type": "str",
                    "value": "\n    Return an HTML calendar of entries.\n    ",
                    "line": 180
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 177
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 228
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/comments_recent.html",
                    "line": 228
                },
                {
                    "type": "str",
                    "value": "\n    Return the most recent comments.\n    ",
                    "line": 229
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 227
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 249
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/linkbacks_recent.html",
                    "line": 250
                },
                {
                    "type": "str",
                    "value": "\n    Return the most recent linkbacks.\n    ",
                    "line": 251
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 248
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 271
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 271
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 272
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 272
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/pagination.html",
                    "line": 273
                },
                {
                    "type": "str",
                    "value": "\n    Return a Digg-like pagination,\n    by splitting long list of page into 3 blocks of pages.\n    ",
                    "line": 274
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 278
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 270
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/breadcrumbs.html",
                    "line": 319
                },
                {
                    "type": "str",
                    "value": "\n    Return a breadcrumb for the application.\n    ",
                    "line": 320
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 317
                },
                {
                    "type": "str",
                    "value": "\n    Return a selected template from his position within a loop\n    and the filtering context.\n    ",
                    "line": 336
                },
                {
                    "type": "int",
                    "value": 80,
                    "line": 354
                },
                {
                    "type": "str",
                    "value": "g",
                    "line": 354
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 354
                },
                {
                    "type": "str",
                    "value": "\n    Return url for a Gravatar.\n    ",
                    "line": 356
                },
                {
                    "type": "str",
                    "value": "\n    Return the published tags.\n    ",
                    "line": 374
                },
                {
                    "type": "int",
                    "value": 6,
                    "line": 382
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 382
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/tag_cloud.html",
                    "line": 383
                },
                {
                    "type": "str",
                    "value": "\n    Return a cloud of published tags.\n    ",
                    "line": 384
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 381
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 397
                },
                {
                    "type": "str",
                    "value": "\n    Add an HTML non-breaking space between the final\n    two words of the string to avoid \"widowed\" words.\n    ",
                    "line": 398
                },
                {
                    "type": "str",
                    "value": "\n    Return the Python week number of a date.\n    The django \\|date:\"W\" returns incompatible value\n    with the view implementation.\n    ",
                    "line": 416
                },
                {
                    "type": "str",
                    "value": "\n    Return the admin URLs for the comment app used.\n    ",
                    "line": 429
                },
                {
                    "type": "str",
                    "value": "\n    Return the admin URLs for the user app used.\n    ",
                    "line": 440
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/statistics.html",
                    "line": 450
                },
                {
                    "type": "str",
                    "value": "\n    Return statistics on the content of Zinnia.\n    ",
                    "line": 451
                },
                {
                    "type": "str",
                    "value": "zinnia/tags/dummy.html",
                    "line": 449
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 63
                },
                {
                    "type": "str",
                    "value": "categories",
                    "line": 64
                },
                {
                    "type": "str",
                    "value": "context_category",
                    "line": 66
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 58
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 74
                },
                {
                    "type": "str",
                    "value": "categories",
                    "line": 75
                },
                {
                    "type": "str",
                    "value": "context_category",
                    "line": 76
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 69
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 84
                },
                {
                    "type": "str",
                    "value": "authors",
                    "line": 85
                },
                {
                    "type": "str",
                    "value": "context_author",
                    "line": 87
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 79
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 95
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 96
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 105
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 106
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 115
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 116
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 124
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 125
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 133
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 134
                },
                {
                    "type": "str",
                    "value": "entry",
                    "line": 145
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 152
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 153
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 139
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 161
                },
                {
                    "type": "str",
                    "value": "archives",
                    "line": 162
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 172
                },
                {
                    "type": "str",
                    "value": "archives",
                    "line": 173
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 213
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 214
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 217
                },
                {
                    "type": "str",
                    "value": "next_month",
                    "line": 218
                },
                {
                    "type": "str",
                    "value": "previous_month",
                    "line": 219
                },
                {
                    "type": "str",
                    "value": "calendar",
                    "line": 220
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 177
                },
                {
                    "type": "str",
                    "value": "content_object",
                    "line": 242
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 244
                },
                {
                    "type": "str",
                    "value": "comments",
                    "line": 245
                },
                {
                    "type": "str",
                    "value": "content_object",
                    "line": 264
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 266
                },
                {
                    "type": "str",
                    "value": "linkbacks",
                    "line": 267
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 309
                },
                {
                    "type": "str",
                    "value": "page",
                    "line": 310
                },
                {
                    "type": "str",
                    "value": "begin",
                    "line": 311
                },
                {
                    "type": "str",
                    "value": "middle",
                    "line": 312
                },
                {
                    "type": "str",
                    "value": "end",
                    "line": 313
                },
                {
                    "type": "str",
                    "value": "GET_string",
                    "line": 314
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 270
                },
                {
                    "type": "str",
                    "value": "Blog",
                    "line": 318
                },
                {
                    "type": "str",
                    "value": "page_obj",
                    "line": 326
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 330
                },
                {
                    "type": "str",
                    "value": "breadcrumbs",
                    "line": 331
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 317
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 334
                },
                {
                    "type": "str",
                    "value": "http",
                    "line": 359
                },
                {
                    "type": "str",
                    "value": "https",
                    "line": 360
                },
                {
                    "type": "str",
                    "value": "http://www",
                    "line": 359
                },
                {
                    "type": "str",
                    "value": "https://secure",
                    "line": 360
                },
                {
                    "type": "str",
                    "value": "%s.gravatar.com/avatar/%s",
                    "line": 361
                },
                {
                    "type": "str",
                    "value": "s",
                    "line": 364
                },
                {
                    "type": "str",
                    "value": "r",
                    "line": 364
                },
                {
                    "type": "str",
                    "value": "%s?%s",
                    "line": 368
                },
                {
                    "type": "str",
                    "value": "&",
                    "line": 369
                },
                {
                    "type": "str",
                    "value": "&amp;",
                    "line": 369
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 390
                },
                {
                    "type": "str",
                    "value": "tags",
                    "line": 391
                },
                {
                    "type": "str",
                    "value": "context_tag",
                    "line": 392
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 381
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 395
                },
                {
                    "type": "str",
                    "value": "%W",
                    "line": 421
                },
                {
                    "type": "int",
                    "value": 10,
                    "line": 422
                },
                {
                    "type": "str",
                    "value": "admin:%s_%s_%s",
                    "line": 433
                },
                {
                    "type": "str",
                    "value": "admin:%s_%s_%s",
                    "line": 444
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 486
                },
                {
                    "type": "float",
                    "value": 0.0,
                    "line": 491
                },
                {
                    "type": "float",
                    "value": 0.0,
                    "line": 499
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 501
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 502
                },
                {
                    "type": "str",
                    "value": "categories",
                    "line": 503
                },
                {
                    "type": "str",
                    "value": "tags",
                    "line": 504
                },
                {
                    "type": "str",
                    "value": "authors",
                    "line": 505
                },
                {
                    "type": "str",
                    "value": "comments",
                    "line": 506
                },
                {
                    "type": "str",
                    "value": "pingbacks",
                    "line": 507
                },
                {
                    "type": "str",
                    "value": "trackbacks",
                    "line": 508
                },
                {
                    "type": "str",
                    "value": "rejects",
                    "line": 509
                },
                {
                    "type": "str",
                    "value": "words_per_entry",
                    "line": 510
                },
                {
                    "type": "str",
                    "value": "words_per_comment",
                    "line": 511
                },
                {
                    "type": "str",
                    "value": "entries_per_month",
                    "line": 512
                },
                {
                    "type": "str",
                    "value": "comments_per_entry",
                    "line": 513
                },
                {
                    "type": "str",
                    "value": "linkbacks_per_entry",
                    "line": 514
                },
                {
                    "type": "str",
                    "value": "category",
                    "line": 66
                },
                {
                    "type": "str",
                    "value": "category",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "author",
                    "line": 87
                },
                {
                    "type": "str",
                    "value": "template",
                    "line": 147
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 147
                },
                {
                    "type": "str",
                    "value": "publication_date",
                    "line": 163
                },
                {
                    "type": "str",
                    "value": "month",
                    "line": 163
                },
                {
                    "type": "str",
                    "value": "publication_date",
                    "line": 174
                },
                {
                    "type": "str",
                    "value": "day",
                    "line": 174
                },
                {
                    "type": "str",
                    "value": "publication_date",
                    "line": 188
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 188
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 202
                },
                {
                    "type": "str",
                    "value": "id",
                    "line": 234
                },
                {
                    "type": "str",
                    "value": "-pk",
                    "line": 240
                },
                {
                    "type": "str",
                    "value": "id",
                    "line": 255
                },
                {
                    "type": "str",
                    "value": "-pk",
                    "line": 262
                },
                {
                    "type": "str",
                    "value": "page",
                    "line": 280
                },
                {
                    "type": "str",
                    "value": "request",
                    "line": 323
                },
                {
                    "type": "str",
                    "value": "object",
                    "line": 325
                },
                {
                    "type": "str",
                    "value": "category",
                    "line": 325
                },
                {
                    "type": "str",
                    "value": "tag",
                    "line": 325
                },
                {
                    "type": "str",
                    "value": "author",
                    "line": 325
                },
                {
                    "type": "str",
                    "value": "category",
                    "line": 342
                },
                {
                    "type": "str",
                    "value": "tag",
                    "line": 342
                },
                {
                    "type": "str",
                    "value": "author",
                    "line": 342
                },
                {
                    "type": "str",
                    "value": "pattern",
                    "line": 342
                },
                {
                    "type": "str",
                    "value": "year",
                    "line": 343
                },
                {
                    "type": "str",
                    "value": "month",
                    "line": 343
                },
                {
                    "type": "str",
                    "value": "week",
                    "line": 343
                },
                {
                    "type": "str",
                    "value": "day",
                    "line": 343
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 366
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 388
                },
                {
                    "type": "str",
                    "value": "tag",
                    "line": 392
                },
                {
                    "type": "str",
                    "value": "&nbsp;%s",
                    "line": 405
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 463
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 463
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 465
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 467
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 468
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 476
                },
                {
                    "type": "float",
                    "value": 31.0,
                    "line": 479
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 493
                },
                {
                    "type": "str",
                    "value": "?",
                    "line": 125
                },
                {
                    "type": "str",
                    "value": "-comment_count",
                    "line": 136
                },
                {
                    "type": "str",
                    "value": "-publication_date",
                    "line": 136
                },
                {
                    "type": "str",
                    "value": "DESC",
                    "line": 163
                },
                {
                    "type": "str",
                    "value": "ASC",
                    "line": 174
                },
                {
                    "type": "str",
                    "value": "day",
                    "line": 184
                },
                {
                    "type": "str",
                    "value": "week",
                    "line": 185
                },
                {
                    "type": "str",
                    "value": "month",
                    "line": 186
                },
                {
                    "type": "str",
                    "value": "object",
                    "line": 187
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 200
                },
                {
                    "type": "str",
                    "value": "publication_date",
                    "line": 206
                },
                {
                    "type": "str",
                    "value": "month",
                    "line": 206
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 213
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 234
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 255
                },
                {
                    "type": "str",
                    "value": "&%s=%s",
                    "line": 281
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 286
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 292
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 292
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 305
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 305
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 405
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 423
                },
                {
                    "type": "str",
                    "value": "publication_date",
                    "line": 476
                },
                {
                    "type": "float",
                    "value": 1.0,
                    "line": 480
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 65
                },
                {
                    "type": "str",
                    "value": "entries",
                    "line": 86
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 106
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 213
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 214
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 214
                },
                {
                    "type": "str",
                    "value": "request",
                    "line": 279
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 286
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 295
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 295
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 240
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 262
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 292
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 305
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 135
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 295
                },
                {
                    "type": "str",
                    "value": "utf-8",
                    "line": 363
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 238
                }
            ],
            "calls": [
                {
                    "func": "re.compile",
                    "args": [
                        "'\\\\s+(\\\\S+\\\\s*)$'"
                    ],
                    "keywords": [],
                    "line": 48
                },
                {
                    "func": "re.compile",
                    "args": [
                        "'\\\\s+([-+*/%=;:!?]+&nbsp;\\\\S+\\\\s*)$'"
                    ],
                    "keywords": [],
                    "line": 50
                },
                {
                    "func": "re.compile",
                    "args": [
                        "'\\\\s+([?!]+\\\\s*)$'"
                    ],
                    "keywords": [],
                    "line": 52
                },
                {
                    "func": "Library",
                    "args": [],
                    "keywords": [],
                    "line": 55
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 58
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 69
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 79
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 90
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 99
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 109
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 119
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 128
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 139
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 156
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 166
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 177
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 227
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 248
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 270
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 317
                },
                {
                    "func": "register.assignment_tag",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 334
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [
                        {
                            "keyword": "takes_context",
                            "value": "True"
                        }
                    ],
                    "line": 381
                },
                {
                    "func": "register.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "needs_autoescape",
                            "value": "True"
                        }
                    ],
                    "line": 395
                },
                {
                    "func": "register.inclusion_tag",
                    "args": [
                        "'zinnia/tags/dummy.html'"
                    ],
                    "keywords": [],
                    "line": 449
                },
                {
                    "func": "context.get",
                    "args": [
                        "'entry'"
                    ],
                    "keywords": [],
                    "line": 145
                },
                {
                    "func": "EntryPublishedVectorBuilder",
                    "args": [],
                    "keywords": [],
                    "line": 149
                },
                {
                    "func": "vectors.get_related",
                    "args": [
                        "entry",
                        "number"
                    ],
                    "keywords": [],
                    "line": 150
                },
                {
                    "func": "list",
                    "args": [
                        "map(lambda x: settings.USE_TZ and timezone.localtime(x).date() or x.date(), Entry.published.datetimes('publication_date', 'month'))"
                    ],
                    "keywords": [],
                    "line": 204
                },
                {
                    "func": "dates.index",
                    "args": [
                        "current_month"
                    ],
                    "keywords": [],
                    "line": 211
                },
                {
                    "func": "Calendar",
                    "args": [],
                    "keywords": [],
                    "line": 215
                },
                {
                    "func": "map",
                    "args": [
                        "smart_text",
                        "Entry.published.values_list('id', flat=True)"
                    ],
                    "keywords": [],
                    "line": 233
                },
                {
                    "func": "ContentType.objects.get_for_model",
                    "args": [
                        "Entry"
                    ],
                    "keywords": [],
                    "line": 235
                },
                {
                    "func": "comments.prefetch_related",
                    "args": [
                        "'content_object'"
                    ],
                    "keywords": [],
                    "line": 242
                },
                {
                    "func": "map",
                    "args": [
                        "smart_text",
                        "Entry.published.values_list('id', flat=True)"
                    ],
                    "keywords": [],
                    "line": 254
                },
                {
                    "func": "ContentType.objects.get_for_model",
                    "args": [
                        "Entry"
                    ],
                    "keywords": [],
                    "line": 256
                },
                {
                    "func": "linkbacks.prefetch_related",
                    "args": [
                        "'content_object'"
                    ],
                    "keywords": [],
                    "line": 264
                },
                {
                    "func": "context['request'].GET.items",
                    "args": [],
                    "keywords": [],
                    "line": 279
                },
                {
                    "func": "list",
                    "args": [
                        "page.paginator.page_range"
                    ],
                    "keywords": [],
                    "line": 283
                },
                {
                    "func": "_",
                    "args": [
                        "'Blog'"
                    ],
                    "keywords": [],
                    "line": 318
                },
                {
                    "func": "get_context_first_object",
                    "args": [
                        "context",
                        "['object', 'category', 'tag', 'author']"
                    ],
                    "keywords": [],
                    "line": 324
                },
                {
                    "func": "context.get",
                    "args": [
                        "'page_obj'"
                    ],
                    "keywords": [],
                    "line": 326
                },
                {
                    "func": "retrieve_breadcrumbs",
                    "args": [
                        "path",
                        "context_object",
                        "context_page",
                        "root_name"
                    ],
                    "keywords": [],
                    "line": 327
                },
                {
                    "func": "get_context_first_matching_object",
                    "args": [
                        "context",
                        "['category', 'tag', 'author', 'pattern', 'year', 'month', 'week', 'day']"
                    ],
                    "keywords": [],
                    "line": 340
                },
                {
                    "func": "get_context_loop_positions",
                    "args": [
                        "context"
                    ],
                    "keywords": [],
                    "line": 344
                },
                {
                    "func": "loop_template_list",
                    "args": [
                        "context_positions",
                        "context_object",
                        "matching",
                        "default_template",
                        "ENTRY_LOOP_TEMPLATES"
                    ],
                    "keywords": [],
                    "line": 346
                },
                {
                    "func": "select_template",
                    "args": [
                        "templates"
                    ],
                    "keywords": [],
                    "line": 350
                },
                {
                    "func": "url.replace",
                    "args": [
                        "'&'",
                        "'&amp;'"
                    ],
                    "keywords": [],
                    "line": 369
                },
                {
                    "func": "Tag.objects.usage_for_queryset",
                    "args": [
                        "Entry.published.all()"
                    ],
                    "keywords": [],
                    "line": 377
                },
                {
                    "func": "Tag.objects.usage_for_queryset",
                    "args": [
                        "Entry.published.all()"
                    ],
                    "keywords": [
                        {
                            "keyword": "counts",
                            "value": "True"
                        },
                        {
                            "keyword": "min_count",
                            "value": "min_count"
                        }
                    ],
                    "line": 387
                },
                {
                    "func": "END_PUNCTUATION_WIDONT_REGEXP.sub",
                    "args": [
                        "replace",
                        "esc(smart_text(value))"
                    ],
                    "keywords": [],
                    "line": 407
                },
                {
                    "func": "WIDONT_REGEXP.sub",
                    "args": [
                        "replace",
                        "value"
                    ],
                    "keywords": [],
                    "line": 408
                },
                {
                    "func": "DOUBLE_SPACE_PUNCTUATION_WIDONT_REGEXP.sub",
                    "args": [
                        "replace",
                        "value"
                    ],
                    "keywords": [],
                    "line": 409
                },
                {
                    "func": "mark_safe",
                    "args": [
                        "value"
                    ],
                    "keywords": [],
                    "line": 411
                },
                {
                    "func": "date.strftime",
                    "args": [
                        "'%W'"
                    ],
                    "keywords": [],
                    "line": 421
                },
                {
                    "func": "get_comment_model",
                    "args": [],
                    "keywords": [],
                    "line": 432
                },
                {
                    "func": "get_user_model",
                    "args": [],
                    "keywords": [],
                    "line": 443
                },
                {
                    "func": "ContentType.objects.get_for_model",
                    "args": [
                        "Entry"
                    ],
                    "keywords": [],
                    "line": 454
                },
                {
                    "func": "get_comment_model().objects.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "content_type",
                            "value": "content_type"
                        }
                    ],
                    "line": 455
                },
                {
                    "func": "tags_published",
                    "args": [],
                    "keywords": [],
                    "line": 460
                },
                {
                    "func": "discussions.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "flags",
                            "value": "None"
                        },
                        {
                            "keyword": "is_public",
                            "value": "True"
                        }
                    ],
                    "line": 462
                },
                {
                    "func": "discussions.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "flags__flag",
                            "value": "PINGBACK"
                        },
                        {
                            "keyword": "is_public",
                            "value": "True"
                        }
                    ],
                    "line": 464
                },
                {
                    "func": "discussions.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "flags__flag",
                            "value": "TRACKBACK"
                        },
                        {
                            "keyword": "is_public",
                            "value": "True"
                        }
                    ],
                    "line": 466
                },
                {
                    "func": "discussions.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "is_public",
                            "value": "False"
                        }
                    ],
                    "line": 468
                },
                {
                    "func": "entries.count",
                    "args": [],
                    "keywords": [],
                    "line": 470
                },
                {
                    "func": "replies.count",
                    "args": [],
                    "keywords": [],
                    "line": 471
                },
                {
                    "func": "pingbacks.count",
                    "args": [],
                    "keywords": [],
                    "line": 472
                },
                {
                    "func": "trackbacks.count",
                    "args": [],
                    "keywords": [],
                    "line": 473
                },
                {
                    "func": "Category.published.all().annotate",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "count_entries_published",
                            "value": "Count('entries')"
                        }
                    ],
                    "line": 64
                },
                {
                    "func": "context.get",
                    "args": [
                        "'category'"
                    ],
                    "keywords": [],
                    "line": 66
                },
                {
                    "func": "Category.objects.all",
                    "args": [],
                    "keywords": [],
                    "line": 75
                },
                {
                    "func": "context.get",
                    "args": [
                        "'category'"
                    ],
                    "keywords": [],
                    "line": 76
                },
                {
                    "func": "Author.published.all().annotate",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "count_entries_published",
                            "value": "Count('entries')"
                        }
                    ],
                    "line": 85
                },
                {
                    "func": "context.get",
                    "args": [
                        "'author'"
                    ],
                    "keywords": [],
                    "line": 87
                },
                {
                    "func": "Entry.published.datetimes",
                    "args": [
                        "'publication_date'",
                        "'month'"
                    ],
                    "keywords": [
                        {
                            "keyword": "order",
                            "value": "'DESC'"
                        }
                    ],
                    "line": 162
                },
                {
                    "func": "Entry.published.datetimes",
                    "args": [
                        "'publication_date'",
                        "'day'"
                    ],
                    "keywords": [
                        {
                            "keyword": "order",
                            "value": "'ASC'"
                        }
                    ],
                    "line": 173
                },
                {
                    "func": "getattr",
                    "args": [
                        "context.get('object')",
                        "'publication_date'",
                        "None"
                    ],
                    "keywords": [],
                    "line": 187
                },
                {
                    "func": "current_month.replace",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "day",
                            "value": "1"
                        }
                    ],
                    "line": 200
                },
                {
                    "func": "date",
                    "args": [
                        "year",
                        "month",
                        "1"
                    ],
                    "keywords": [],
                    "line": 202
                },
                {
                    "func": "map",
                    "args": [
                        "lambda x: settings.USE_TZ and timezone.localtime(x).date() or x.date()",
                        "Entry.published.datetimes('publication_date', 'month')"
                    ],
                    "keywords": [],
                    "line": 204
                },
                {
                    "func": "dates.append",
                    "args": [
                        "current_month"
                    ],
                    "keywords": [],
                    "line": 209
                },
                {
                    "func": "dates.sort",
                    "args": [],
                    "keywords": [],
                    "line": 210
                },
                {
                    "func": "calendar.formatmonth",
                    "args": [
                        "current_month.year",
                        "current_month.month"
                    ],
                    "keywords": [
                        {
                            "keyword": "previous_month",
                            "value": "previous_month"
                        },
                        {
                            "keyword": "next_month",
                            "value": "next_month"
                        }
                    ],
                    "line": 220
                },
                {
                    "func": "Entry.published.values_list",
                    "args": [
                        "'id'"
                    ],
                    "keywords": [
                        {
                            "keyword": "flat",
                            "value": "True"
                        }
                    ],
                    "line": 234
                },
                {
                    "func": "get_comment_model().objects.filter(Q(flags=None) | Q(flags__flag=CommentFlag.MODERATOR_APPROVAL), content_type=content_type, object_pk__in=entry_published_pks, is_public=True).order_by",
                    "args": [
                        "'-pk'"
                    ],
                    "keywords": [],
                    "line": 237
                },
                {
                    "func": "Entry.published.values_list",
                    "args": [
                        "'id'"
                    ],
                    "keywords": [
                        {
                            "keyword": "flat",
                            "value": "True"
                        }
                    ],
                    "line": 255
                },
                {
                    "func": "get_comment_model().objects.filter(content_type=content_type, object_pk__in=entry_published_pks, flags__flag__in=[PINGBACK, TRACKBACK], is_public=True).order_by",
                    "args": [
                        "'-pk'"
                    ],
                    "keywords": [],
                    "line": 258
                },
                {
                    "func": "set",
                    "args": [
                        "begin"
                    ],
                    "keywords": [],
                    "line": 289
                },
                {
                    "func": "set",
                    "args": [
                        "middle"
                    ],
                    "keywords": [],
                    "line": 289
                },
                {
                    "func": "sorted",
                    "args": [
                        "set(begin + middle)"
                    ],
                    "keywords": [],
                    "line": 290
                },
                {
                    "func": "set",
                    "args": [
                        "begin"
                    ],
                    "keywords": [],
                    "line": 302
                },
                {
                    "func": "set",
                    "args": [
                        "end"
                    ],
                    "keywords": [],
                    "line": 302
                },
                {
                    "func": "sorted",
                    "args": [
                        "set(begin + end)"
                    ],
                    "keywords": [],
                    "line": 303
                },
                {
                    "func": "Entry.published.all",
                    "args": [],
                    "keywords": [],
                    "line": 378
                },
                {
                    "func": "Entry.published.all",
                    "args": [],
                    "keywords": [],
                    "line": 388
                },
                {
                    "func": "calculate_cloud",
                    "args": [
                        "tags",
                        "steps"
                    ],
                    "keywords": [],
                    "line": 391
                },
                {
                    "func": "context.get",
                    "args": [
                        "'tag'"
                    ],
                    "keywords": [],
                    "line": 392
                },
                {
                    "func": "esc",
                    "args": [
                        "smart_text(value)"
                    ],
                    "keywords": [],
                    "line": 407
                },
                {
                    "func": "int",
                    "args": [
                        "week_number"
                    ],
                    "keywords": [],
                    "line": 422
                },
                {
                    "func": "entries.latest",
                    "args": [],
                    "keywords": [],
                    "line": 477
                },
                {
                    "func": "entries.all",
                    "args": [],
                    "keywords": [],
                    "line": 487
                },
                {
                    "func": "categories.count",
                    "args": [],
                    "keywords": [],
                    "line": 503
                },
                {
                    "func": "tags.count",
                    "args": [],
                    "keywords": [],
                    "line": 504
                },
                {
                    "func": "authors.count",
                    "args": [],
                    "keywords": [],
                    "line": 505
                },
                {
                    "func": "rejects.count",
                    "args": [],
                    "keywords": [],
                    "line": 509
                },
                {
                    "func": "Entry.published.all",
                    "args": [],
                    "keywords": [],
                    "line": 96
                },
                {
                    "func": "Entry.published.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "featured",
                            "value": "True"
                        }
                    ],
                    "line": 106
                },
                {
                    "func": "Entry.objects.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "status",
                            "value": "DRAFT"
                        }
                    ],
                    "line": 116
                },
                {
                    "func": "Entry.published.order_by",
                    "args": [
                        "'?'"
                    ],
                    "keywords": [],
                    "line": 125
                },
                {
                    "func": "Entry.published.filter(comment_count__gt=0).order_by",
                    "args": [
                        "'-comment_count'",
                        "'-publication_date'"
                    ],
                    "keywords": [],
                    "line": 134
                },
                {
                    "func": "context.get",
                    "args": [
                        "'day'"
                    ],
                    "keywords": [],
                    "line": 184
                },
                {
                    "func": "context.get",
                    "args": [
                        "'week'"
                    ],
                    "keywords": [],
                    "line": 185
                },
                {
                    "func": "context.get",
                    "args": [
                        "'month'"
                    ],
                    "keywords": [],
                    "line": 186
                },
                {
                    "func": "context.get",
                    "args": [
                        "'object'"
                    ],
                    "keywords": [],
                    "line": 187
                },
                {
                    "func": "Entry.published.datetimes",
                    "args": [
                        "'publication_date'",
                        "'month'"
                    ],
                    "keywords": [],
                    "line": 206
                },
                {
                    "func": "max",
                    "args": [
                        "page.number - before_pages - 1",
                        "0"
                    ],
                    "keywords": [],
                    "line": 286
                },
                {
                    "func": "set",
                    "args": [
                        "begin + middle"
                    ],
                    "keywords": [],
                    "line": 290
                },
                {
                    "func": "set",
                    "args": [
                        "begin + end"
                    ],
                    "keywords": [],
                    "line": 303
                },
                {
                    "func": "md5(email.strip().lower().encode('utf-8')).hexdigest",
                    "args": [],
                    "keywords": [],
                    "line": 363
                },
                {
                    "func": "urlencode",
                    "args": [
                        "options"
                    ],
                    "keywords": [],
                    "line": 368
                },
                {
                    "func": "matchobj.group",
                    "args": [
                        "1"
                    ],
                    "keywords": [],
                    "line": 405
                },
                {
                    "func": "smart_text",
                    "args": [
                        "value"
                    ],
                    "keywords": [],
                    "line": 407
                },
                {
                    "func": "entries.order_by",
                    "args": [
                        "'publication_date'"
                    ],
                    "keywords": [],
                    "line": 476
                },
                {
                    "func": "float",
                    "args": [
                        "replies_count"
                    ],
                    "keywords": [],
                    "line": 482
                },
                {
                    "func": "float",
                    "args": [
                        "pingbacks_count + trackbacks_count"
                    ],
                    "keywords": [],
                    "line": 483
                },
                {
                    "func": "float",
                    "args": [
                        "total_words_entry"
                    ],
                    "keywords": [],
                    "line": 489
                },
                {
                    "func": "replies.all",
                    "args": [],
                    "keywords": [],
                    "line": 494
                },
                {
                    "func": "Category.published.all",
                    "args": [],
                    "keywords": [],
                    "line": 64
                },
                {
                    "func": "Count",
                    "args": [
                        "'entries'"
                    ],
                    "keywords": [],
                    "line": 65
                },
                {
                    "func": "Author.published.all",
                    "args": [],
                    "keywords": [],
                    "line": 85
                },
                {
                    "func": "Count",
                    "args": [
                        "'entries'"
                    ],
                    "keywords": [],
                    "line": 86
                },
                {
                    "func": "publication_date.date",
                    "args": [],
                    "keywords": [],
                    "line": 194
                },
                {
                    "func": "timezone.now",
                    "args": [],
                    "keywords": [],
                    "line": 196
                },
                {
                    "func": "today.date",
                    "args": [],
                    "keywords": [],
                    "line": 199
                },
                {
                    "func": "get_comment_model().objects.filter",
                    "args": [
                        "Q(flags=None) | Q(flags__flag=CommentFlag.MODERATOR_APPROVAL)"
                    ],
                    "keywords": [
                        {
                            "keyword": "content_type",
                            "value": "content_type"
                        },
                        {
                            "keyword": "object_pk__in",
                            "value": "entry_published_pks"
                        },
                        {
                            "keyword": "is_public",
                            "value": "True"
                        }
                    ],
                    "line": 237
                },
                {
                    "func": "get_comment_model().objects.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "content_type",
                            "value": "content_type"
                        },
                        {
                            "keyword": "object_pk__in",
                            "value": "entry_published_pks"
                        },
                        {
                            "keyword": "flags__flag__in",
                            "value": "[PINGBACK, TRACKBACK]"
                        },
                        {
                            "keyword": "is_public",
                            "value": "True"
                        }
                    ],
                    "line": 258
                },
                {
                    "func": "get_comment_model",
                    "args": [],
                    "keywords": [],
                    "line": 455
                },
                {
                    "func": "len",
                    "args": [
                        "c.comment.split()"
                    ],
                    "keywords": [],
                    "line": 495
                },
                {
                    "func": "float",
                    "args": [
                        "total_words_comment"
                    ],
                    "keywords": [],
                    "line": 496
                },
                {
                    "func": "Entry.published.filter",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "comment_count__gt",
                            "value": "0"
                        }
                    ],
                    "line": 134
                },
                {
                    "func": "timezone.localtime",
                    "args": [
                        "publication_date"
                    ],
                    "keywords": [],
                    "line": 193
                },
                {
                    "func": "timezone.localtime",
                    "args": [
                        "today"
                    ],
                    "keywords": [],
                    "line": 198
                },
                {
                    "func": "x.date",
                    "args": [],
                    "keywords": [],
                    "line": 205
                },
                {
                    "func": "len",
                    "args": [
                        "dates"
                    ],
                    "keywords": [],
                    "line": 214
                },
                {
                    "func": "set",
                    "args": [
                        "middle"
                    ],
                    "keywords": [],
                    "line": 298
                },
                {
                    "func": "set",
                    "args": [
                        "end"
                    ],
                    "keywords": [],
                    "line": 298
                },
                {
                    "func": "sorted",
                    "args": [
                        "set(middle + end)"
                    ],
                    "keywords": [],
                    "line": 299
                },
                {
                    "func": "md5",
                    "args": [
                        "email.strip().lower().encode('utf-8')"
                    ],
                    "keywords": [],
                    "line": 363
                },
                {
                    "func": "c.comment.split",
                    "args": [],
                    "keywords": [],
                    "line": 495
                },
                {
                    "func": "timezone.localtime(x).date",
                    "args": [],
                    "keywords": [],
                    "line": 205
                },
                {
                    "func": "Q",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "flags",
                            "value": "None"
                        }
                    ],
                    "line": 238
                },
                {
                    "func": "Q",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "flags__flag",
                            "value": "CommentFlag.MODERATOR_APPROVAL"
                        }
                    ],
                    "line": 238
                },
                {
                    "func": "set",
                    "args": [
                        "middle + end"
                    ],
                    "keywords": [],
                    "line": 299
                },
                {
                    "func": "email.strip().lower().encode",
                    "args": [
                        "'utf-8'"
                    ],
                    "keywords": [],
                    "line": 363
                },
                {
                    "func": "get_comment_model",
                    "args": [],
                    "keywords": [],
                    "line": 237
                },
                {
                    "func": "get_comment_model",
                    "args": [],
                    "keywords": [],
                    "line": 258
                },
                {
                    "func": "timezone.localtime",
                    "args": [
                        "x"
                    ],
                    "keywords": [],
                    "line": 205
                },
                {
                    "func": "email.strip().lower",
                    "args": [],
                    "keywords": [],
                    "line": 363
                },
                {
                    "func": "email.strip",
                    "args": [],
                    "keywords": [],
                    "line": 363
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\ThaWeatherman\\scrapers\\ncaabb\\get_teams.py": {
        "vulnerabilities": [
            {
                "line": 33,
                "test_id": "B113",
                "test_name": "request_without_timeout",
                "severity": "MEDIUM",
                "confidence": "LOW",
                "context": "32     '''\n33     req = requests.get(BASE_URL+TEAM_URL)\n34     soup = BeautifulSoup(req.content, 'lxml')\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "os",
                            "asname": null
                        }
                    ],
                    "line": 4
                },
                {
                    "names": [
                        {
                            "name": "re",
                            "asname": null
                        }
                    ],
                    "line": 5
                },
                {
                    "names": [
                        {
                            "name": "sqlite3",
                            "asname": null
                        }
                    ],
                    "line": 6
                },
                {
                    "names": [
                        {
                            "name": "requests",
                            "asname": null
                        }
                    ],
                    "line": 8
                },
                {
                    "module": "bs4",
                    "names": [
                        {
                            "name": "BeautifulSoup",
                            "asname": null
                        }
                    ],
                    "line": 9
                }
            ],
            "variables": [
                {
                    "name": "TEAMS_SQL",
                    "line": 12
                },
                {
                    "name": "BASE_URL",
                    "line": 15
                },
                {
                    "name": "TEAM_URL",
                    "line": 16
                },
                {
                    "name": "DB",
                    "line": 17
                },
                {
                    "name": "req",
                    "line": 33
                },
                {
                    "name": "soup",
                    "line": 34
                },
                {
                    "name": "links",
                    "line": 35
                },
                {
                    "name": "rows",
                    "line": 36
                },
                {
                    "name": "_id",
                    "line": 38
                },
                {
                    "name": "_id",
                    "line": 39
                },
                {
                    "name": "cursor",
                    "line": 42
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "\nGets the URL and team ID for each NCAA Basketball team from www.covers.com\n",
                    "line": 1
                },
                {
                    "type": "str",
                    "value": "create table teams (id int primary key not null,name text not null, url text not null);",
                    "line": 12
                },
                {
                    "type": "str",
                    "value": "http://www.covers.com",
                    "line": 15
                },
                {
                    "type": "str",
                    "value": "/pageLoader/pageLoader.aspx?page=/data/ncb/teams/teams.html",
                    "line": 16
                },
                {
                    "type": "str",
                    "value": "data.db",
                    "line": 17
                },
                {
                    "type": "str",
                    "value": "\n    Initializes the db if it doesn't exist\n    ",
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "\n    Scrapes the teams and adds them to the db\n    ",
                    "line": 30
                },
                {
                    "type": "str",
                    "value": "\n    The main routine\n    ",
                    "line": 48
                },
                {
                    "type": "str",
                    "value": "__main__",
                    "line": 55
                },
                {
                    "type": "str",
                    "value": "lxml",
                    "line": 34
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 35
                },
                {
                    "type": "str",
                    "value": "\\d+",
                    "line": 38
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 39
                },
                {
                    "type": "str",
                    "value": "insert into teams values (?,?,?);",
                    "line": 43
                },
                {
                    "type": "str",
                    "value": "/data/ncb/teams/team\\d+\\.html",
                    "line": 35
                },
                {
                    "type": "str",
                    "value": "href",
                    "line": 38
                },
                {
                    "type": "str",
                    "value": "href",
                    "line": 40
                }
            ],
            "calls": [
                {
                    "func": "requests.get",
                    "args": [
                        "BASE_URL + TEAM_URL"
                    ],
                    "keywords": [],
                    "line": 33
                },
                {
                    "func": "BeautifulSoup",
                    "args": [
                        "req.content",
                        "'lxml'"
                    ],
                    "keywords": [],
                    "line": 34
                },
                {
                    "func": "soup.find_all",
                    "args": [
                        "'a'"
                    ],
                    "keywords": [
                        {
                            "keyword": "href",
                            "value": "re.compile('/data/ncb/teams/team\\\\d+\\\\.html')"
                        }
                    ],
                    "line": 35
                },
                {
                    "func": "init_db",
                    "args": [],
                    "keywords": [],
                    "line": 51
                },
                {
                    "func": "scrape",
                    "args": [],
                    "keywords": [],
                    "line": 52
                },
                {
                    "func": "main",
                    "args": [],
                    "keywords": [],
                    "line": 56
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "DB"
                    ],
                    "keywords": [],
                    "line": 24
                },
                {
                    "func": "re.search",
                    "args": [
                        "'\\\\d+'",
                        "link.get('href')"
                    ],
                    "keywords": [],
                    "line": 38
                },
                {
                    "func": "_id.group",
                    "args": [
                        "0"
                    ],
                    "keywords": [],
                    "line": 39
                },
                {
                    "func": "rows.append",
                    "args": [
                        "(_id, link.text, link.get('href'))"
                    ],
                    "keywords": [],
                    "line": 40
                },
                {
                    "func": "sqlite3.connect",
                    "args": [
                        "DB"
                    ],
                    "keywords": [],
                    "line": 41
                },
                {
                    "func": "conn.cursor",
                    "args": [],
                    "keywords": [],
                    "line": 42
                },
                {
                    "func": "cursor.executemany",
                    "args": [
                        "'insert into teams values (?,?,?);'",
                        "rows"
                    ],
                    "keywords": [],
                    "line": 43
                },
                {
                    "func": "conn.commit",
                    "args": [],
                    "keywords": [],
                    "line": 44
                },
                {
                    "func": "sqlite3.connect",
                    "args": [
                        "DB"
                    ],
                    "keywords": [],
                    "line": 25
                },
                {
                    "func": "conn.execute",
                    "args": [
                        "TEAMS_SQL"
                    ],
                    "keywords": [],
                    "line": 26
                },
                {
                    "func": "re.compile",
                    "args": [
                        "'/data/ncb/teams/team\\\\d+\\\\.html'"
                    ],
                    "keywords": [],
                    "line": 35
                },
                {
                    "func": "link.get",
                    "args": [
                        "'href'"
                    ],
                    "keywords": [],
                    "line": 38
                },
                {
                    "func": "link.get",
                    "args": [
                        "'href'"
                    ],
                    "keywords": [],
                    "line": 40
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\CiscoDevNet\\coding-skills-sample-code\\coding207-putting-it-together\\create-device-list.py": {
        "vulnerabilities": [
            {
                "line": 66,
                "test_id": "B501",
                "test_name": "request_with_no_cert_validation",
                "severity": "HIGH",
                "confidence": "HIGH",
                "context": "65 # Perform GET on devices_count_url\n66 devices_count_response = requests.get(devices_count_url, verify=False)\n67 count = devices_count_response.json()[\"response\"]\n"
            },
            {
                "line": 66,
                "test_id": "B113",
                "test_name": "request_without_timeout",
                "severity": "MEDIUM",
                "confidence": "LOW",
                "context": "65 # Perform GET on devices_count_url\n66 devices_count_response = requests.get(devices_count_url, verify=False)\n67 count = devices_count_response.json()[\"response\"]\n"
            },
            {
                "line": 79,
                "test_id": "B501",
                "test_name": "request_with_no_cert_validation",
                "severity": "HIGH",
                "confidence": "HIGH",
                "context": "78 #Perform GET on get_devices_url\n79 get_devices_response = requests.get(get_devices_url, verify=False)\n80 \n"
            },
            {
                "line": 79,
                "test_id": "B113",
                "test_name": "request_without_timeout",
                "severity": "MEDIUM",
                "confidence": "LOW",
                "context": "78 #Perform GET on get_devices_url\n79 get_devices_response = requests.get(get_devices_url, verify=False)\n80 \n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "requests",
                            "asname": null
                        }
                    ],
                    "line": 31
                },
                {
                    "names": [
                        {
                            "name": "json",
                            "asname": null
                        }
                    ],
                    "line": 32
                },
                {
                    "names": [
                        {
                            "name": "logging",
                            "asname": null
                        }
                    ],
                    "line": 34
                }
            ],
            "variables": [
                {
                    "name": "device_type",
                    "line": 40
                },
                {
                    "name": "file_name",
                    "line": 51
                },
                {
                    "name": "controller_url",
                    "line": 58
                },
                {
                    "name": "devices_count_url",
                    "line": 61
                },
                {
                    "name": "devices_count_response",
                    "line": 66
                },
                {
                    "name": "count",
                    "line": 67
                },
                {
                    "name": "get_devices_url",
                    "line": 75
                },
                {
                    "name": "get_devices_response",
                    "line": 79
                },
                {
                    "name": "get_devices_json",
                    "line": 82
                },
                {
                    "name": "parent",
                    "line": 89
                },
                {
                    "name": "type",
                    "line": 44
                },
                {
                    "name": "type",
                    "line": 46
                }
            ],
            "calls": [
                {
                    "func": "logging.basicConfig",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "filename",
                            "value": "'mylog.log'"
                        },
                        {
                            "keyword": "format",
                            "value": "'%(asctime)s %(levelname)s: %(message)s'"
                        },
                        {
                            "keyword": "datefmt",
                            "value": "'%m/%d/%Y %I:%M:%S %p'"
                        },
                        {
                            "keyword": "level",
                            "value": "logging.DEBUG"
                        }
                    ],
                    "line": 35
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'Begin'"
                    ],
                    "keywords": [],
                    "line": 37
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'Asking user for device type'"
                    ],
                    "keywords": [],
                    "line": 38
                },
                {
                    "func": "input",
                    "args": [
                        "'Do you want to create a list of [r]outers or [s]witches?'"
                    ],
                    "keywords": [],
                    "line": 40
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'Device type is ' + type"
                    ],
                    "keywords": [],
                    "line": 48
                },
                {
                    "func": "input",
                    "args": [
                        "'Specify the file name to use for the list:'"
                    ],
                    "keywords": [],
                    "line": 51
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'Will save device list to ' + file_name"
                    ],
                    "keywords": [],
                    "line": 53
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'Calling APIC-EM API url:' + devices_count_url"
                    ],
                    "keywords": [],
                    "line": 63
                },
                {
                    "func": "requests.get",
                    "args": [
                        "devices_count_url"
                    ],
                    "keywords": [
                        {
                            "keyword": "verify",
                            "value": "False"
                        }
                    ],
                    "line": 66
                },
                {
                    "func": "logging.debug",
                    "args": [
                        "'API response: ' + json.dumps(devices_count_response.json(), indent=4, separators=(',', ': '))"
                    ],
                    "keywords": [],
                    "line": 69
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'Calling APIC-EM API url:' + get_devices_url"
                    ],
                    "keywords": [],
                    "line": 77
                },
                {
                    "func": "requests.get",
                    "args": [
                        "get_devices_url"
                    ],
                    "keywords": [
                        {
                            "keyword": "verify",
                            "value": "False"
                        }
                    ],
                    "line": 79
                },
                {
                    "func": "get_devices_response.json",
                    "args": [],
                    "keywords": [],
                    "line": 82
                },
                {
                    "func": "logging.debug",
                    "args": [
                        "'API response: ' + json.dumps(get_devices_response.json(), indent=4, separators=(',', ': '))"
                    ],
                    "keywords": [],
                    "line": 84
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'End Program'"
                    ],
                    "keywords": [],
                    "line": 106
                },
                {
                    "func": "devices_count_response.json",
                    "args": [],
                    "keywords": [],
                    "line": 67
                },
                {
                    "func": "str",
                    "args": [
                        "count"
                    ],
                    "keywords": [],
                    "line": 75
                },
                {
                    "func": "open",
                    "args": [
                        "file_name",
                        "'w'"
                    ],
                    "keywords": [],
                    "line": 94
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'File opened:' + file_name"
                    ],
                    "keywords": [],
                    "line": 95
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'Begin writing list:' + file_name"
                    ],
                    "keywords": [],
                    "line": 96
                },
                {
                    "func": "file.write",
                    "args": [
                        "'The list of devices of type: ' + type + '\\n'"
                    ],
                    "keywords": [],
                    "line": 97
                },
                {
                    "func": "print",
                    "args": [
                        "'Finished writing list ...'"
                    ],
                    "keywords": [],
                    "line": 103
                },
                {
                    "func": "logging.info",
                    "args": [
                        "'End writing list:' + file_name"
                    ],
                    "keywords": [],
                    "line": 104
                },
                {
                    "func": "json.dumps",
                    "args": [
                        "devices_count_response.json()"
                    ],
                    "keywords": [
                        {
                            "keyword": "indent",
                            "value": "4"
                        },
                        {
                            "keyword": "separators",
                            "value": "(',', ': ')"
                        }
                    ],
                    "line": 69
                },
                {
                    "func": "json.dumps",
                    "args": [
                        "get_devices_response.json()"
                    ],
                    "keywords": [
                        {
                            "keyword": "indent",
                            "value": "4"
                        },
                        {
                            "keyword": "separators",
                            "value": "(',', ': ')"
                        }
                    ],
                    "line": 84
                },
                {
                    "func": "devices_count_response.json",
                    "args": [],
                    "keywords": [],
                    "line": 69
                },
                {
                    "func": "get_devices_response.json",
                    "args": [],
                    "keywords": [],
                    "line": 84
                },
                {
                    "func": "file.write",
                    "args": [
                        "'id = ' + item['id'] + ' type = ' + item['type'] + '\\n'"
                    ],
                    "keywords": [],
                    "line": 101
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "https://sandboxapic.cisco.com",
                    "line": 58
                },
                {
                    "type": "str",
                    "value": "Begin",
                    "line": 37
                },
                {
                    "type": "str",
                    "value": "Asking user for device type",
                    "line": 38
                },
                {
                    "type": "str",
                    "value": "Do you want to create a list of [r]outers or [s]witches?",
                    "line": 40
                },
                {
                    "type": "str",
                    "value": "r",
                    "line": 43
                },
                {
                    "type": "str",
                    "value": "ROUTER",
                    "line": 44
                },
                {
                    "type": "str",
                    "value": "SWITCH",
                    "line": 46
                },
                {
                    "type": "str",
                    "value": "Specify the file name to use for the list:",
                    "line": 51
                },
                {
                    "type": "str",
                    "value": "/api/v0/network-device/count",
                    "line": 61
                },
                {
                    "type": "str",
                    "value": "response",
                    "line": 67
                },
                {
                    "type": "str",
                    "value": "response",
                    "line": 89
                },
                {
                    "type": "str",
                    "value": "End Program",
                    "line": 106
                },
                {
                    "type": "str",
                    "value": "mylog.log",
                    "line": 35
                },
                {
                    "type": "str",
                    "value": "%(asctime)s %(levelname)s: %(message)s",
                    "line": 35
                },
                {
                    "type": "str",
                    "value": "%m/%d/%Y %I:%M:%S %p",
                    "line": 35
                },
                {
                    "type": "str",
                    "value": "Device type is ",
                    "line": 48
                },
                {
                    "type": "str",
                    "value": "Will save device list to ",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "Calling APIC-EM API url:",
                    "line": 63
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 66
                },
                {
                    "type": "str",
                    "value": "API response: ",
                    "line": 69
                },
                {
                    "type": "str",
                    "value": "/api/v0/network-device/1/",
                    "line": 75
                },
                {
                    "type": "str",
                    "value": "Calling APIC-EM API url:",
                    "line": 77
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 79
                },
                {
                    "type": "str",
                    "value": "API response: ",
                    "line": 84
                },
                {
                    "type": "str",
                    "value": "w",
                    "line": 94
                },
                {
                    "type": "str",
                    "value": "Finished writing list ...",
                    "line": 103
                },
                {
                    "type": "str",
                    "value": "File opened:",
                    "line": 95
                },
                {
                    "type": "str",
                    "value": "Begin writing list:",
                    "line": 96
                },
                {
                    "type": "str",
                    "value": "\n",
                    "line": 97
                },
                {
                    "type": "str",
                    "value": "End writing list:",
                    "line": 104
                },
                {
                    "type": "int",
                    "value": 4,
                    "line": 69
                },
                {
                    "type": "int",
                    "value": 4,
                    "line": 84
                },
                {
                    "type": "str",
                    "value": "The list of devices of type: ",
                    "line": 97
                },
                {
                    "type": "str",
                    "value": "type",
                    "line": 100
                },
                {
                    "type": "str",
                    "value": ",",
                    "line": 69
                },
                {
                    "type": "str",
                    "value": ": ",
                    "line": 69
                },
                {
                    "type": "str",
                    "value": ",",
                    "line": 84
                },
                {
                    "type": "str",
                    "value": ": ",
                    "line": 84
                },
                {
                    "type": "str",
                    "value": "\n",
                    "line": 101
                },
                {
                    "type": "str",
                    "value": " type = ",
                    "line": 101
                },
                {
                    "type": "str",
                    "value": "type",
                    "line": 101
                },
                {
                    "type": "str",
                    "value": "id = ",
                    "line": 101
                },
                {
                    "type": "str",
                    "value": "id",
                    "line": 101
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\dimagi\\commcare-hq\\loadtest\\test_scripts\\hq_settings.py": {
        "vulnerabilities": [
            {
                "line": 8,
                "test_id": "B105",
                "test_name": "hardcoded_password_string",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "7 USERNAME = \"changeme@dimagi.com\"\n8 PASSWORD = \"***\"\n9 MOBILE_USERNAME = \"user@demo.commcarehq.org\"\n"
            },
            {
                "line": 10,
                "test_id": "B105",
                "test_name": "hardcoded_password_string",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "9 MOBILE_USERNAME = \"user@demo.commcarehq.org\"\n10 MOBILE_PASSWORD = \"***\"\n11 \n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "mechanize",
                            "asname": null
                        }
                    ],
                    "line": 1
                },
                {
                    "names": [
                        {
                            "name": "cookielib",
                            "asname": null
                        }
                    ],
                    "line": 2
                },
                {
                    "module": "localsettings",
                    "names": [
                        {
                            "name": "*",
                            "asname": null
                        }
                    ],
                    "line": 17
                }
            ],
            "variables": [
                {
                    "name": "BASE_URL",
                    "line": 5
                },
                {
                    "name": "DOMAIN",
                    "line": 6
                },
                {
                    "name": "USERNAME",
                    "line": 7
                },
                {
                    "name": "PASSWORD",
                    "line": 8
                },
                {
                    "name": "MOBILE_USERNAME",
                    "line": 9
                },
                {
                    "name": "MOBILE_PASSWORD",
                    "line": 10
                },
                {
                    "name": "OTA_USERNAME",
                    "line": 13
                },
                {
                    "name": "OTA_PASSWORD",
                    "line": 14
                },
                {
                    "name": "br",
                    "line": 65
                },
                {
                    "name": "cj",
                    "line": 66
                },
                {
                    "name": "_",
                    "line": 79
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "https://staging.commcarehq.org",
                    "line": 5
                },
                {
                    "type": "str",
                    "value": "demo",
                    "line": 6
                },
                {
                    "type": "str",
                    "value": "changeme@dimagi.com",
                    "line": 7
                },
                {
                    "type": "str",
                    "value": "***",
                    "line": 8
                },
                {
                    "type": "str",
                    "value": "user@demo.commcarehq.org",
                    "line": 9
                },
                {
                    "type": "str",
                    "value": "***",
                    "line": 10
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 13
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 14
                },
                {
                    "type": "str",
                    "value": "\n    Stick some shared stuff in here so we can use it across tests\n    and keep most of the config in one place.\n    ",
                    "line": 29
                },
                {
                    "type": "str",
                    "value": "Returns an initialized browser and associated cookie jar.",
                    "line": 64
                },
                {
                    "type": "str",
                    "value": "%s%s",
                    "line": 22
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 52
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 69
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 70
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 71
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 72
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 73
                },
                {
                    "type": "str",
                    "value": "username",
                    "line": 81
                },
                {
                    "type": "str",
                    "value": "password",
                    "line": 82
                },
                {
                    "type": "str",
                    "value": "/accounts/login/",
                    "line": 22
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 57
                },
                {
                    "type": "str",
                    "value": "User<user=%s,logged_in=%s>",
                    "line": 60
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 75
                },
                {
                    "type": "str",
                    "value": "form",
                    "line": 80
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 42
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 44
                }
            ],
            "calls": [
                {
                    "func": "mechanize.Browser",
                    "args": [],
                    "keywords": [],
                    "line": 65
                },
                {
                    "func": "cookielib.LWPCookieJar",
                    "args": [],
                    "keywords": [],
                    "line": 66
                },
                {
                    "func": "br.set_cookiejar",
                    "args": [
                        "cj"
                    ],
                    "keywords": [],
                    "line": 67
                },
                {
                    "func": "br.set_handle_equiv",
                    "args": [
                        "True"
                    ],
                    "keywords": [],
                    "line": 69
                },
                {
                    "func": "br.set_handle_gzip",
                    "args": [
                        "True"
                    ],
                    "keywords": [],
                    "line": 70
                },
                {
                    "func": "br.set_handle_redirect",
                    "args": [
                        "True"
                    ],
                    "keywords": [],
                    "line": 71
                },
                {
                    "func": "br.set_handle_referer",
                    "args": [
                        "True"
                    ],
                    "keywords": [],
                    "line": 72
                },
                {
                    "func": "br.set_handle_robots",
                    "args": [
                        "False"
                    ],
                    "keywords": [],
                    "line": 73
                },
                {
                    "func": "br.set_handle_refresh",
                    "args": [
                        "mechanize._http.HTTPRefreshProcessor()"
                    ],
                    "keywords": [
                        {
                            "keyword": "max_time",
                            "value": "1"
                        }
                    ],
                    "line": 75
                },
                {
                    "func": "browser.open",
                    "args": [
                        "login_url()"
                    ],
                    "keywords": [],
                    "line": 79
                },
                {
                    "func": "browser.select_form",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "name",
                            "value": "'form'"
                        }
                    ],
                    "line": 80
                },
                {
                    "func": "browser.submit",
                    "args": [],
                    "keywords": [],
                    "line": 83
                },
                {
                    "func": "mechanize._http.HTTPRefreshProcessor",
                    "args": [],
                    "keywords": [],
                    "line": 75
                },
                {
                    "func": "login_url",
                    "args": [],
                    "keywords": [],
                    "line": 79
                },
                {
                    "func": "_login",
                    "args": [
                        "self.browser",
                        "self.username",
                        "self.password"
                    ],
                    "keywords": [],
                    "line": 56
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\felinx\\d3status\\d3status\\settings.py": {
        "vulnerabilities": [
            {
                "line": 35,
                "test_id": "B105",
                "test_name": "hardcoded_password_string",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "34 send_error_email = True\n35 cookie_secret = \"d1d87395-8272-4749-b2f2-dcabd3903a1c\"\n36 xsrf_cookies = False\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "platform",
                            "asname": null
                        }
                    ],
                    "line": 10
                },
                {
                    "names": [
                        {
                            "name": "os",
                            "asname": null
                        }
                    ],
                    "line": 11
                },
                {
                    "names": [
                        {
                            "name": "d3status",
                            "asname": null
                        }
                    ],
                    "line": 14
                }
            ],
            "variables": [
                {
                    "name": "root_dir",
                    "line": 15
                },
                {
                    "name": "loglevel",
                    "line": 22
                },
                {
                    "name": "port",
                    "line": 23
                },
                {
                    "name": "d3_server_status_url",
                    "line": 25
                },
                {
                    "name": "sitename",
                    "line": 27
                },
                {
                    "name": "domain",
                    "line": 28
                },
                {
                    "name": "home_url",
                    "line": 29
                },
                {
                    "name": "login_url",
                    "line": 30
                },
                {
                    "name": "app_url_prefix",
                    "line": 31
                },
                {
                    "name": "email_from",
                    "line": 32
                },
                {
                    "name": "admins",
                    "line": 33
                },
                {
                    "name": "send_error_email",
                    "line": 34
                },
                {
                    "name": "cookie_secret",
                    "line": 35
                },
                {
                    "name": "xsrf_cookies",
                    "line": 36
                },
                {
                    "name": "apns_sandbox",
                    "line": 39
                },
                {
                    "name": "apns_certificate",
                    "line": 40
                },
                {
                    "name": "apns_certificate_key",
                    "line": 41
                },
                {
                    "name": "mysql",
                    "line": 43
                },
                {
                    "name": "smtp",
                    "line": 50
                },
                {
                    "name": "debug",
                    "line": 18
                },
                {
                    "name": "debug",
                    "line": 20
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "Project settings",
                    "line": 8
                },
                {
                    "type": "str",
                    "value": "INFO",
                    "line": 22
                },
                {
                    "type": "int",
                    "value": 8888,
                    "line": 23
                },
                {
                    "type": "str",
                    "value": "http://us.battle.net/d3/en/status",
                    "line": 25
                },
                {
                    "type": "str",
                    "value": "D3 Status",
                    "line": 27
                },
                {
                    "type": "str",
                    "value": "api.feilong.me",
                    "line": 28
                },
                {
                    "type": "str",
                    "value": "/d3/v1",
                    "line": 31
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 34
                },
                {
                    "type": "str",
                    "value": "d1d87395-8272-4749-b2f2-dcabd3903a1c",
                    "line": 35
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 36
                },
                {
                    "type": "str",
                    "value": "d3status_apns_dev.pem",
                    "line": 40
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "FELINX",
                    "line": 17
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 18
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 20
                },
                {
                    "type": "str",
                    "value": "http://%s/d3",
                    "line": 29
                },
                {
                    "type": "str",
                    "value": "http://%s/login",
                    "line": 30
                },
                {
                    "type": "str",
                    "value": "%s <noreply@%s>",
                    "line": 32
                },
                {
                    "type": "str",
                    "value": "Felinx <felinx.lee@gmail.com>",
                    "line": 33
                },
                {
                    "type": "str",
                    "value": "host",
                    "line": 43
                },
                {
                    "type": "str",
                    "value": "port",
                    "line": 44
                },
                {
                    "type": "str",
                    "value": "database",
                    "line": 45
                },
                {
                    "type": "str",
                    "value": "user",
                    "line": 46
                },
                {
                    "type": "str",
                    "value": "password",
                    "line": 47
                },
                {
                    "type": "str",
                    "value": "localhost",
                    "line": 43
                },
                {
                    "type": "str",
                    "value": "3306",
                    "line": 44
                },
                {
                    "type": "str",
                    "value": "d3status",
                    "line": 45
                },
                {
                    "type": "str",
                    "value": "felinx",
                    "line": 46
                },
                {
                    "type": "str",
                    "value": "felinx",
                    "line": 47
                },
                {
                    "type": "str",
                    "value": "host",
                    "line": 50
                },
                {
                    "type": "str",
                    "value": "user",
                    "line": 51
                },
                {
                    "type": "str",
                    "value": "password",
                    "line": 52
                },
                {
                    "type": "str",
                    "value": "duration",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "tls",
                    "line": 54
                },
                {
                    "type": "str",
                    "value": "localhost",
                    "line": 50
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 51
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 52
                },
                {
                    "type": "int",
                    "value": 30,
                    "line": 53
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 54
                }
            ],
            "calls": [
                {
                    "func": "os.path.dirname",
                    "args": [
                        "os.path.abspath(d3status.__file__)"
                    ],
                    "keywords": [],
                    "line": 15
                },
                {
                    "func": "os.path.abspath",
                    "args": [
                        "d3status.__file__"
                    ],
                    "keywords": [],
                    "line": 15
                },
                {
                    "func": "platform.node",
                    "args": [],
                    "keywords": [],
                    "line": 17
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\datadesk\\django-bakery\\bakery\\tests\\__init__.py": {
        "vulnerabilities": [
            {
                "line": 408,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "407             with self.settings(BAKERY_CACHE_CONTROL={\n408                 \"application/javascript\": random.randint(0, 100000),\n409                 \"text/css\": random.randint(0, 100000),\n"
            },
            {
                "line": 409,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "408                 \"application/javascript\": random.randint(0, 100000),\n409                 \"text/css\": random.randint(0, 100000),\n410                 \"text/html\": random.randint(0, 100000),\n"
            },
            {
                "line": 410,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "409                 \"text/css\": random.randint(0, 100000),\n410                 \"text/html\": random.randint(0, 100000),\n411             }):\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "module": "__future__",
                    "names": [
                        {
                            "name": "absolute_import",
                            "asname": null
                        }
                    ],
                    "line": 1
                },
                {
                    "names": [
                        {
                            "name": "os",
                            "asname": null
                        }
                    ],
                    "line": 2
                },
                {
                    "names": [
                        {
                            "name": "six",
                            "asname": null
                        }
                    ],
                    "line": 3
                },
                {
                    "names": [
                        {
                            "name": "boto",
                            "asname": null
                        }
                    ],
                    "line": 4
                },
                {
                    "names": [
                        {
                            "name": "json",
                            "asname": null
                        }
                    ],
                    "line": 5
                },
                {
                    "names": [
                        {
                            "name": "random",
                            "asname": null
                        }
                    ],
                    "line": 6
                },
                {
                    "module": "moto",
                    "names": [
                        {
                            "name": "mock_s3",
                            "asname": null
                        }
                    ],
                    "line": 7
                },
                {
                    "module": "datetime",
                    "names": [
                        {
                            "name": "date",
                            "asname": null
                        }
                    ],
                    "line": 8
                },
                {
                    "module": null,
                    "names": [
                        {
                            "name": "views",
                            "asname": null
                        },
                        {
                            "name": "feeds",
                            "asname": null
                        }
                    ],
                    "line": 9
                },
                {
                    "module": "django.db",
                    "names": [
                        {
                            "name": "models",
                            "asname": null
                        }
                    ],
                    "line": 10
                },
                {
                    "module": null,
                    "names": [
                        {
                            "name": "static_views",
                            "asname": null
                        }
                    ],
                    "line": 11
                },
                {
                    "module": "django.conf",
                    "names": [
                        {
                            "name": "settings",
                            "asname": null
                        }
                    ],
                    "line": 12
                },
                {
                    "module": null,
                    "names": [
                        {
                            "name": "models",
                            "asname": "bmodels"
                        }
                    ],
                    "line": 13
                },
                {
                    "module": "django.http",
                    "names": [
                        {
                            "name": "HttpResponse",
                            "asname": null
                        }
                    ],
                    "line": 14
                },
                {
                    "module": "django.core.management",
                    "names": [
                        {
                            "name": "call_command",
                            "asname": null
                        }
                    ],
                    "line": 15
                },
                {
                    "module": "django.test",
                    "names": [
                        {
                            "name": "TestCase",
                            "asname": null
                        },
                        {
                            "name": "RequestFactory",
                            "asname": null
                        }
                    ],
                    "line": 16
                },
                {
                    "module": "django.core.management.base",
                    "names": [
                        {
                            "name": "CommandError",
                            "asname": null
                        }
                    ],
                    "line": 17
                },
                {
                    "module": "django.core.exceptions",
                    "names": [
                        {
                            "name": "ImproperlyConfigured",
                            "asname": null
                        }
                    ],
                    "line": 18
                },
                {
                    "module": "django.contrib.contenttypes.models",
                    "names": [
                        {
                            "name": "ContentType",
                            "asname": null
                        }
                    ],
                    "line": 19
                },
                {
                    "module": "bakery",
                    "names": [
                        {
                            "name": "tasks",
                            "asname": null
                        }
                    ],
                    "line": 382
                }
            ],
            "variables": [
                {
                    "name": "detail_views",
                    "line": 23
                },
                {
                    "name": "name",
                    "line": 24
                },
                {
                    "name": "pub_date",
                    "line": 25
                },
                {
                    "name": "detail_views",
                    "line": 33
                },
                {
                    "name": "name",
                    "line": 34
                },
                {
                    "name": "pub_date",
                    "line": 35
                },
                {
                    "name": "detail_views",
                    "line": 39
                },
                {
                    "name": "name",
                    "line": 40
                },
                {
                    "name": "pub_date",
                    "line": 41
                },
                {
                    "name": "is_published",
                    "line": 42
                },
                {
                    "name": "model",
                    "line": 49
                },
                {
                    "name": "slug_field",
                    "line": 50
                },
                {
                    "name": "template_name",
                    "line": 51
                },
                {
                    "name": "model",
                    "line": 55
                },
                {
                    "name": "model",
                    "line": 59
                },
                {
                    "name": "date_field",
                    "line": 60
                },
                {
                    "name": "template_name",
                    "line": 61
                },
                {
                    "name": "model",
                    "line": 65
                },
                {
                    "name": "date_field",
                    "line": 66
                },
                {
                    "name": "template_name",
                    "line": 67
                },
                {
                    "name": "model",
                    "line": 71
                },
                {
                    "name": "date_field",
                    "line": 72
                },
                {
                    "name": "month_format",
                    "line": 73
                },
                {
                    "name": "template_name",
                    "line": 74
                },
                {
                    "name": "model",
                    "line": 78
                },
                {
                    "name": "date_field",
                    "line": 79
                },
                {
                    "name": "month_format",
                    "line": 80
                },
                {
                    "name": "template_name",
                    "line": 81
                },
                {
                    "name": "build_path",
                    "line": 85
                },
                {
                    "name": "url",
                    "line": 86
                },
                {
                    "name": "link",
                    "line": 90
                },
                {
                    "name": "build_path",
                    "line": 110
                },
                {
                    "name": "v",
                    "line": 136
                },
                {
                    "name": "build_path",
                    "line": 142
                },
                {
                    "name": "v",
                    "line": 145
                },
                {
                    "name": "build_path",
                    "line": 151
                },
                {
                    "name": "v",
                    "line": 156
                },
                {
                    "name": "build_path",
                    "line": 163
                },
                {
                    "name": "v",
                    "line": 166
                },
                {
                    "name": "build_path",
                    "line": 173
                },
                {
                    "name": "v",
                    "line": 178
                },
                {
                    "name": "v",
                    "line": 200
                },
                {
                    "name": "build_path",
                    "line": 203
                },
                {
                    "name": "v",
                    "line": 207
                },
                {
                    "name": "years",
                    "line": 210
                },
                {
                    "name": "v",
                    "line": 221
                },
                {
                    "name": "dates",
                    "line": 224
                },
                {
                    "name": "v",
                    "line": 236
                },
                {
                    "name": "dates",
                    "line": 239
                },
                {
                    "name": "v",
                    "line": 256
                },
                {
                    "name": "build_path",
                    "line": 263
                },
                {
                    "name": "v",
                    "line": 270
                },
                {
                    "name": "build_path",
                    "line": 273
                },
                {
                    "name": "v",
                    "line": 278
                },
                {
                    "name": "build_path",
                    "line": 280
                },
                {
                    "name": "f",
                    "line": 289
                },
                {
                    "name": "build_path",
                    "line": 292
                },
                {
                    "name": "foobar_path",
                    "line": 311
                },
                {
                    "name": "robots_path",
                    "line": 321
                },
                {
                    "name": "favicon_path",
                    "line": 323
                },
                {
                    "name": "obj",
                    "line": 383
                },
                {
                    "name": "ct",
                    "line": 384
                },
                {
                    "name": "obj",
                    "line": 388
                },
                {
                    "name": "obj",
                    "line": 130
                },
                {
                    "name": "build_path",
                    "line": 186
                },
                {
                    "name": "build_path",
                    "line": 212
                },
                {
                    "name": "build_path",
                    "line": 226
                },
                {
                    "name": "build_path",
                    "line": 245
                },
                {
                    "name": "conn",
                    "line": 352
                },
                {
                    "name": "bucket",
                    "line": 353
                },
                {
                    "name": "local_file_list",
                    "line": 356
                },
                {
                    "name": "conn",
                    "line": 375
                },
                {
                    "name": "bucket",
                    "line": 376
                },
                {
                    "name": "conn",
                    "line": 429
                },
                {
                    "name": "bucket",
                    "line": 430
                },
                {
                    "name": "keys",
                    "line": 431
                },
                {
                    "name": "conn",
                    "line": 412
                },
                {
                    "name": "bucket",
                    "line": 413
                },
                {
                    "name": "k",
                    "line": 433
                },
                {
                    "name": "local_key",
                    "line": 360
                },
                {
                    "name": "key",
                    "line": 417
                },
                {
                    "name": "local_key",
                    "line": 365
                }
            ],
            "calls": [
                {
                    "func": "models.CharField",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "max_length",
                            "value": "500"
                        }
                    ],
                    "line": 24
                },
                {
                    "func": "models.DateField",
                    "args": [],
                    "keywords": [],
                    "line": 25
                },
                {
                    "func": "models.CharField",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "max_length",
                            "value": "500"
                        }
                    ],
                    "line": 34
                },
                {
                    "func": "models.DateField",
                    "args": [],
                    "keywords": [],
                    "line": 35
                },
                {
                    "func": "models.CharField",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "max_length",
                            "value": "500"
                        }
                    ],
                    "line": 40
                },
                {
                    "func": "models.DateField",
                    "args": [],
                    "keywords": [],
                    "line": 41
                },
                {
                    "func": "models.BooleanField",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "default",
                            "value": "False"
                        }
                    ],
                    "line": 42
                },
                {
                    "func": "super(MockObject, self).get_absolute_url",
                    "args": [],
                    "keywords": [],
                    "line": 28
                },
                {
                    "func": "MockObject.objects.all",
                    "args": [],
                    "keywords": [],
                    "line": 93
                },
                {
                    "func": "HttpResponse",
                    "args": [
                        "self.convert_context_to_json(context)"
                    ],
                    "keywords": [
                        {
                            "keyword": "content_type",
                            "value": "'application/json'"
                        }
                    ],
                    "line": 99
                },
                {
                    "func": "json.dumps",
                    "args": [
                        "context"
                    ],
                    "keywords": [],
                    "line": 106
                },
                {
                    "func": "RequestFactory",
                    "args": [],
                    "keywords": [],
                    "line": 122
                },
                {
                    "func": "views.BuildableTemplateView",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "template_name",
                            "value": "'templateview.html'"
                        },
                        {
                            "keyword": "build_path",
                            "value": "'foo.html'"
                        }
                    ],
                    "line": 136
                },
                {
                    "func": "v.build",
                    "args": [],
                    "keywords": [],
                    "line": 141
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'foo.html'"
                    ],
                    "keywords": [],
                    "line": 142
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 143
                },
                {
                    "func": "os.remove",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 144
                },
                {
                    "func": "views.BuildableTemplateView",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "template_name",
                            "value": "'templateview.html'"
                        },
                        {
                            "keyword": "build_path",
                            "value": "'foo/bar.html'"
                        }
                    ],
                    "line": 145
                },
                {
                    "func": "v.build",
                    "args": [],
                    "keywords": [],
                    "line": 150
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'foo'",
                        "'bar.html'"
                    ],
                    "keywords": [],
                    "line": 151
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 152
                },
                {
                    "func": "os.remove",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 153
                },
                {
                    "func": "views.BuildableListView",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "queryset",
                            "value": "[1, 2, 3]"
                        },
                        {
                            "keyword": "template_name",
                            "value": "'listview.html'"
                        },
                        {
                            "keyword": "build_path",
                            "value": "'foo.html'"
                        }
                    ],
                    "line": 156
                },
                {
                    "func": "v.build_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 162
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'foo.html'"
                    ],
                    "keywords": [],
                    "line": 163
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 164
                },
                {
                    "func": "os.remove",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 165
                },
                {
                    "func": "views.BuildableListView",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "queryset",
                            "value": "[1, 2, 3]"
                        },
                        {
                            "keyword": "template_name",
                            "value": "'listview.html'"
                        },
                        {
                            "keyword": "build_path",
                            "value": "'foo/bar.html'"
                        }
                    ],
                    "line": 166
                },
                {
                    "func": "v.build_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 172
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'foo'",
                        "'bar.html'"
                    ],
                    "keywords": [],
                    "line": 173
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 174
                },
                {
                    "func": "os.remove",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 175
                },
                {
                    "func": "views.BuildableDetailView",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "queryset",
                            "value": "MockObject.objects.all()"
                        },
                        {
                            "keyword": "template_name",
                            "value": "'detailview.html'"
                        },
                        {
                            "keyword": "slug_field",
                            "value": "'this_slug'"
                        }
                    ],
                    "line": 178
                },
                {
                    "func": "v.build_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 184
                },
                {
                    "func": "MockObject.objects.all",
                    "args": [],
                    "keywords": [],
                    "line": 185
                },
                {
                    "func": "MockArchiveIndexView",
                    "args": [],
                    "keywords": [],
                    "line": 200
                },
                {
                    "func": "v.build_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 202
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "v.build_path"
                    ],
                    "keywords": [],
                    "line": 203
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 204
                },
                {
                    "func": "MockArchiveYearView",
                    "args": [],
                    "keywords": [],
                    "line": 207
                },
                {
                    "func": "v.build_dated_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 209
                },
                {
                    "func": "MockArchiveMonthView",
                    "args": [],
                    "keywords": [],
                    "line": 221
                },
                {
                    "func": "v.build_dated_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 223
                },
                {
                    "func": "MockArchiveDayView",
                    "args": [],
                    "keywords": [],
                    "line": 236
                },
                {
                    "func": "v.build_dated_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 238
                },
                {
                    "func": "views.BuildableRedirectView",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "build_path",
                            "value": "'detail/badurl.html'"
                        },
                        {
                            "keyword": "url",
                            "value": "'/detail/'"
                        }
                    ],
                    "line": 256
                },
                {
                    "func": "v.build",
                    "args": [],
                    "keywords": [],
                    "line": 261
                },
                {
                    "func": "MockRedirectView().build",
                    "args": [],
                    "keywords": [],
                    "line": 262
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'detail/badurl.html'"
                    ],
                    "keywords": [],
                    "line": 263
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 267
                },
                {
                    "func": "views.Buildable404View",
                    "args": [],
                    "keywords": [],
                    "line": 270
                },
                {
                    "func": "v.build",
                    "args": [],
                    "keywords": [],
                    "line": 272
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'404.html'"
                    ],
                    "keywords": [],
                    "line": 273
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 274
                },
                {
                    "func": "os.remove",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 275
                },
                {
                    "func": "MockJSONView",
                    "args": [],
                    "keywords": [],
                    "line": 278
                },
                {
                    "func": "v.build",
                    "args": [],
                    "keywords": [],
                    "line": 279
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'jsonview.json'"
                    ],
                    "keywords": [],
                    "line": 280
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 281
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "json.loads(open(build_path, 'rb').read().decode())",
                        "{'hello': 'tests'}"
                    ],
                    "keywords": [],
                    "line": 282
                },
                {
                    "func": "os.remove",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 286
                },
                {
                    "func": "MockRSSFeed",
                    "args": [],
                    "keywords": [],
                    "line": 289
                },
                {
                    "func": "f.build_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 291
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'feed.xml'"
                    ],
                    "keywords": [],
                    "line": 292
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 293
                },
                {
                    "func": "os.remove",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 294
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'"
                    ],
                    "keywords": [],
                    "line": 297
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'"
                    ],
                    "keywords": [],
                    "line": 298
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'"
                    ],
                    "keywords": [],
                    "line": 299
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'"
                    ],
                    "keywords": [],
                    "line": 300
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'"
                    ],
                    "keywords": [],
                    "line": 305
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'",
                        "'bakery.tests.MockDetailView'"
                    ],
                    "keywords": [],
                    "line": 310
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'static'",
                        "'foo.bar'"
                    ],
                    "keywords": [],
                    "line": 311
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(foobar_path)"
                    ],
                    "keywords": [],
                    "line": 316
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "open(foobar_path, 'rb').read().strip()",
                        "six.b('Hello tests')"
                    ],
                    "keywords": [],
                    "line": 317
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'robots.txt'"
                    ],
                    "keywords": [],
                    "line": 321
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(robots_path)"
                    ],
                    "keywords": [],
                    "line": 322
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'favicon.ico'"
                    ],
                    "keywords": [],
                    "line": 323
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(favicon_path)"
                    ],
                    "keywords": [],
                    "line": 324
                },
                {
                    "func": "self.assertRaises",
                    "args": [
                        "CommandError",
                        "call_command",
                        "'build'",
                        "'FooView'"
                    ],
                    "keywords": [],
                    "line": 327
                },
                {
                    "func": "call_command",
                    "args": [
                        "'unbuild'"
                    ],
                    "keywords": [],
                    "line": 335
                },
                {
                    "func": "ContentType.objects.get_for_model",
                    "args": [
                        "obj"
                    ],
                    "keywords": [],
                    "line": 384
                },
                {
                    "func": "tasks.publish_object",
                    "args": [
                        "ct.id",
                        "obj.id"
                    ],
                    "keywords": [],
                    "line": 385
                },
                {
                    "func": "tasks.unpublish_object",
                    "args": [
                        "ct.id",
                        "obj.id"
                    ],
                    "keywords": [],
                    "line": 386
                },
                {
                    "func": "obj.save",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "publish",
                            "value": "False"
                        }
                    ],
                    "line": 389
                },
                {
                    "func": "obj.save",
                    "args": [],
                    "keywords": [],
                    "line": 390
                },
                {
                    "func": "obj.save",
                    "args": [],
                    "keywords": [],
                    "line": 392
                },
                {
                    "func": "obj.save",
                    "args": [],
                    "keywords": [],
                    "line": 394
                },
                {
                    "func": "obj.delete",
                    "args": [],
                    "keywords": [],
                    "line": 395
                },
                {
                    "func": "static_views.serve",
                    "args": [
                        "self.factory.get('/static/robots.txt')",
                        "'robots.txt'"
                    ],
                    "keywords": [
                        {
                            "keyword": "document_root",
                            "value": "os.path.join(os.path.dirname(__file__), 'static')"
                        }
                    ],
                    "line": 398
                },
                {
                    "func": "self.convert_context_to_json",
                    "args": [
                        "context"
                    ],
                    "keywords": [],
                    "line": 100
                },
                {
                    "func": "self.get",
                    "args": [
                        "self.request"
                    ],
                    "keywords": [],
                    "line": 113
                },
                {
                    "func": "m.objects.create",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "name",
                            "value": "1"
                        },
                        {
                            "keyword": "pub_date",
                            "value": "date(2016, 1, 1)"
                        }
                    ],
                    "line": 124
                },
                {
                    "func": "m.objects.create",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "name",
                            "value": "2"
                        },
                        {
                            "keyword": "pub_date",
                            "value": "date(2015, 1, 1)"
                        }
                    ],
                    "line": 125
                },
                {
                    "func": "m.objects.create",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "name",
                            "value": "3"
                        },
                        {
                            "keyword": "pub_date",
                            "value": "date(2014, 1, 1)"
                        }
                    ],
                    "line": 126
                },
                {
                    "func": "obj.build",
                    "args": [],
                    "keywords": [],
                    "line": 131
                },
                {
                    "func": "obj.unbuild",
                    "args": [],
                    "keywords": [],
                    "line": 132
                },
                {
                    "func": "obj.get_absolute_url",
                    "args": [],
                    "keywords": [],
                    "line": 133
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 143
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 152
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 164
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 174
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "o.get_absolute_url()[1:]",
                        "'index.html'"
                    ],
                    "keywords": [],
                    "line": 186
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 191
                },
                {
                    "func": "v.unbuild_object",
                    "args": [
                        "o"
                    ],
                    "keywords": [],
                    "line": 192
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "v.kwargs['slug'] == v.kwargs['this_slug']"
                    ],
                    "keywords": [],
                    "line": 193
                },
                {
                    "func": "self.assertRaises",
                    "args": [
                        "ImproperlyConfigured"
                    ],
                    "keywords": [],
                    "line": 196
                },
                {
                    "func": "NoUrlDetailView().build_queryset",
                    "args": [],
                    "keywords": [],
                    "line": 197
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 204
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'archive'",
                        "'%s' % y",
                        "'index.html'"
                    ],
                    "keywords": [],
                    "line": 212
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 218
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'archive'",
                        "year",
                        "month",
                        "'index.html'"
                    ],
                    "keywords": [],
                    "line": 226
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 233
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "settings.BUILD_DIR",
                        "'archive'",
                        "year",
                        "month",
                        "day",
                        "'index.html'"
                    ],
                    "keywords": [],
                    "line": 245
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "os.path.exists(build_path)"
                    ],
                    "keywords": [],
                    "line": 253
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 267
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 274
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 281
                },
                {
                    "func": "json.loads",
                    "args": [
                        "open(build_path, 'rb').read().decode()"
                    ],
                    "keywords": [],
                    "line": 283
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 293
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "foobar_path"
                    ],
                    "keywords": [],
                    "line": 316
                },
                {
                    "func": "open(foobar_path, 'rb').read().strip",
                    "args": [],
                    "keywords": [],
                    "line": 318
                },
                {
                    "func": "six.b",
                    "args": [
                        "'Hello tests'"
                    ],
                    "keywords": [],
                    "line": 319
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "robots_path"
                    ],
                    "keywords": [],
                    "line": 322
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "favicon_path"
                    ],
                    "keywords": [],
                    "line": 324
                },
                {
                    "func": "self.settings",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "BAKERY_GZIP",
                            "value": "True"
                        }
                    ],
                    "line": 338
                },
                {
                    "func": "six.print_",
                    "args": [
                        "'testing gzipped files'"
                    ],
                    "keywords": [],
                    "line": 339
                },
                {
                    "func": "self.test_models",
                    "args": [],
                    "keywords": [],
                    "line": 340
                },
                {
                    "func": "self.test_template_view",
                    "args": [],
                    "keywords": [],
                    "line": 341
                },
                {
                    "func": "self.test_list_view",
                    "args": [],
                    "keywords": [],
                    "line": 342
                },
                {
                    "func": "self.test_detail_view",
                    "args": [],
                    "keywords": [],
                    "line": 343
                },
                {
                    "func": "self.test_404_view",
                    "args": [],
                    "keywords": [],
                    "line": 344
                },
                {
                    "func": "self.test_build_cmd",
                    "args": [],
                    "keywords": [],
                    "line": 345
                },
                {
                    "func": "mock_s3",
                    "args": [],
                    "keywords": [],
                    "line": 351
                },
                {
                    "func": "boto.connect_s3",
                    "args": [],
                    "keywords": [],
                    "line": 352
                },
                {
                    "func": "conn.create_bucket",
                    "args": [
                        "settings.AWS_BUCKET_NAME"
                    ],
                    "keywords": [],
                    "line": 353
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'"
                    ],
                    "keywords": [],
                    "line": 354
                },
                {
                    "func": "call_command",
                    "args": [
                        "'publish'"
                    ],
                    "keywords": [
                        {
                            "keyword": "no_pooling",
                            "value": "True"
                        },
                        {
                            "keyword": "verbosity",
                            "value": "3"
                        }
                    ],
                    "line": 355
                },
                {
                    "func": "os.walk",
                    "args": [
                        "settings.BUILD_DIR"
                    ],
                    "keywords": [],
                    "line": 357
                },
                {
                    "func": "bucket.list",
                    "args": [],
                    "keywords": [],
                    "line": 367
                },
                {
                    "func": "call_command",
                    "args": [
                        "'unbuild'"
                    ],
                    "keywords": [],
                    "line": 369
                },
                {
                    "func": "os.makedirs",
                    "args": [
                        "settings.BUILD_DIR"
                    ],
                    "keywords": [],
                    "line": 370
                },
                {
                    "func": "call_command",
                    "args": [
                        "'publish'"
                    ],
                    "keywords": [
                        {
                            "keyword": "no_pooling",
                            "value": "True"
                        },
                        {
                            "keyword": "verbosity",
                            "value": "3"
                        }
                    ],
                    "line": 371
                },
                {
                    "func": "mock_s3",
                    "args": [],
                    "keywords": [],
                    "line": 374
                },
                {
                    "func": "boto.connect_s3",
                    "args": [],
                    "keywords": [],
                    "line": 375
                },
                {
                    "func": "conn.create_bucket",
                    "args": [
                        "settings.AWS_BUCKET_NAME"
                    ],
                    "keywords": [],
                    "line": 376
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'"
                    ],
                    "keywords": [],
                    "line": 377
                },
                {
                    "func": "call_command",
                    "args": [
                        "'unpublish'"
                    ],
                    "keywords": [
                        {
                            "keyword": "no_pooling",
                            "value": "True"
                        },
                        {
                            "keyword": "verbosity",
                            "value": "3"
                        }
                    ],
                    "line": 378
                },
                {
                    "func": "self.assertFalse",
                    "args": [
                        "list((key for key in bucket.list()))"
                    ],
                    "keywords": [],
                    "line": 379
                },
                {
                    "func": "AutoMockObject.objects.all",
                    "args": [],
                    "keywords": [],
                    "line": 383
                },
                {
                    "func": "AutoMockObject.objects.all",
                    "args": [],
                    "keywords": [],
                    "line": 388
                },
                {
                    "func": "self.factory.get",
                    "args": [
                        "'/static/robots.txt'"
                    ],
                    "keywords": [],
                    "line": 399
                },
                {
                    "func": "mock_s3",
                    "args": [],
                    "keywords": [],
                    "line": 405
                },
                {
                    "func": "mock_s3",
                    "args": [],
                    "keywords": [],
                    "line": 428
                },
                {
                    "func": "boto.connect_s3",
                    "args": [],
                    "keywords": [],
                    "line": 429
                },
                {
                    "func": "conn.create_bucket",
                    "args": [
                        "settings.AWS_BUCKET_NAME"
                    ],
                    "keywords": [],
                    "line": 430
                },
                {
                    "func": "range",
                    "args": [
                        "0",
                        "10000"
                    ],
                    "keywords": [],
                    "line": 432
                },
                {
                    "func": "call_command",
                    "args": [
                        "'unpublish'"
                    ],
                    "keywords": [
                        {
                            "keyword": "no_pooling",
                            "value": "True"
                        },
                        {
                            "keyword": "verbosity",
                            "value": "3"
                        }
                    ],
                    "line": 437
                },
                {
                    "func": "self.assertFalse",
                    "args": [
                        "list((key for key in bucket.list()))"
                    ],
                    "keywords": [],
                    "line": 438
                },
                {
                    "func": "super",
                    "args": [
                        "MockObject",
                        "self"
                    ],
                    "keywords": [],
                    "line": 28
                },
                {
                    "func": "m.objects.all",
                    "args": [],
                    "keywords": [],
                    "line": 130
                },
                {
                    "func": "MockObject.objects.all",
                    "args": [],
                    "keywords": [],
                    "line": 179
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 191
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 218
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 233
                },
                {
                    "func": "os.path.exists",
                    "args": [
                        "build_path"
                    ],
                    "keywords": [],
                    "line": 253
                },
                {
                    "func": "MockRedirectView",
                    "args": [],
                    "keywords": [],
                    "line": 262
                },
                {
                    "func": "open(build_path, 'rb').read().decode",
                    "args": [],
                    "keywords": [],
                    "line": 283
                },
                {
                    "func": "self.assertIn",
                    "args": [
                        "key.name",
                        "local_file_list"
                    ],
                    "keywords": [],
                    "line": 368
                },
                {
                    "func": "list",
                    "args": [
                        "(key for key in bucket.list())"
                    ],
                    "keywords": [],
                    "line": 379
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "os.path.dirname(__file__)",
                        "'static'"
                    ],
                    "keywords": [],
                    "line": 401
                },
                {
                    "func": "self.settings",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "BAKERY_CACHE_CONTROL",
                            "value": "{'application/javascript': random.randint(0, 100000), 'text/css': random.randint(0, 100000), 'text/html': random.randint(0, 100000)}"
                        }
                    ],
                    "line": 407
                },
                {
                    "func": "boto.connect_s3",
                    "args": [],
                    "keywords": [],
                    "line": 412
                },
                {
                    "func": "conn.create_bucket",
                    "args": [
                        "settings.AWS_BUCKET_NAME"
                    ],
                    "keywords": [],
                    "line": 413
                },
                {
                    "func": "call_command",
                    "args": [
                        "'build'"
                    ],
                    "keywords": [],
                    "line": 414
                },
                {
                    "func": "call_command",
                    "args": [
                        "'publish'"
                    ],
                    "keywords": [
                        {
                            "keyword": "no_pooling",
                            "value": "True"
                        },
                        {
                            "keyword": "verbosity",
                            "value": "3"
                        }
                    ],
                    "line": 415
                },
                {
                    "func": "boto.s3.key.Key",
                    "args": [
                        "bucket"
                    ],
                    "keywords": [],
                    "line": 433
                },
                {
                    "func": "k.set_contents_from_string",
                    "args": [
                        "'This is test object %s' % i"
                    ],
                    "keywords": [],
                    "line": 435
                },
                {
                    "func": "keys.append",
                    "args": [
                        "k"
                    ],
                    "keywords": [],
                    "line": 436
                },
                {
                    "func": "list",
                    "args": [
                        "(key for key in bucket.list())"
                    ],
                    "keywords": [],
                    "line": 438
                },
                {
                    "func": "date",
                    "args": [
                        "2016",
                        "1",
                        "1"
                    ],
                    "keywords": [],
                    "line": 124
                },
                {
                    "func": "date",
                    "args": [
                        "2015",
                        "1",
                        "1"
                    ],
                    "keywords": [],
                    "line": 125
                },
                {
                    "func": "date",
                    "args": [
                        "2014",
                        "1",
                        "1"
                    ],
                    "keywords": [],
                    "line": 126
                },
                {
                    "func": "o.get_absolute_url",
                    "args": [],
                    "keywords": [],
                    "line": 188
                },
                {
                    "func": "NoUrlDetailView",
                    "args": [],
                    "keywords": [],
                    "line": 197
                },
                {
                    "func": "open(foobar_path, 'rb').read",
                    "args": [],
                    "keywords": [],
                    "line": 318
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "os.path.relpath(dirpath, settings.BUILD_DIR)",
                        "fname"
                    ],
                    "keywords": [],
                    "line": 360
                },
                {
                    "func": "local_key.startswith",
                    "args": [
                        "'./'"
                    ],
                    "keywords": [],
                    "line": 364
                },
                {
                    "func": "local_file_list.append",
                    "args": [
                        "local_key"
                    ],
                    "keywords": [],
                    "line": 366
                },
                {
                    "func": "os.path.dirname",
                    "args": [
                        "__file__"
                    ],
                    "keywords": [],
                    "line": 401
                },
                {
                    "func": "bucket.get_key",
                    "args": [
                        "key.name"
                    ],
                    "keywords": [],
                    "line": 417
                },
                {
                    "func": "open(build_path, 'rb').read",
                    "args": [],
                    "keywords": [],
                    "line": 283
                },
                {
                    "func": "os.path.relpath",
                    "args": [
                        "dirpath",
                        "settings.BUILD_DIR"
                    ],
                    "keywords": [],
                    "line": 361
                },
                {
                    "func": "self.assertIn",
                    "args": [
                        "str(settings.BAKERY_CACHE_CONTROL.get(key.content_type))",
                        "key.cache_control"
                    ],
                    "keywords": [],
                    "line": 421
                },
                {
                    "func": "open",
                    "args": [
                        "foobar_path",
                        "'rb'"
                    ],
                    "keywords": [],
                    "line": 318
                },
                {
                    "func": "bucket.list",
                    "args": [],
                    "keywords": [],
                    "line": 379
                },
                {
                    "func": "random.randint",
                    "args": [
                        "0",
                        "100000"
                    ],
                    "keywords": [],
                    "line": 408
                },
                {
                    "func": "random.randint",
                    "args": [
                        "0",
                        "100000"
                    ],
                    "keywords": [],
                    "line": 409
                },
                {
                    "func": "random.randint",
                    "args": [
                        "0",
                        "100000"
                    ],
                    "keywords": [],
                    "line": 410
                },
                {
                    "func": "str",
                    "args": [
                        "settings.BAKERY_CACHE_CONTROL.get(key.content_type)"
                    ],
                    "keywords": [],
                    "line": 422
                },
                {
                    "func": "bucket.list",
                    "args": [],
                    "keywords": [],
                    "line": 438
                },
                {
                    "func": "open",
                    "args": [
                        "build_path",
                        "'rb'"
                    ],
                    "keywords": [],
                    "line": 283
                },
                {
                    "func": "settings.BAKERY_CACHE_CONTROL.get",
                    "args": [
                        "key.content_type"
                    ],
                    "keywords": [],
                    "line": 422
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "the_slug",
                    "line": 50
                },
                {
                    "type": "str",
                    "value": "detailview.html",
                    "line": 51
                },
                {
                    "type": "str",
                    "value": "pub_date",
                    "line": 60
                },
                {
                    "type": "str",
                    "value": "indexview.html",
                    "line": 61
                },
                {
                    "type": "str",
                    "value": "pub_date",
                    "line": 66
                },
                {
                    "type": "str",
                    "value": "yearview.html",
                    "line": 67
                },
                {
                    "type": "str",
                    "value": "pub_date",
                    "line": 72
                },
                {
                    "type": "str",
                    "value": "%m",
                    "line": 73
                },
                {
                    "type": "str",
                    "value": "monthview.html",
                    "line": 74
                },
                {
                    "type": "str",
                    "value": "pub_date",
                    "line": 79
                },
                {
                    "type": "str",
                    "value": "%m",
                    "line": 80
                },
                {
                    "type": "str",
                    "value": "dayview.html",
                    "line": 81
                },
                {
                    "type": "str",
                    "value": "detail/badurl.html",
                    "line": 85
                },
                {
                    "type": "str",
                    "value": "/detail/",
                    "line": 86
                },
                {
                    "type": "str",
                    "value": "/latest.xml",
                    "line": 90
                },
                {
                    "type": "str",
                    "value": "jsonview.json",
                    "line": 110
                },
                {
                    "type": "str",
                    "value": "bakery.tests.MockDetailView",
                    "line": 23
                },
                {
                    "type": "str",
                    "value": "bakery.tests.MockDetailView",
                    "line": 33
                },
                {
                    "type": "str",
                    "value": "bakery.tests.MockDetailView",
                    "line": 39
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 391
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 393
                },
                {
                    "type": "int",
                    "value": 500,
                    "line": 24
                },
                {
                    "type": "str",
                    "value": "/%s/",
                    "line": 29
                },
                {
                    "type": "int",
                    "value": 500,
                    "line": 34
                },
                {
                    "type": "int",
                    "value": 500,
                    "line": 40
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 42
                },
                {
                    "type": "str",
                    "value": "/%s/",
                    "line": 45
                },
                {
                    "type": "str",
                    "value": "hello",
                    "line": 116
                },
                {
                    "type": "str",
                    "value": "tests",
                    "line": 116
                },
                {
                    "type": "str",
                    "value": "foo.html",
                    "line": 142
                },
                {
                    "type": "str",
                    "value": "foo",
                    "line": 151
                },
                {
                    "type": "str",
                    "value": "bar.html",
                    "line": 151
                },
                {
                    "type": "str",
                    "value": "foo.html",
                    "line": 163
                },
                {
                    "type": "str",
                    "value": "foo",
                    "line": 173
                },
                {
                    "type": "str",
                    "value": "bar.html",
                    "line": 173
                },
                {
                    "type": "int",
                    "value": 2014,
                    "line": 210
                },
                {
                    "type": "int",
                    "value": 2015,
                    "line": 210
                },
                {
                    "type": "int",
                    "value": 2016,
                    "line": 210
                },
                {
                    "type": "str",
                    "value": "detail/badurl.html",
                    "line": 265
                },
                {
                    "type": "str",
                    "value": "404.html",
                    "line": 273
                },
                {
                    "type": "str",
                    "value": "jsonview.json",
                    "line": 280
                },
                {
                    "type": "str",
                    "value": "feed.xml",
                    "line": 292
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 297
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 298
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 299
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 300
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 305
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 310
                },
                {
                    "type": "str",
                    "value": "bakery.tests.MockDetailView",
                    "line": 310
                },
                {
                    "type": "str",
                    "value": "static",
                    "line": 313
                },
                {
                    "type": "str",
                    "value": "foo.bar",
                    "line": 314
                },
                {
                    "type": "str",
                    "value": "robots.txt",
                    "line": 321
                },
                {
                    "type": "str",
                    "value": "favicon.ico",
                    "line": 323
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 330
                },
                {
                    "type": "str",
                    "value": "FooView",
                    "line": 331
                },
                {
                    "type": "str",
                    "value": "unbuild",
                    "line": 335
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 383
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 388
                },
                {
                    "type": "str",
                    "value": "robots.txt",
                    "line": 400
                },
                {
                    "type": "str",
                    "value": "application/json",
                    "line": 101
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 130
                },
                {
                    "type": "str",
                    "value": "templateview.html",
                    "line": 137
                },
                {
                    "type": "str",
                    "value": "foo.html",
                    "line": 138
                },
                {
                    "type": "str",
                    "value": "templateview.html",
                    "line": 146
                },
                {
                    "type": "str",
                    "value": "foo/bar.html",
                    "line": 147
                },
                {
                    "type": "str",
                    "value": "listview.html",
                    "line": 158
                },
                {
                    "type": "str",
                    "value": "foo.html",
                    "line": 159
                },
                {
                    "type": "str",
                    "value": "listview.html",
                    "line": 168
                },
                {
                    "type": "str",
                    "value": "foo/bar.html",
                    "line": 169
                },
                {
                    "type": "str",
                    "value": "detailview.html",
                    "line": 180
                },
                {
                    "type": "str",
                    "value": "this_slug",
                    "line": 181
                },
                {
                    "type": "str",
                    "value": "index.html",
                    "line": 189
                },
                {
                    "type": "str",
                    "value": "archive",
                    "line": 214
                },
                {
                    "type": "str",
                    "value": "index.html",
                    "line": 216
                },
                {
                    "type": "str",
                    "value": "2014",
                    "line": 224
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 224
                },
                {
                    "type": "str",
                    "value": "2015",
                    "line": 224
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 224
                },
                {
                    "type": "str",
                    "value": "2016",
                    "line": 224
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 224
                },
                {
                    "type": "str",
                    "value": "archive",
                    "line": 228
                },
                {
                    "type": "str",
                    "value": "index.html",
                    "line": 231
                },
                {
                    "type": "str",
                    "value": "2014",
                    "line": 240
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 240
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 240
                },
                {
                    "type": "str",
                    "value": "2015",
                    "line": 241
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 241
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 241
                },
                {
                    "type": "str",
                    "value": "2016",
                    "line": 242
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 242
                },
                {
                    "type": "str",
                    "value": "01",
                    "line": 242
                },
                {
                    "type": "str",
                    "value": "archive",
                    "line": 247
                },
                {
                    "type": "str",
                    "value": "index.html",
                    "line": 251
                },
                {
                    "type": "str",
                    "value": "detail/badurl.html",
                    "line": 257
                },
                {
                    "type": "str",
                    "value": "/detail/",
                    "line": 258
                },
                {
                    "type": "str",
                    "value": "hello",
                    "line": 284
                },
                {
                    "type": "str",
                    "value": "tests",
                    "line": 284
                },
                {
                    "type": "str",
                    "value": "Hello tests",
                    "line": 319
                },
                {
                    "type": "str",
                    "value": "testing gzipped files",
                    "line": 339
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 354
                },
                {
                    "type": "str",
                    "value": "publish",
                    "line": 355
                },
                {
                    "type": "str",
                    "value": "unbuild",
                    "line": 369
                },
                {
                    "type": "str",
                    "value": "publish",
                    "line": 371
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 377
                },
                {
                    "type": "str",
                    "value": "unpublish",
                    "line": 378
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 389
                },
                {
                    "type": "str",
                    "value": "/static/robots.txt",
                    "line": 399
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 432
                },
                {
                    "type": "int",
                    "value": 10000,
                    "line": 432
                },
                {
                    "type": "str",
                    "value": "unpublish",
                    "line": 437
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 124
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 125
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 126
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 157
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 157
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 157
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 167
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 167
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 167
                },
                {
                    "type": "str",
                    "value": "%s",
                    "line": 215
                },
                {
                    "type": "str",
                    "value": "skip_media",
                    "line": 297
                },
                {
                    "type": "str",
                    "value": "verbosity",
                    "line": 297
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 297
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 297
                },
                {
                    "type": "str",
                    "value": "skip_static",
                    "line": 298
                },
                {
                    "type": "str",
                    "value": "verbosity",
                    "line": 298
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 298
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 298
                },
                {
                    "type": "str",
                    "value": "skip_static",
                    "line": 299
                },
                {
                    "type": "str",
                    "value": "skip_media",
                    "line": 299
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 299
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 299
                },
                {
                    "type": "str",
                    "value": "skip_static",
                    "line": 301
                },
                {
                    "type": "str",
                    "value": "skip_media",
                    "line": 302
                },
                {
                    "type": "str",
                    "value": "verbosity",
                    "line": 303
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 301
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 302
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 303
                },
                {
                    "type": "str",
                    "value": "skip_static",
                    "line": 306
                },
                {
                    "type": "str",
                    "value": "skip_media",
                    "line": 307
                },
                {
                    "type": "str",
                    "value": "build_dir",
                    "line": 308
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 306
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 307
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 338
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 355
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 355
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 371
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 371
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 378
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 378
                },
                {
                    "type": "str",
                    "value": "static",
                    "line": 401
                },
                {
                    "type": "str",
                    "value": "build",
                    "line": 414
                },
                {
                    "type": "str",
                    "value": "publish",
                    "line": 415
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 437
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 437
                },
                {
                    "type": "int",
                    "value": 2016,
                    "line": 124
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 124
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 124
                },
                {
                    "type": "int",
                    "value": 2015,
                    "line": 125
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 125
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 125
                },
                {
                    "type": "int",
                    "value": 2014,
                    "line": 126
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 126
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 126
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 188
                },
                {
                    "type": "str",
                    "value": "slug",
                    "line": 193
                },
                {
                    "type": "str",
                    "value": "this_slug",
                    "line": 193
                },
                {
                    "type": "str",
                    "value": "./",
                    "line": 364
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 415
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 415
                },
                {
                    "type": "str",
                    "value": "This is test object %s",
                    "line": 435
                },
                {
                    "type": "str",
                    "value": "application/javascript",
                    "line": 408
                },
                {
                    "type": "str",
                    "value": "text/css",
                    "line": 409
                },
                {
                    "type": "str",
                    "value": "text/html",
                    "line": 410
                },
                {
                    "type": "str",
                    "value": "rb",
                    "line": 318
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 365
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 408
                },
                {
                    "type": "int",
                    "value": 100000,
                    "line": 408
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 409
                },
                {
                    "type": "int",
                    "value": 100000,
                    "line": 409
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 410
                },
                {
                    "type": "int",
                    "value": 100000,
                    "line": 410
                },
                {
                    "type": "str",
                    "value": "rb",
                    "line": 283
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\StackStorm\\st2contrib\\packs\\kubernetes\\sensors\\third_party_resource.py": {
        "vulnerabilities": [
            {
                "line": 31,
                "test_id": "B113",
                "test_name": "request_without_timeout",
                "severity": "MEDIUM",
                "confidence": "LOW",
                "context": "30                         KUBERNETES_API_URL)\n31         self.client = requests.get(KUBERNETES_API_URL, auth=HTTPBasicAuth(user, password),\n32                                    verify=verify, stream=True)\n33 \n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "ast",
                            "asname": null
                        }
                    ],
                    "line": 1
                },
                {
                    "names": [
                        {
                            "name": "json",
                            "asname": null
                        }
                    ],
                    "line": 2
                },
                {
                    "names": [
                        {
                            "name": "sys",
                            "asname": null
                        }
                    ],
                    "line": 3
                },
                {
                    "names": [
                        {
                            "name": "requests",
                            "asname": null
                        }
                    ],
                    "line": 5
                },
                {
                    "module": "requests.auth",
                    "names": [
                        {
                            "name": "HTTPBasicAuth",
                            "asname": null
                        }
                    ],
                    "line": 6
                },
                {
                    "module": "st2reactor.sensor.base",
                    "names": [
                        {
                            "name": "Sensor",
                            "asname": null
                        }
                    ],
                    "line": 8
                }
            ],
            "variables": [
                {
                    "name": "r",
                    "line": 36
                },
                {
                    "name": "lines",
                    "line": 37
                },
                {
                    "name": "k8s_object",
                    "line": 54
                },
                {
                    "name": "payload",
                    "line": 56
                },
                {
                    "name": "io",
                    "line": 61
                },
                {
                    "name": "n",
                    "line": 62
                },
                {
                    "name": "line",
                    "line": 63
                },
                {
                    "name": "payload",
                    "line": 88
                },
                {
                    "name": "extension",
                    "line": 21
                },
                {
                    "name": "KUBERNETES_API_URL",
                    "line": 22
                },
                {
                    "name": "user",
                    "line": 23
                },
                {
                    "name": "password",
                    "line": 24
                },
                {
                    "name": "verify",
                    "line": 25
                },
                {
                    "name": "resource_type",
                    "line": 69
                },
                {
                    "name": "object_kind",
                    "line": 70
                },
                {
                    "name": "name",
                    "line": 71
                },
                {
                    "name": "namespace",
                    "line": 72
                },
                {
                    "name": "uid",
                    "line": 73
                },
                {
                    "name": "labels_data",
                    "line": 74
                },
                {
                    "name": "payload",
                    "line": 81
                },
                {
                    "name": "trigger_payload",
                    "line": 43
                },
                {
                    "name": "msg",
                    "line": 76
                },
                {
                    "name": "msg",
                    "line": 45
                }
            ],
            "constants": [
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 12
                },
                {
                    "type": "str",
                    "value": "kubernetes.thirdpartyobject",
                    "line": 16
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 17
                },
                {
                    "type": "str",
                    "value": "Watch Kubernetes for thirdpartyresource information",
                    "line": 35
                },
                {
                    "type": "str",
                    "value": "Incoming k8s object (from API response): %s",
                    "line": 55
                },
                {
                    "type": "str",
                    "value": "resource",
                    "line": 89
                },
                {
                    "type": "str",
                    "value": "name",
                    "line": 90
                },
                {
                    "type": "str",
                    "value": "labels",
                    "line": 91
                },
                {
                    "type": "str",
                    "value": "namespace",
                    "line": 92
                },
                {
                    "type": "str",
                    "value": "object_kind",
                    "line": 93
                },
                {
                    "type": "str",
                    "value": "uid",
                    "line": 94
                },
                {
                    "type": "str",
                    "value": "extension_url",
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "user",
                    "line": 23
                },
                {
                    "type": "str",
                    "value": "password",
                    "line": 24
                },
                {
                    "type": "str",
                    "value": "verify",
                    "line": 25
                },
                {
                    "type": "str",
                    "value": "Connecting to Kubernetes endpoint %s via api_client.",
                    "line": 29
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 32
                },
                {
                    "type": "str",
                    "value": "type",
                    "line": 69
                },
                {
                    "type": "str",
                    "value": "kind",
                    "line": 70
                },
                {
                    "type": "str",
                    "value": "name",
                    "line": 71
                },
                {
                    "type": "str",
                    "value": "namespace",
                    "line": 72
                },
                {
                    "type": "str",
                    "value": "uid",
                    "line": 73
                },
                {
                    "type": "str",
                    "value": "labels",
                    "line": 74
                },
                {
                    "type": "str",
                    "value": "kubernetes_api_url",
                    "line": 22
                },
                {
                    "type": "str",
                    "value": "Configuration file does not contain required fields.",
                    "line": 27
                },
                {
                    "type": "str",
                    "value": "Triggering Dispatch Now",
                    "line": 50
                },
                {
                    "type": "str",
                    "value": "object",
                    "line": 70
                },
                {
                    "type": "str",
                    "value": "metadata",
                    "line": 71
                },
                {
                    "type": "str",
                    "value": "metadata",
                    "line": 72
                },
                {
                    "type": "str",
                    "value": "metadata",
                    "line": 73
                },
                {
                    "type": "str",
                    "value": "metadata",
                    "line": 74
                },
                {
                    "type": "str",
                    "value": "One of \"type\", \"kind\", \"name\", \"namespace\" or \"uid\" or \"labels\" ",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "Trigger payload: %s.",
                    "line": 84
                },
                {
                    "type": "str",
                    "value": "Failed generating trigger payload from line %s. Aborting sensor!!!",
                    "line": 45
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 48
                },
                {
                    "type": "str",
                    "value": "object",
                    "line": 71
                },
                {
                    "type": "str",
                    "value": "object",
                    "line": 72
                },
                {
                    "type": "str",
                    "value": "object",
                    "line": 73
                },
                {
                    "type": "str",
                    "value": "object",
                    "line": 74
                },
                {
                    "type": "str",
                    "value": "do not exist in the object. Incoming object=%s",
                    "line": 77
                }
            ],
            "calls": [
                {
                    "func": "super(ThirdPartyResource, self).__init__",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "sensor_service",
                            "value": "sensor_service"
                        },
                        {
                            "keyword": "config",
                            "value": "config"
                        }
                    ],
                    "line": 13
                },
                {
                    "func": "self._sensor_service.get_logger",
                    "args": [
                        "__name__"
                    ],
                    "keywords": [],
                    "line": 15
                },
                {
                    "func": "self._log.debug",
                    "args": [
                        "'Connecting to Kubernetes endpoint %s via api_client.' % KUBERNETES_API_URL"
                    ],
                    "keywords": [],
                    "line": 29
                },
                {
                    "func": "requests.get",
                    "args": [
                        "KUBERNETES_API_URL"
                    ],
                    "keywords": [
                        {
                            "keyword": "auth",
                            "value": "HTTPBasicAuth(user, password)"
                        },
                        {
                            "keyword": "verify",
                            "value": "verify"
                        },
                        {
                            "keyword": "stream",
                            "value": "True"
                        }
                    ],
                    "line": 31
                },
                {
                    "func": "self._log.debug",
                    "args": [
                        "'Watch Kubernetes for thirdpartyresource information'"
                    ],
                    "keywords": [],
                    "line": 35
                },
                {
                    "func": "r.iter_lines",
                    "args": [],
                    "keywords": [],
                    "line": 37
                },
                {
                    "func": "self._fix_utf8_enconding_and_eval",
                    "args": [
                        "line"
                    ],
                    "keywords": [],
                    "line": 54
                },
                {
                    "func": "self._log.debug",
                    "args": [
                        "'Incoming k8s object (from API response): %s'",
                        "k8s_object"
                    ],
                    "keywords": [],
                    "line": 55
                },
                {
                    "func": "self._k8s_object_to_st2_trigger",
                    "args": [
                        "k8s_object"
                    ],
                    "keywords": [],
                    "line": 56
                },
                {
                    "func": "json.dumps",
                    "args": [
                        "line"
                    ],
                    "keywords": [],
                    "line": 61
                },
                {
                    "func": "json.loads",
                    "args": [
                        "io"
                    ],
                    "keywords": [],
                    "line": 62
                },
                {
                    "func": "ast.literal_eval",
                    "args": [
                        "n"
                    ],
                    "keywords": [],
                    "line": 63
                },
                {
                    "func": "self._build_a_trigger",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "resource_type",
                            "value": "resource_type"
                        },
                        {
                            "keyword": "name",
                            "value": "name"
                        },
                        {
                            "keyword": "labels",
                            "value": "labels_data"
                        },
                        {
                            "keyword": "namespace",
                            "value": "namespace"
                        },
                        {
                            "keyword": "object_kind",
                            "value": "object_kind"
                        },
                        {
                            "keyword": "uid",
                            "value": "uid"
                        }
                    ],
                    "line": 81
                },
                {
                    "func": "self._log.debug",
                    "args": [
                        "'Trigger payload: %s.' % payload"
                    ],
                    "keywords": [],
                    "line": 84
                },
                {
                    "func": "super",
                    "args": [
                        "ThirdPartyResource",
                        "self"
                    ],
                    "keywords": [],
                    "line": 13
                },
                {
                    "func": "self._log.exception",
                    "args": [
                        "'Configuration file does not contain required fields.'"
                    ],
                    "keywords": [],
                    "line": 27
                },
                {
                    "func": "HTTPBasicAuth",
                    "args": [
                        "user",
                        "password"
                    ],
                    "keywords": [],
                    "line": 31
                },
                {
                    "func": "self._get_trigger_payload_from_line",
                    "args": [
                        "line"
                    ],
                    "keywords": [],
                    "line": 43
                },
                {
                    "func": "self._log.debug",
                    "args": [
                        "'Triggering Dispatch Now'"
                    ],
                    "keywords": [],
                    "line": 50
                },
                {
                    "func": "self._sensor_service.dispatch",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "trigger",
                            "value": "self.TRIGGER_REF"
                        },
                        {
                            "keyword": "payload",
                            "value": "trigger_payload"
                        }
                    ],
                    "line": 51
                },
                {
                    "func": "self._log.exception",
                    "args": [
                        "msg"
                    ],
                    "keywords": [],
                    "line": 78
                },
                {
                    "func": "self._log.exception",
                    "args": [
                        "msg"
                    ],
                    "keywords": [],
                    "line": 47
                },
                {
                    "func": "sys.exit",
                    "args": [
                        "1"
                    ],
                    "keywords": [],
                    "line": 48
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\Yelp\\pyleus\\setup.py": {
        "vulnerabilities": [
            {
                "line": 5,
                "test_id": "B404",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "4 import shutil\n5 import subprocess\n6 import sys\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "module": "distutils.command.bdist",
                    "names": [
                        {
                            "name": "bdist",
                            "asname": "_bdist"
                        }
                    ],
                    "line": 1
                },
                {
                    "module": "distutils.core",
                    "names": [
                        {
                            "name": "Command",
                            "asname": null
                        }
                    ],
                    "line": 2
                },
                {
                    "names": [
                        {
                            "name": "os",
                            "asname": null
                        }
                    ],
                    "line": 3
                },
                {
                    "names": [
                        {
                            "name": "shutil",
                            "asname": null
                        }
                    ],
                    "line": 4
                },
                {
                    "names": [
                        {
                            "name": "subprocess",
                            "asname": null
                        }
                    ],
                    "line": 5
                },
                {
                    "names": [
                        {
                            "name": "sys",
                            "asname": null
                        }
                    ],
                    "line": 6
                },
                {
                    "module": "setuptools",
                    "names": [
                        {
                            "name": "setup",
                            "asname": null
                        }
                    ],
                    "line": 8
                },
                {
                    "module": "setuptools.command.sdist",
                    "names": [
                        {
                            "name": "sdist",
                            "asname": "_sdist"
                        }
                    ],
                    "line": 9
                },
                {
                    "module": "pyleus",
                    "names": [
                        {
                            "name": "__version__",
                            "asname": null
                        }
                    ],
                    "line": 11
                },
                {
                    "module": "pyleus",
                    "names": [
                        {
                            "name": "BASE_JAR",
                            "asname": null
                        }
                    ],
                    "line": 12
                }
            ],
            "variables": [
                {
                    "name": "JAVA_SRC_DIR",
                    "line": 14
                },
                {
                    "name": "BASE_JAR_SRC",
                    "line": 15
                },
                {
                    "name": "BASE_JAR_DST",
                    "line": 16
                },
                {
                    "name": "extra_install_requires",
                    "line": 68
                },
                {
                    "name": "description",
                    "line": 21
                },
                {
                    "name": "user_options",
                    "line": 22
                },
                {
                    "name": "sub_commands",
                    "line": 43
                },
                {
                    "name": "sub_commands",
                    "line": 54
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "topology_builder/",
                    "line": 14
                },
                {
                    "type": "str",
                    "value": "dist",
                    "line": 15
                },
                {
                    "type": "str",
                    "value": "pyleus",
                    "line": 16
                },
                {
                    "type": "str",
                    "value": "Build the topology base JAR",
                    "line": 21
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 69
                },
                {
                    "type": "int",
                    "value": 7,
                    "line": 69
                },
                {
                    "type": "str",
                    "value": "argparse",
                    "line": 71
                },
                {
                    "type": "str",
                    "value": "pyleus",
                    "line": 75
                },
                {
                    "type": "str",
                    "value": "Patrick Lucas",
                    "line": 77
                },
                {
                    "type": "str",
                    "value": "plucas@yelp.com",
                    "line": 78
                },
                {
                    "type": "str",
                    "value": "Standard library and deployment tools for using Python with Storm",
                    "line": 79
                },
                {
                    "type": "str",
                    "value": "http://pyleus.org",
                    "line": 82
                },
                {
                    "type": "str",
                    "value": "build_java",
                    "line": 43
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 43
                },
                {
                    "type": "str",
                    "value": "build_java",
                    "line": 54
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 54
                },
                {
                    "type": "str",
                    "value": "README.rst",
                    "line": 64
                },
                {
                    "type": "str",
                    "value": "Programming Language :: Python",
                    "line": 84
                },
                {
                    "type": "str",
                    "value": "Programming Language :: Python :: 2.6",
                    "line": 85
                },
                {
                    "type": "str",
                    "value": "Programming Language :: Python :: 2.7",
                    "line": 86
                },
                {
                    "type": "str",
                    "value": "Operating System :: OS Independent",
                    "line": 87
                },
                {
                    "type": "str",
                    "value": "License :: OSI Approved :: Apache Software License",
                    "line": 88
                },
                {
                    "type": "str",
                    "value": "Intended Audience :: Developers",
                    "line": 89
                },
                {
                    "type": "str",
                    "value": "Topic :: Software Development :: Libraries",
                    "line": 90
                },
                {
                    "type": "str",
                    "value": "Topic :: System :: Distributed Computing",
                    "line": 91
                },
                {
                    "type": "str",
                    "value": "Development Status :: 4 - Beta",
                    "line": 92
                },
                {
                    "type": "str",
                    "value": "pyleus",
                    "line": 95
                },
                {
                    "type": "str",
                    "value": "pyleus.cli",
                    "line": 95
                },
                {
                    "type": "str",
                    "value": "pyleus.cli.commands",
                    "line": 95
                },
                {
                    "type": "str",
                    "value": "pyleus.storm",
                    "line": 96
                },
                {
                    "type": "str",
                    "value": "pyleus.storm.serializers",
                    "line": 96
                },
                {
                    "type": "str",
                    "value": "scripts/pyleus",
                    "line": 97
                },
                {
                    "type": "str",
                    "value": "pyleus",
                    "line": 104
                },
                {
                    "type": "str",
                    "value": "build_java",
                    "line": 106
                },
                {
                    "type": "str",
                    "value": "bdist",
                    "line": 107
                },
                {
                    "type": "str",
                    "value": "sdist",
                    "line": 108
                },
                {
                    "type": "str",
                    "value": "make",
                    "line": 31
                },
                {
                    "type": "str",
                    "value": "-C",
                    "line": 31
                },
                {
                    "type": "str",
                    "value": "PyYAML",
                    "line": 99
                },
                {
                    "type": "str",
                    "value": "msgpack-python",
                    "line": 100
                },
                {
                    "type": "str",
                    "value": "virtualenv",
                    "line": 101
                },
                {
                    "type": "str",
                    "value": "six",
                    "line": 102
                }
            ],
            "calls": [
                {
                    "func": "os.path.join",
                    "args": [
                        "JAVA_SRC_DIR",
                        "'dist'",
                        "BASE_JAR"
                    ],
                    "keywords": [],
                    "line": 15
                },
                {
                    "func": "os.path.join",
                    "args": [
                        "'pyleus'",
                        "BASE_JAR"
                    ],
                    "keywords": [],
                    "line": 16
                },
                {
                    "func": "setup",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "name",
                            "value": "'pyleus'"
                        },
                        {
                            "keyword": "version",
                            "value": "__version__"
                        },
                        {
                            "keyword": "author",
                            "value": "'Patrick Lucas'"
                        },
                        {
                            "keyword": "author_email",
                            "value": "'plucas@yelp.com'"
                        },
                        {
                            "keyword": "description",
                            "value": "'Standard library and deployment tools for using Python with Storm'"
                        },
                        {
                            "keyword": "long_description",
                            "value": "readme()"
                        },
                        {
                            "keyword": "url",
                            "value": "'http://pyleus.org'"
                        },
                        {
                            "keyword": "classifiers",
                            "value": "['Programming Language :: Python', 'Programming Language :: Python :: 2.6', 'Programming Language :: Python :: 2.7', 'Operating System :: OS Independent', 'License :: OSI Approved :: Apache Software License', 'Intended Audience :: Developers', 'Topic :: Software Development :: Libraries', 'Topic :: System :: Distributed Computing', 'Development Status :: 4 - Beta']"
                        },
                        {
                            "keyword": "packages",
                            "value": "['pyleus', 'pyleus.cli', 'pyleus.cli.commands', 'pyleus.storm', 'pyleus.storm.serializers']"
                        },
                        {
                            "keyword": "scripts",
                            "value": "['scripts/pyleus']"
                        },
                        {
                            "keyword": "install_requires",
                            "value": "['PyYAML', 'msgpack-python', 'virtualenv', 'six'] + extra_install_requires"
                        },
                        {
                            "keyword": "package_data",
                            "value": "{'pyleus': [BASE_JAR]}"
                        },
                        {
                            "keyword": "cmdclass",
                            "value": "{'build_java': build_java, 'bdist': bdist, 'sdist': sdist}"
                        }
                    ],
                    "line": 74
                },
                {
                    "func": "extra_install_requires.append",
                    "args": [
                        "'argparse'"
                    ],
                    "keywords": [],
                    "line": 71
                },
                {
                    "func": "subprocess.check_call",
                    "args": [
                        "['make', '-C', JAVA_SRC_DIR]"
                    ],
                    "keywords": [],
                    "line": 31
                },
                {
                    "func": "shutil.copy",
                    "args": [
                        "BASE_JAR_SRC",
                        "BASE_JAR_DST"
                    ],
                    "keywords": [],
                    "line": 34
                },
                {
                    "func": "self._make_jar",
                    "args": [],
                    "keywords": [],
                    "line": 37
                },
                {
                    "func": "self._copy_jar",
                    "args": [],
                    "keywords": [],
                    "line": 38
                },
                {
                    "func": "self.get_sub_commands",
                    "args": [],
                    "keywords": [],
                    "line": 46
                },
                {
                    "func": "_bdist.run",
                    "args": [
                        "self"
                    ],
                    "keywords": [],
                    "line": 49
                },
                {
                    "func": "self.get_sub_commands",
                    "args": [],
                    "keywords": [],
                    "line": 57
                },
                {
                    "func": "_sdist.run",
                    "args": [
                        "self"
                    ],
                    "keywords": [],
                    "line": 60
                },
                {
                    "func": "open",
                    "args": [
                        "'README.rst'"
                    ],
                    "keywords": [],
                    "line": 64
                },
                {
                    "func": "f.read",
                    "args": [],
                    "keywords": [],
                    "line": 65
                },
                {
                    "func": "readme",
                    "args": [],
                    "keywords": [],
                    "line": 81
                },
                {
                    "func": "self.run_command",
                    "args": [
                        "cmd_name"
                    ],
                    "keywords": [],
                    "line": 47
                },
                {
                    "func": "self.run_command",
                    "args": [
                        "cmd_name"
                    ],
                    "keywords": [],
                    "line": 58
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\mozilla\\kitsune\\kitsune\\forums\\tests\\test_templates.py": {
        "vulnerabilities": [
            {
                "line": 20,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "19 \n20         self.client.login(username=u.username, password='testpass')\n21         response = post(self.client, 'forums.reply', {'content': ''},\n"
            },
            {
                "line": 34,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "33 \n34         self.client.login(username=u.username, password='testpass')\n35         response = post(self.client, 'forums.edit_post',\n"
            },
            {
                "line": 49,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "48 \n49         self.client.login(username=u.username, password='testpass')\n50         res = get(self.client, 'forums.edit_post',\n"
            },
            {
                "line": 62,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "61 \n62         self.client.login(username=u.username, password='testpass')\n63         post(self.client, 'forums.edit_post', {'content': 'Some new content'},\n"
            },
            {
                "line": 104,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "103 \n104         self.client.login(username=moderator.username, password='testpass')\n105 \n"
            },
            {
                "line": 119,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "118         content = 'Full of awesome.'\n119         self.client.login(username=u.username, password='testpass')\n120         response = post(self.client, 'forums.reply',\n"
            },
            {
                "line": 133,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "132 \n133         self.client.login(username=u.username, password='testpass')\n134 \n"
            },
            {
                "line": 148,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "147 \n148         self.client.login(username=u.username, password='testpass')\n149         response = get(self.client, 'forums.posts', args=[t.forum.slug, t.pk])\n"
            },
            {
                "line": 162,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "161 \n162         self.client.login(username=u.username, password='testpass')\n163         response = get(self.client, 'forums.posts', args=[f.slug, t.pk])\n"
            },
            {
                "line": 196,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "195 \n196         self.client.login(username=u.username, password='testpass')\n197         response = post(\n"
            },
            {
                "line": 227,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "226 \n227         self.client.login(username=u.username, password='testpass')\n228         response = post(self.client, 'forums.new_thread',\n"
            },
            {
                "line": 240,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "239 \n240         self.client.login(username=u.username, password='testpass')\n241         response = post(self.client, 'forums.new_thread',\n"
            },
            {
                "line": 258,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "257 \n258         self.client.login(username=creator.username, password='testpass')\n259         response = post(self.client, 'forums.edit_thread',\n"
            },
            {
                "line": 273,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "272 \n273         self.client.login(username=creator.username, password='testpass')\n274         res = get(self.client, 'forums.edit_thread',\n"
            },
            {
                "line": 285,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "284 \n285         self.client.login(username=u.username, password='testpass')\n286 \n"
            },
            {
                "line": 308,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "307 \n308         self.client.login(username=u.username, password='testpass')\n309         response = get(self.client, 'forums.threads', args=[f.slug])\n"
            },
            {
                "line": 322,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "321 \n322         self.client.login(username=u.username, password='testpass')\n323         response = get(self.client, 'forums.threads', args=[f.slug])\n"
            },
            {
                "line": 404,
                "test_id": "B106",
                "test_name": "hardcoded_password_funcarg",
                "severity": "LOW",
                "confidence": "MEDIUM",
                "context": "403 \n404         self.client.login(username=u.username, password='testpass')\n405         content = 'Full of awesome.'\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "module": "django.contrib.contenttypes.models",
                    "names": [
                        {
                            "name": "ContentType",
                            "asname": null
                        }
                    ],
                    "line": 1
                },
                {
                    "module": "nose.tools",
                    "names": [
                        {
                            "name": "eq_",
                            "asname": null
                        }
                    ],
                    "line": 3
                },
                {
                    "module": "kitsune.access.tests",
                    "names": [
                        {
                            "name": "PermissionFactory",
                            "asname": null
                        }
                    ],
                    "line": 5
                },
                {
                    "module": "kitsune.forums.models",
                    "names": [
                        {
                            "name": "Post",
                            "asname": null
                        }
                    ],
                    "line": 6
                },
                {
                    "module": "kitsune.forums.tests",
                    "names": [
                        {
                            "name": "ForumTestCase",
                            "asname": null
                        },
                        {
                            "name": "ForumFactory",
                            "asname": null
                        },
                        {
                            "name": "ThreadFactory",
                            "asname": null
                        },
                        {
                            "name": "PostFactory",
                            "asname": null
                        }
                    ],
                    "line": 7
                },
                {
                    "module": "kitsune.sumo.tests",
                    "names": [
                        {
                            "name": "get",
                            "asname": null
                        },
                        {
                            "name": "post",
                            "asname": null
                        }
                    ],
                    "line": 8
                },
                {
                    "module": "kitsune.sumo.tests",
                    "names": [
                        {
                            "name": "SumoPyQuery",
                            "asname": "pq"
                        }
                    ],
                    "line": 9
                },
                {
                    "module": "kitsune.users.tests",
                    "names": [
                        {
                            "name": "UserFactory",
                            "asname": null
                        },
                        {
                            "name": "GroupFactory",
                            "asname": null
                        }
                    ],
                    "line": 10
                }
            ],
            "variables": [
                {
                    "name": "u",
                    "line": 17
                },
                {
                    "name": "t",
                    "line": 18
                },
                {
                    "name": "response",
                    "line": 21
                },
                {
                    "name": "doc",
                    "line": 24
                },
                {
                    "name": "error_msg",
                    "line": 25
                },
                {
                    "name": "p",
                    "line": 30
                },
                {
                    "name": "t",
                    "line": 31
                },
                {
                    "name": "u",
                    "line": 32
                },
                {
                    "name": "response",
                    "line": 35
                },
                {
                    "name": "doc",
                    "line": 38
                },
                {
                    "name": "errors",
                    "line": 39
                },
                {
                    "name": "p",
                    "line": 46
                },
                {
                    "name": "u",
                    "line": 47
                },
                {
                    "name": "res",
                    "line": 50
                },
                {
                    "name": "doc",
                    "line": 53
                },
                {
                    "name": "p",
                    "line": 58
                },
                {
                    "name": "t",
                    "line": 59
                },
                {
                    "name": "u",
                    "line": 60
                },
                {
                    "name": "edited_p",
                    "line": 65
                },
                {
                    "name": "t",
                    "line": 71
                },
                {
                    "name": "response",
                    "line": 73
                },
                {
                    "name": "t",
                    "line": 81
                },
                {
                    "name": "response",
                    "line": 84
                },
                {
                    "name": "doc",
                    "line": 85
                },
                {
                    "name": "crumb",
                    "line": 86
                },
                {
                    "name": "p",
                    "line": 91
                },
                {
                    "name": "t",
                    "line": 92
                },
                {
                    "name": "f",
                    "line": 93
                },
                {
                    "name": "moderator_group",
                    "line": 97
                },
                {
                    "name": "ct",
                    "line": 98
                },
                {
                    "name": "moderator",
                    "line": 101
                },
                {
                    "name": "r",
                    "line": 106
                },
                {
                    "name": "edited_p",
                    "line": 110
                },
                {
                    "name": "t",
                    "line": 115
                },
                {
                    "name": "u",
                    "line": 116
                },
                {
                    "name": "content",
                    "line": 118
                },
                {
                    "name": "response",
                    "line": 120
                },
                {
                    "name": "doc",
                    "line": 124
                },
                {
                    "name": "t",
                    "line": 130
                },
                {
                    "name": "u",
                    "line": 131
                },
                {
                    "name": "response",
                    "line": 135
                },
                {
                    "name": "response",
                    "line": 139
                },
                {
                    "name": "t",
                    "line": 145
                },
                {
                    "name": "u",
                    "line": 146
                },
                {
                    "name": "response",
                    "line": 149
                },
                {
                    "name": "t",
                    "line": 154
                },
                {
                    "name": "f",
                    "line": 155
                },
                {
                    "name": "ct",
                    "line": 156
                },
                {
                    "name": "u",
                    "line": 160
                },
                {
                    "name": "response",
                    "line": 163
                },
                {
                    "name": "p",
                    "line": 168
                },
                {
                    "name": "t",
                    "line": 169
                },
                {
                    "name": "f",
                    "line": 170
                },
                {
                    "name": "response",
                    "line": 172
                },
                {
                    "name": "doc",
                    "line": 173
                },
                {
                    "name": "t",
                    "line": 178
                },
                {
                    "name": "response",
                    "line": 180
                },
                {
                    "name": "response",
                    "line": 187
                },
                {
                    "name": "u",
                    "line": 193
                },
                {
                    "name": "t",
                    "line": 194
                },
                {
                    "name": "response",
                    "line": 197
                },
                {
                    "name": "doc",
                    "line": 203
                },
                {
                    "name": "t",
                    "line": 213
                },
                {
                    "name": "last",
                    "line": 214
                },
                {
                    "name": "response",
                    "line": 216
                },
                {
                    "name": "doc",
                    "line": 217
                },
                {
                    "name": "last_post_link",
                    "line": 218
                },
                {
                    "name": "href",
                    "line": 219
                },
                {
                    "name": "f",
                    "line": 224
                },
                {
                    "name": "u",
                    "line": 225
                },
                {
                    "name": "response",
                    "line": 228
                },
                {
                    "name": "doc",
                    "line": 230
                },
                {
                    "name": "errors",
                    "line": 231
                },
                {
                    "name": "f",
                    "line": 237
                },
                {
                    "name": "u",
                    "line": 238
                },
                {
                    "name": "response",
                    "line": 241
                },
                {
                    "name": "doc",
                    "line": 244
                },
                {
                    "name": "errors",
                    "line": 245
                },
                {
                    "name": "t",
                    "line": 255
                },
                {
                    "name": "creator",
                    "line": 256
                },
                {
                    "name": "response",
                    "line": 259
                },
                {
                    "name": "doc",
                    "line": 262
                },
                {
                    "name": "errors",
                    "line": 263
                },
                {
                    "name": "t",
                    "line": 270
                },
                {
                    "name": "creator",
                    "line": 271
                },
                {
                    "name": "res",
                    "line": 274
                },
                {
                    "name": "doc",
                    "line": 277
                },
                {
                    "name": "f",
                    "line": 282
                },
                {
                    "name": "u",
                    "line": 283
                },
                {
                    "name": "response",
                    "line": 287
                },
                {
                    "name": "response",
                    "line": 291
                },
                {
                    "name": "f",
                    "line": 297
                },
                {
                    "name": "response",
                    "line": 299
                },
                {
                    "name": "f",
                    "line": 305
                },
                {
                    "name": "u",
                    "line": 306
                },
                {
                    "name": "response",
                    "line": 309
                },
                {
                    "name": "f",
                    "line": 315
                },
                {
                    "name": "ct",
                    "line": 316
                },
                {
                    "name": "u",
                    "line": 320
                },
                {
                    "name": "response",
                    "line": 323
                },
                {
                    "name": "p",
                    "line": 332
                },
                {
                    "name": "response",
                    "line": 334
                },
                {
                    "name": "doc",
                    "line": 335
                },
                {
                    "name": "last_post_link",
                    "line": 336
                },
                {
                    "name": "href",
                    "line": 337
                },
                {
                    "name": "restricted_forum",
                    "line": 342
                },
                {
                    "name": "ct",
                    "line": 344
                },
                {
                    "name": "response",
                    "line": 348
                },
                {
                    "name": "response",
                    "line": 352
                },
                {
                    "name": "forum1",
                    "line": 358
                },
                {
                    "name": "forum2",
                    "line": 359
                },
                {
                    "name": "r",
                    "line": 362
                },
                {
                    "name": "doc",
                    "line": 364
                },
                {
                    "name": "r",
                    "line": 371
                },
                {
                    "name": "doc",
                    "line": 373
                },
                {
                    "name": "forum1",
                    "line": 378
                },
                {
                    "name": "forum2",
                    "line": 379
                },
                {
                    "name": "r",
                    "line": 382
                },
                {
                    "name": "doc",
                    "line": 384
                },
                {
                    "name": "r",
                    "line": 391
                },
                {
                    "name": "doc",
                    "line": 393
                },
                {
                    "name": "f",
                    "line": 401
                },
                {
                    "name": "u",
                    "line": 402
                },
                {
                    "name": "content",
                    "line": 405
                },
                {
                    "name": "response",
                    "line": 406
                },
                {
                    "name": "doc",
                    "line": 410
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "Posting an empty reply shows errors.",
                    "line": 16
                },
                {
                    "type": "str",
                    "value": "Changing post content works.",
                    "line": 29
                },
                {
                    "type": "str",
                    "value": "The edit-post template should render.",
                    "line": 45
                },
                {
                    "type": "str",
                    "value": "Changing post content works.",
                    "line": 57
                },
                {
                    "type": "str",
                    "value": "Posts render for [fr] locale.",
                    "line": 70
                },
                {
                    "type": "str",
                    "value": "A very long thread title gets truncated in the breadcrumbs",
                    "line": 80
                },
                {
                    "type": "str",
                    "value": "Editing post as a moderator works.",
                    "line": 90
                },
                {
                    "type": "str",
                    "value": "Preview a reply.",
                    "line": 114
                },
                {
                    "type": "str",
                    "value": "Full of awesome.",
                    "line": 118
                },
                {
                    "type": "str",
                    "value": "Watch and unwatch a thread.",
                    "line": 129
                },
                {
                    "type": "str",
                    "value": "Reply fields show if user has permission to post.",
                    "line": 144
                },
                {
                    "type": "str",
                    "value": "Reply fields don't show if user has no permission to post.",
                    "line": 153
                },
                {
                    "type": "str",
                    "value": "Links posted should have rel=nofollow.",
                    "line": 167
                },
                {
                    "type": "str",
                    "value": "Verify the number of replies label.",
                    "line": 177
                },
                {
                    "type": "str",
                    "value": "Verify youtube video embedding.",
                    "line": 192
                },
                {
                    "type": "str",
                    "value": "Make sure the last post url links to the last post (#post-<id>).\n        ",
                    "line": 211
                },
                {
                    "type": "str",
                    "value": "Posting an empty thread shows errors.",
                    "line": 223
                },
                {
                    "type": "str",
                    "value": "Posting a short new thread shows errors.",
                    "line": 236
                },
                {
                    "type": "str",
                    "value": "Editing thread with too short of a title shows errors.",
                    "line": 254
                },
                {
                    "type": "str",
                    "value": "The edit-thread template should render.",
                    "line": 269
                },
                {
                    "type": "str",
                    "value": "Watch and unwatch a forum.",
                    "line": 281
                },
                {
                    "type": "str",
                    "value": "Verify the canonical URL is set correctly.",
                    "line": 296
                },
                {
                    "type": "str",
                    "value": "'Post new thread' shows if user has permission to post.",
                    "line": 304
                },
                {
                    "type": "str",
                    "value": "'Post new thread' doesn't show if user has no permission to post.\n        ",
                    "line": 313
                },
                {
                    "type": "str",
                    "value": "Make sure the last post url links to the last post (#post-<id>).\n        ",
                    "line": 330
                },
                {
                    "type": "str",
                    "value": "Forums with restricted view_in permission shouldn't show up.",
                    "line": 341
                },
                {
                    "type": "str",
                    "value": "Verify the display_order is respected.",
                    "line": 357
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 367
                },
                {
                    "type": "str",
                    "value": "Verify is_listed is respected.",
                    "line": 377
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 387
                },
                {
                    "type": "str",
                    "value": "Preview the thread post.",
                    "line": 400
                },
                {
                    "type": "str",
                    "value": "Full of awesome.",
                    "line": 405
                },
                {
                    "type": "str",
                    "value": "forums.reply",
                    "line": 21
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 25
                },
                {
                    "type": "str",
                    "value": "Please provide a message.",
                    "line": 26
                },
                {
                    "type": "str",
                    "value": "forums.edit_post",
                    "line": 35
                },
                {
                    "type": "str",
                    "value": "ul.errorlist li a",
                    "line": 39
                },
                {
                    "type": "str",
                    "value": "forums.edit_post",
                    "line": 50
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 54
                },
                {
                    "type": "str",
                    "value": "forums.edit_post",
                    "line": 63
                },
                {
                    "type": "str",
                    "value": "Some new content",
                    "line": 67
                },
                {
                    "type": "str",
                    "value": "forums.posts",
                    "line": 73
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 75
                },
                {
                    "type": "str",
                    "value": "forums.posts",
                    "line": 84
                },
                {
                    "type": "str",
                    "value": "#breadcrumbs li:last-child",
                    "line": 86
                },
                {
                    "type": "str",
                    "value": "A thread with a very very very very ...",
                    "line": 87
                },
                {
                    "type": "str",
                    "value": "forums.edit_post",
                    "line": 106
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 108
                },
                {
                    "type": "str",
                    "value": "More new content",
                    "line": 111
                },
                {
                    "type": "str",
                    "value": "forums.reply",
                    "line": 120
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 123
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 126
                },
                {
                    "type": "str",
                    "value": "forums.watch_thread",
                    "line": 135
                },
                {
                    "type": "str",
                    "value": "Stop watching this thread",
                    "line": 137
                },
                {
                    "type": "str",
                    "value": "forums.watch_thread",
                    "line": 139
                },
                {
                    "type": "str",
                    "value": "Stop watching this thread",
                    "line": 141
                },
                {
                    "type": "str",
                    "value": "forums.posts",
                    "line": 149
                },
                {
                    "type": "str",
                    "value": "thread-reply",
                    "line": 150
                },
                {
                    "type": "str",
                    "value": "forums.posts",
                    "line": 163
                },
                {
                    "type": "str",
                    "value": "thread-reply",
                    "line": 164
                },
                {
                    "type": "str",
                    "value": "forums.posts",
                    "line": 172
                },
                {
                    "type": "str",
                    "value": "nofollow",
                    "line": 174
                },
                {
                    "type": "str",
                    "value": "forums.posts",
                    "line": 180
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 181
                },
                {
                    "type": "str",
                    "value": "0 Replies",
                    "line": 182
                },
                {
                    "type": "str",
                    "value": "forums.posts",
                    "line": 187
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 188
                },
                {
                    "type": "str",
                    "value": "2 Replies",
                    "line": 189
                },
                {
                    "type": "str",
                    "value": "forums.reply",
                    "line": 199
                },
                {
                    "type": "str",
                    "value": "//www.youtube.com/embed/oHg5SJYRHA0",
                    "line": 205
                },
                {
                    "type": "str",
                    "value": "forums.threads",
                    "line": 216
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 218
                },
                {
                    "type": "str",
                    "value": "href",
                    "line": 219
                },
                {
                    "type": "str",
                    "value": "forums.new_thread",
                    "line": 228
                },
                {
                    "type": "str",
                    "value": "ul.errorlist li a",
                    "line": 231
                },
                {
                    "type": "str",
                    "value": "Please provide a title.",
                    "line": 232
                },
                {
                    "type": "str",
                    "value": "Please provide a message.",
                    "line": 233
                },
                {
                    "type": "str",
                    "value": "forums.new_thread",
                    "line": 241
                },
                {
                    "type": "str",
                    "value": "ul.errorlist li a",
                    "line": 245
                },
                {
                    "type": "str",
                    "value": "forums.edit_thread",
                    "line": 259
                },
                {
                    "type": "str",
                    "value": "ul.errorlist li a",
                    "line": 263
                },
                {
                    "type": "str",
                    "value": "forums.edit_thread",
                    "line": 274
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 278
                },
                {
                    "type": "str",
                    "value": "forums.watch_forum",
                    "line": 287
                },
                {
                    "type": "str",
                    "value": "Stop watching this forum",
                    "line": 289
                },
                {
                    "type": "str",
                    "value": "forums.watch_forum",
                    "line": 291
                },
                {
                    "type": "str",
                    "value": "Stop watching this forum",
                    "line": 293
                },
                {
                    "type": "str",
                    "value": "forums.threads",
                    "line": 299
                },
                {
                    "type": "str",
                    "value": "forums.threads",
                    "line": 309
                },
                {
                    "type": "str",
                    "value": "Post a new thread",
                    "line": 310
                },
                {
                    "type": "str",
                    "value": "forums.threads",
                    "line": 323
                },
                {
                    "type": "str",
                    "value": "Post a new thread",
                    "line": 324
                },
                {
                    "type": "str",
                    "value": "forums.forums",
                    "line": 334
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 336
                },
                {
                    "type": "str",
                    "value": "href",
                    "line": 337
                },
                {
                    "type": "str",
                    "value": "forums.forums",
                    "line": 348
                },
                {
                    "type": "str",
                    "value": "forums.forums",
                    "line": 352
                },
                {
                    "type": "str",
                    "value": "/forums",
                    "line": 353
                },
                {
                    "type": "str",
                    "value": "forums.forums",
                    "line": 362
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 363
                },
                {
                    "type": "str",
                    "value": "forums.forums",
                    "line": 371
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 372
                },
                {
                    "type": "str",
                    "value": "forums.forums",
                    "line": 382
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 383
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 385
                },
                {
                    "type": "str",
                    "value": "forums.forums",
                    "line": 391
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 392
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 394
                },
                {
                    "type": "str",
                    "value": "forums.new_thread",
                    "line": 406
                },
                {
                    "type": "int",
                    "value": 200,
                    "line": 409
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 412
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 20
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "ul.errorlist li a",
                    "line": 25
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 34
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 36
                },
                {
                    "type": "str",
                    "value": "wha?",
                    "line": 36
                },
                {
                    "type": "str",
                    "value": "Your message is too short (4 characters). ",
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "It must be at least 5 characters.",
                    "line": 42
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 49
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 62
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 63
                },
                {
                    "type": "str",
                    "value": "Some new content",
                    "line": 63
                },
                {
                    "type": "str",
                    "value": "fr",
                    "line": 74
                },
                {
                    "type": "str",
                    "value": "href",
                    "line": 77
                },
                {
                    "type": "str",
                    "value": "A thread with a very very very very long title",
                    "line": 81
                },
                {
                    "type": "str",
                    "value": "forums_forum.post_edit_forum",
                    "line": 99
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 104
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 107
                },
                {
                    "type": "str",
                    "value": "More new content",
                    "line": 107
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 119
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 121
                },
                {
                    "type": "str",
                    "value": "preview",
                    "line": 121
                },
                {
                    "type": "str",
                    "value": "any string",
                    "line": 121
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 133
                },
                {
                    "type": "str",
                    "value": "watch",
                    "line": 135
                },
                {
                    "type": "str",
                    "value": "yes",
                    "line": 135
                },
                {
                    "type": "str",
                    "value": "watch",
                    "line": 139
                },
                {
                    "type": "str",
                    "value": "no",
                    "line": 139
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 148
                },
                {
                    "type": "str",
                    "value": "forums_forum.post_in_forum",
                    "line": 159
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 162
                },
                {
                    "type": "str",
                    "value": "linking http://test.org",
                    "line": 168
                },
                {
                    "type": "str",
                    "value": "rel",
                    "line": 174
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 196
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 200
                },
                {
                    "type": "str",
                    "value": "[[V:http://www.youtube.com/watch?v=oHg5SJYRHA0]]",
                    "line": 200
                },
                {
                    "type": "str",
                    "value": "ol.threads div.last-post a:not(.username)",
                    "line": 218
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 220
                },
                {
                    "type": "str",
                    "value": "post-%s",
                    "line": 220
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 227
                },
                {
                    "type": "str",
                    "value": "title",
                    "line": 229
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 229
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 229
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 229
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 240
                },
                {
                    "type": "str",
                    "value": "title",
                    "line": 242
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 242
                },
                {
                    "type": "str",
                    "value": "wha?",
                    "line": 242
                },
                {
                    "type": "str",
                    "value": "wha?",
                    "line": 242
                },
                {
                    "type": "str",
                    "value": "Your title is too short (4 characters). ",
                    "line": 247
                },
                {
                    "type": "str",
                    "value": "It must be at least 5 characters.",
                    "line": 248
                },
                {
                    "type": "str",
                    "value": "Your message is too short (4 characters). ",
                    "line": 250
                },
                {
                    "type": "str",
                    "value": "It must be at least 5 characters.",
                    "line": 251
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 258
                },
                {
                    "type": "str",
                    "value": "title",
                    "line": 260
                },
                {
                    "type": "str",
                    "value": "wha?",
                    "line": 260
                },
                {
                    "type": "str",
                    "value": "Your title is too short (4 characters). ",
                    "line": 265
                },
                {
                    "type": "str",
                    "value": "It must be at least 5 characters.",
                    "line": 266
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 273
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 285
                },
                {
                    "type": "str",
                    "value": "watch",
                    "line": 287
                },
                {
                    "type": "str",
                    "value": "yes",
                    "line": 287
                },
                {
                    "type": "str",
                    "value": "watch",
                    "line": 291
                },
                {
                    "type": "str",
                    "value": "no",
                    "line": 291
                },
                {
                    "type": "str",
                    "value": "/forums/%s",
                    "line": 300
                },
                {
                    "type": "str",
                    "value": "href",
                    "line": 301
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 308
                },
                {
                    "type": "str",
                    "value": "forums_forum.post_in_forum",
                    "line": 319
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 322
                },
                {
                    "type": "str",
                    "value": "ol.forums div.last-post a:not(.username)",
                    "line": 336
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 338
                },
                {
                    "type": "str",
                    "value": "post-%s",
                    "line": 338
                },
                {
                    "type": "str",
                    "value": "forums_forum.view_in_forum",
                    "line": 345
                },
                {
                    "type": "str",
                    "value": "href",
                    "line": 354
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 358
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 359
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 378
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 379
                },
                {
                    "type": "str",
                    "value": "testpass",
                    "line": 404
                },
                {
                    "type": "str",
                    "value": "title",
                    "line": 407
                },
                {
                    "type": "str",
                    "value": "content",
                    "line": 407
                },
                {
                    "type": "str",
                    "value": "preview",
                    "line": 408
                },
                {
                    "type": "str",
                    "value": "Topic",
                    "line": 407
                },
                {
                    "type": "str",
                    "value": "any string",
                    "line": 408
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 40
                },
                {
                    "type": "str",
                    "value": "form.edit-post",
                    "line": 54
                },
                {
                    "type": "str",
                    "value": "/forums/{f}/{t}",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "src",
                    "line": 204
                },
                {
                    "type": "str",
                    "value": "#",
                    "line": 220
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 232
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 233
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 246
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 249
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 264
                },
                {
                    "type": "str",
                    "value": "form.edit-thread",
                    "line": 278
                },
                {
                    "type": "str",
                    "value": "#",
                    "line": 338
                },
                {
                    "type": "str",
                    "value": "ol.forums > li",
                    "line": 385
                },
                {
                    "type": "str",
                    "value": "ol.forums > li",
                    "line": 394
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 77
                },
                {
                    "type": "str",
                    "value": "#post-preview div.content",
                    "line": 125
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 174
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 301
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 354
                },
                {
                    "type": "str",
                    "value": "ol.forums > li a",
                    "line": 395
                },
                {
                    "type": "str",
                    "value": "#post-preview div.content",
                    "line": 411
                },
                {
                    "type": "str",
                    "value": "link[rel=\"canonical\"]",
                    "line": 77
                },
                {
                    "type": "str",
                    "value": "ol.posts div.content a",
                    "line": 174
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 204
                },
                {
                    "type": "str",
                    "value": "link[rel=\"canonical\"]",
                    "line": 301
                },
                {
                    "type": "str",
                    "value": "link[rel=\"canonical\"]",
                    "line": 354
                },
                {
                    "type": "str",
                    "value": "iframe",
                    "line": 204
                },
                {
                    "type": "str",
                    "value": "ol.forums > li a",
                    "line": 365
                },
                {
                    "type": "str",
                    "value": "ol.forums > li a",
                    "line": 374
                }
            ],
            "calls": [
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 17
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 18
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 20
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.reply'",
                        "{'content': ''}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 21
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 24
                },
                {
                    "func": "eq_",
                    "args": [
                        "error_msg.text",
                        "'Please provide a message.'"
                    ],
                    "keywords": [],
                    "line": 26
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [],
                    "line": 30
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 34
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.edit_post'",
                        "{'content': 'wha?'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id, p.id]"
                        }
                    ],
                    "line": 35
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 38
                },
                {
                    "func": "doc",
                    "args": [
                        "'ul.errorlist li a'"
                    ],
                    "keywords": [],
                    "line": 39
                },
                {
                    "func": "eq_",
                    "args": [
                        "errors[0].text",
                        "'Your message is too short (4 characters). ' + 'It must be at least 5 characters.'"
                    ],
                    "keywords": [],
                    "line": 40
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [],
                    "line": 46
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 49
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.edit_post'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[p.thread.forum.slug, p.thread.id, p.id]"
                        }
                    ],
                    "line": 50
                },
                {
                    "func": "pq",
                    "args": [
                        "res.content"
                    ],
                    "keywords": [],
                    "line": 53
                },
                {
                    "func": "eq_",
                    "args": [
                        "len(doc('form.edit-post'))",
                        "1"
                    ],
                    "keywords": [],
                    "line": 54
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [],
                    "line": 58
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 62
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.edit_post'",
                        "{'content': 'Some new content'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id, p.id]"
                        }
                    ],
                    "line": 63
                },
                {
                    "func": "Post.objects.get",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "id",
                            "value": "p.id"
                        }
                    ],
                    "line": 65
                },
                {
                    "func": "eq_",
                    "args": [
                        "'Some new content'",
                        "edited_p.content"
                    ],
                    "keywords": [],
                    "line": 67
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 71
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.posts'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        },
                        {
                            "keyword": "locale",
                            "value": "'fr'"
                        }
                    ],
                    "line": 73
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "response.status_code"
                    ],
                    "keywords": [],
                    "line": 75
                },
                {
                    "func": "eq_",
                    "args": [
                        "'/forums/{f}/{t}'.format(f=t.forum.slug, t=t.id)",
                        "pq(response.content)('link[rel=\"canonical\"]')[0].attrib['href']"
                    ],
                    "keywords": [],
                    "line": 76
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "title",
                            "value": "'A thread with a very very very very long title'"
                        }
                    ],
                    "line": 81
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "thread",
                            "value": "t"
                        }
                    ],
                    "line": 82
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.posts'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 84
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 85
                },
                {
                    "func": "doc",
                    "args": [
                        "'#breadcrumbs li:last-child'"
                    ],
                    "keywords": [],
                    "line": 86
                },
                {
                    "func": "eq_",
                    "args": [
                        "crumb.text()",
                        "'A thread with a very very very very ...'"
                    ],
                    "keywords": [],
                    "line": 87
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [],
                    "line": 91
                },
                {
                    "func": "GroupFactory",
                    "args": [],
                    "keywords": [],
                    "line": 97
                },
                {
                    "func": "ContentType.objects.get_for_model",
                    "args": [
                        "f"
                    ],
                    "keywords": [],
                    "line": 98
                },
                {
                    "func": "PermissionFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "codename",
                            "value": "'forums_forum.post_edit_forum'"
                        },
                        {
                            "keyword": "content_type",
                            "value": "ct"
                        },
                        {
                            "keyword": "object_id",
                            "value": "f.id"
                        },
                        {
                            "keyword": "group",
                            "value": "moderator_group"
                        }
                    ],
                    "line": 99
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 101
                },
                {
                    "func": "moderator_group.user_set.add",
                    "args": [
                        "moderator"
                    ],
                    "keywords": [],
                    "line": 102
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "moderator.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 104
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.edit_post'",
                        "{'content': 'More new content'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug, t.id, p.id]"
                        }
                    ],
                    "line": 106
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "r.status_code"
                    ],
                    "keywords": [],
                    "line": 108
                },
                {
                    "func": "Post.objects.get",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "pk",
                            "value": "p.pk"
                        }
                    ],
                    "line": 110
                },
                {
                    "func": "eq_",
                    "args": [
                        "'More new content'",
                        "edited_p.content"
                    ],
                    "keywords": [],
                    "line": 111
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 115
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 119
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.reply'",
                        "{'content': content, 'preview': 'any string'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 120
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "response.status_code"
                    ],
                    "keywords": [],
                    "line": 123
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 124
                },
                {
                    "func": "eq_",
                    "args": [
                        "content",
                        "doc('#post-preview div.content').text()"
                    ],
                    "keywords": [],
                    "line": 125
                },
                {
                    "func": "eq_",
                    "args": [
                        "1",
                        "t.post_set.count()"
                    ],
                    "keywords": [],
                    "line": 126
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 130
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 131
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 133
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.watch_thread'",
                        "{'watch': 'yes'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 135
                },
                {
                    "func": "self.assertContains",
                    "args": [
                        "response",
                        "'Stop watching this thread'"
                    ],
                    "keywords": [],
                    "line": 137
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.watch_thread'",
                        "{'watch': 'no'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 139
                },
                {
                    "func": "self.assertNotContains",
                    "args": [
                        "response",
                        "'Stop watching this thread'"
                    ],
                    "keywords": [],
                    "line": 141
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 145
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 146
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 148
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.posts'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.pk]"
                        }
                    ],
                    "line": 149
                },
                {
                    "func": "self.assertContains",
                    "args": [
                        "response",
                        "'thread-reply'"
                    ],
                    "keywords": [],
                    "line": 150
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 154
                },
                {
                    "func": "ContentType.objects.get_for_model",
                    "args": [
                        "f"
                    ],
                    "keywords": [],
                    "line": 156
                },
                {
                    "func": "PermissionFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "codename",
                            "value": "'forums_forum.post_in_forum'"
                        },
                        {
                            "keyword": "content_type",
                            "value": "ct"
                        },
                        {
                            "keyword": "object_id",
                            "value": "f.id"
                        }
                    ],
                    "line": 159
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 160
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 162
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.posts'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug, t.pk]"
                        }
                    ],
                    "line": 163
                },
                {
                    "func": "self.assertNotContains",
                    "args": [
                        "response",
                        "'thread-reply'"
                    ],
                    "keywords": [],
                    "line": 164
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "content",
                            "value": "'linking http://test.org'"
                        }
                    ],
                    "line": 168
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.posts'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug, t.pk]"
                        }
                    ],
                    "line": 172
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 173
                },
                {
                    "func": "eq_",
                    "args": [
                        "'nofollow'",
                        "doc('ol.posts div.content a')[0].attrib['rel']"
                    ],
                    "keywords": [],
                    "line": 174
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 178
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.posts'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 180
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "response.status_code"
                    ],
                    "keywords": [],
                    "line": 181
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "thread",
                            "value": "t"
                        }
                    ],
                    "line": 184
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "thread",
                            "value": "t"
                        }
                    ],
                    "line": 185
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.posts'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 187
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "response.status_code"
                    ],
                    "keywords": [],
                    "line": 188
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 193
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 194
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 196
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.reply'",
                        "{'content': '[[V:http://www.youtube.com/watch?v=oHg5SJYRHA0]]'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 197
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 203
                },
                {
                    "func": "doc('iframe')[0].attrib['src'].startswith",
                    "args": [
                        "'//www.youtube.com/embed/oHg5SJYRHA0'"
                    ],
                    "keywords": [],
                    "line": 204
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 213
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "thread",
                            "value": "t"
                        }
                    ],
                    "line": 214
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.threads'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug]"
                        }
                    ],
                    "line": 216
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 217
                },
                {
                    "func": "eq_",
                    "args": [
                        "href.split('#')[1]",
                        "'post-%s' % last.id"
                    ],
                    "keywords": [],
                    "line": 220
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [],
                    "line": 224
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 225
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 227
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.new_thread'",
                        "{'title': '', 'content': ''}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug]"
                        }
                    ],
                    "line": 228
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 230
                },
                {
                    "func": "doc",
                    "args": [
                        "'ul.errorlist li a'"
                    ],
                    "keywords": [],
                    "line": 231
                },
                {
                    "func": "eq_",
                    "args": [
                        "errors[0].text",
                        "'Please provide a title.'"
                    ],
                    "keywords": [],
                    "line": 232
                },
                {
                    "func": "eq_",
                    "args": [
                        "errors[1].text",
                        "'Please provide a message.'"
                    ],
                    "keywords": [],
                    "line": 233
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [],
                    "line": 237
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 238
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 240
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.new_thread'",
                        "{'title': 'wha?', 'content': 'wha?'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug]"
                        }
                    ],
                    "line": 241
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 244
                },
                {
                    "func": "doc",
                    "args": [
                        "'ul.errorlist li a'"
                    ],
                    "keywords": [],
                    "line": 245
                },
                {
                    "func": "eq_",
                    "args": [
                        "errors[0].text",
                        "'Your title is too short (4 characters). ' + 'It must be at least 5 characters.'"
                    ],
                    "keywords": [],
                    "line": 246
                },
                {
                    "func": "eq_",
                    "args": [
                        "errors[1].text",
                        "'Your message is too short (4 characters). ' + 'It must be at least 5 characters.'"
                    ],
                    "keywords": [],
                    "line": 249
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 255
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "creator.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 258
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.edit_thread'",
                        "{'title': 'wha?'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 259
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 262
                },
                {
                    "func": "doc",
                    "args": [
                        "'ul.errorlist li a'"
                    ],
                    "keywords": [],
                    "line": 263
                },
                {
                    "func": "eq_",
                    "args": [
                        "errors[0].text",
                        "'Your title is too short (4 characters). ' + 'It must be at least 5 characters.'"
                    ],
                    "keywords": [],
                    "line": 264
                },
                {
                    "func": "ThreadFactory",
                    "args": [],
                    "keywords": [],
                    "line": 270
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "creator.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 273
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.edit_thread'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[t.forum.slug, t.id]"
                        }
                    ],
                    "line": 274
                },
                {
                    "func": "pq",
                    "args": [
                        "res.content"
                    ],
                    "keywords": [],
                    "line": 277
                },
                {
                    "func": "eq_",
                    "args": [
                        "len(doc('form.edit-thread'))",
                        "1"
                    ],
                    "keywords": [],
                    "line": 278
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [],
                    "line": 282
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 283
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 285
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.watch_forum'",
                        "{'watch': 'yes'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug]"
                        }
                    ],
                    "line": 287
                },
                {
                    "func": "self.assertContains",
                    "args": [
                        "response",
                        "'Stop watching this forum'"
                    ],
                    "keywords": [],
                    "line": 289
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.watch_forum'",
                        "{'watch': 'no'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug]"
                        }
                    ],
                    "line": 291
                },
                {
                    "func": "self.assertNotContains",
                    "args": [
                        "response",
                        "'Stop watching this forum'"
                    ],
                    "keywords": [],
                    "line": 293
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [],
                    "line": 297
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.threads'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug]"
                        }
                    ],
                    "line": 299
                },
                {
                    "func": "eq_",
                    "args": [
                        "'/forums/%s' % f.slug",
                        "pq(response.content)('link[rel=\"canonical\"]')[0].attrib['href']"
                    ],
                    "keywords": [],
                    "line": 300
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [],
                    "line": 305
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 306
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 308
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.threads'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug]"
                        }
                    ],
                    "line": 309
                },
                {
                    "func": "self.assertContains",
                    "args": [
                        "response",
                        "'Post a new thread'"
                    ],
                    "keywords": [],
                    "line": 310
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [],
                    "line": 315
                },
                {
                    "func": "ContentType.objects.get_for_model",
                    "args": [
                        "f"
                    ],
                    "keywords": [],
                    "line": 316
                },
                {
                    "func": "PermissionFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "codename",
                            "value": "'forums_forum.post_in_forum'"
                        },
                        {
                            "keyword": "content_type",
                            "value": "ct"
                        },
                        {
                            "keyword": "object_id",
                            "value": "f.id"
                        }
                    ],
                    "line": 319
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 320
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 322
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.threads'"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug]"
                        }
                    ],
                    "line": 323
                },
                {
                    "func": "self.assertNotContains",
                    "args": [
                        "response",
                        "'Post a new thread'"
                    ],
                    "keywords": [],
                    "line": 324
                },
                {
                    "func": "PostFactory",
                    "args": [],
                    "keywords": [],
                    "line": 332
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.forums'"
                    ],
                    "keywords": [],
                    "line": 334
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 335
                },
                {
                    "func": "eq_",
                    "args": [
                        "href.split('#')[1]",
                        "'post-%s' % p.id"
                    ],
                    "keywords": [],
                    "line": 338
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [],
                    "line": 342
                },
                {
                    "func": "ContentType.objects.get_for_model",
                    "args": [
                        "restricted_forum"
                    ],
                    "keywords": [],
                    "line": 344
                },
                {
                    "func": "PermissionFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "codename",
                            "value": "'forums_forum.view_in_forum'"
                        },
                        {
                            "keyword": "content_type",
                            "value": "ct"
                        },
                        {
                            "keyword": "object_id",
                            "value": "restricted_forum.id"
                        }
                    ],
                    "line": 345
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.forums'"
                    ],
                    "keywords": [],
                    "line": 348
                },
                {
                    "func": "self.assertNotContains",
                    "args": [
                        "response",
                        "restricted_forum.slug"
                    ],
                    "keywords": [],
                    "line": 349
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.forums'"
                    ],
                    "keywords": [],
                    "line": 352
                },
                {
                    "func": "eq_",
                    "args": [
                        "'/forums'",
                        "pq(response.content)('link[rel=\"canonical\"]')[0].attrib['href']"
                    ],
                    "keywords": [],
                    "line": 353
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "display_order",
                            "value": "1"
                        }
                    ],
                    "line": 358
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "display_order",
                            "value": "2"
                        }
                    ],
                    "line": 359
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.forums'"
                    ],
                    "keywords": [],
                    "line": 362
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "r.status_code"
                    ],
                    "keywords": [],
                    "line": 363
                },
                {
                    "func": "pq",
                    "args": [
                        "r.content"
                    ],
                    "keywords": [],
                    "line": 364
                },
                {
                    "func": "eq_",
                    "args": [
                        "forum1.name",
                        "doc('ol.forums > li a').first().text()"
                    ],
                    "keywords": [],
                    "line": 365
                },
                {
                    "func": "forum1.save",
                    "args": [],
                    "keywords": [],
                    "line": 368
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.forums'"
                    ],
                    "keywords": [],
                    "line": 371
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "r.status_code"
                    ],
                    "keywords": [],
                    "line": 372
                },
                {
                    "func": "pq",
                    "args": [
                        "r.content"
                    ],
                    "keywords": [],
                    "line": 373
                },
                {
                    "func": "eq_",
                    "args": [
                        "forum2.name",
                        "doc('ol.forums > li a').first().text()"
                    ],
                    "keywords": [],
                    "line": 374
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "is_listed",
                            "value": "True"
                        }
                    ],
                    "line": 378
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "is_listed",
                            "value": "True"
                        }
                    ],
                    "line": 379
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.forums'"
                    ],
                    "keywords": [],
                    "line": 382
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "r.status_code"
                    ],
                    "keywords": [],
                    "line": 383
                },
                {
                    "func": "pq",
                    "args": [
                        "r.content"
                    ],
                    "keywords": [],
                    "line": 384
                },
                {
                    "func": "eq_",
                    "args": [
                        "2",
                        "len(doc('ol.forums > li'))"
                    ],
                    "keywords": [],
                    "line": 385
                },
                {
                    "func": "forum1.save",
                    "args": [],
                    "keywords": [],
                    "line": 388
                },
                {
                    "func": "get",
                    "args": [
                        "self.client",
                        "'forums.forums'"
                    ],
                    "keywords": [],
                    "line": 391
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "r.status_code"
                    ],
                    "keywords": [],
                    "line": 392
                },
                {
                    "func": "pq",
                    "args": [
                        "r.content"
                    ],
                    "keywords": [],
                    "line": 393
                },
                {
                    "func": "eq_",
                    "args": [
                        "1",
                        "len(doc('ol.forums > li'))"
                    ],
                    "keywords": [],
                    "line": 394
                },
                {
                    "func": "eq_",
                    "args": [
                        "forum2.name",
                        "doc('ol.forums > li a').text()"
                    ],
                    "keywords": [],
                    "line": 395
                },
                {
                    "func": "ForumFactory",
                    "args": [],
                    "keywords": [],
                    "line": 401
                },
                {
                    "func": "UserFactory",
                    "args": [],
                    "keywords": [],
                    "line": 402
                },
                {
                    "func": "self.client.login",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "username",
                            "value": "u.username"
                        },
                        {
                            "keyword": "password",
                            "value": "'testpass'"
                        }
                    ],
                    "line": 404
                },
                {
                    "func": "post",
                    "args": [
                        "self.client",
                        "'forums.new_thread'",
                        "{'title': 'Topic', 'content': content, 'preview': 'any string'}"
                    ],
                    "keywords": [
                        {
                            "keyword": "args",
                            "value": "[f.slug]"
                        }
                    ],
                    "line": 406
                },
                {
                    "func": "eq_",
                    "args": [
                        "200",
                        "response.status_code"
                    ],
                    "keywords": [],
                    "line": 409
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 410
                },
                {
                    "func": "eq_",
                    "args": [
                        "content",
                        "doc('#post-preview div.content').text()"
                    ],
                    "keywords": [],
                    "line": 411
                },
                {
                    "func": "eq_",
                    "args": [
                        "0",
                        "f.thread_set.count()"
                    ],
                    "keywords": [],
                    "line": 412
                },
                {
                    "func": "doc",
                    "args": [
                        "'ul.errorlist li a'"
                    ],
                    "keywords": [],
                    "line": 25
                },
                {
                    "func": "len",
                    "args": [
                        "doc('form.edit-post')"
                    ],
                    "keywords": [],
                    "line": 54
                },
                {
                    "func": "'/forums/{f}/{t}'.format",
                    "args": [],
                    "keywords": [
                        {
                            "keyword": "f",
                            "value": "t.forum.slug"
                        },
                        {
                            "keyword": "t",
                            "value": "t.id"
                        }
                    ],
                    "line": 76
                },
                {
                    "func": "crumb.text",
                    "args": [],
                    "keywords": [],
                    "line": 87
                },
                {
                    "func": "doc('#post-preview div.content').text",
                    "args": [],
                    "keywords": [],
                    "line": 125
                },
                {
                    "func": "t.post_set.count",
                    "args": [],
                    "keywords": [],
                    "line": 126
                },
                {
                    "func": "doc",
                    "args": [
                        "'ol.threads div.last-post a:not(.username)'"
                    ],
                    "keywords": [],
                    "line": 218
                },
                {
                    "func": "len",
                    "args": [
                        "doc('form.edit-thread')"
                    ],
                    "keywords": [],
                    "line": 278
                },
                {
                    "func": "doc",
                    "args": [
                        "'ol.forums div.last-post a:not(.username)'"
                    ],
                    "keywords": [],
                    "line": 336
                },
                {
                    "func": "doc('ol.forums > li a').first().text",
                    "args": [],
                    "keywords": [],
                    "line": 365
                },
                {
                    "func": "doc('ol.forums > li a').first().text",
                    "args": [],
                    "keywords": [],
                    "line": 374
                },
                {
                    "func": "len",
                    "args": [
                        "doc('ol.forums > li')"
                    ],
                    "keywords": [],
                    "line": 385
                },
                {
                    "func": "len",
                    "args": [
                        "doc('ol.forums > li')"
                    ],
                    "keywords": [],
                    "line": 394
                },
                {
                    "func": "doc('ol.forums > li a').text",
                    "args": [],
                    "keywords": [],
                    "line": 395
                },
                {
                    "func": "doc('#post-preview div.content').text",
                    "args": [],
                    "keywords": [],
                    "line": 411
                },
                {
                    "func": "f.thread_set.count",
                    "args": [],
                    "keywords": [],
                    "line": 412
                },
                {
                    "func": "doc",
                    "args": [
                        "'form.edit-post'"
                    ],
                    "keywords": [],
                    "line": 54
                },
                {
                    "func": "href.split",
                    "args": [
                        "'#'"
                    ],
                    "keywords": [],
                    "line": 220
                },
                {
                    "func": "doc",
                    "args": [
                        "'form.edit-thread'"
                    ],
                    "keywords": [],
                    "line": 278
                },
                {
                    "func": "href.split",
                    "args": [
                        "'#'"
                    ],
                    "keywords": [],
                    "line": 338
                },
                {
                    "func": "doc",
                    "args": [
                        "'ol.forums > li'"
                    ],
                    "keywords": [],
                    "line": 385
                },
                {
                    "func": "doc",
                    "args": [
                        "'ol.forums > li'"
                    ],
                    "keywords": [],
                    "line": 394
                },
                {
                    "func": "doc",
                    "args": [
                        "'#post-preview div.content'"
                    ],
                    "keywords": [],
                    "line": 125
                },
                {
                    "func": "doc('ol.forums > li a').first",
                    "args": [],
                    "keywords": [],
                    "line": 365
                },
                {
                    "func": "doc('ol.forums > li a').first",
                    "args": [],
                    "keywords": [],
                    "line": 374
                },
                {
                    "func": "doc",
                    "args": [
                        "'ol.forums > li a'"
                    ],
                    "keywords": [],
                    "line": 395
                },
                {
                    "func": "doc",
                    "args": [
                        "'#post-preview div.content'"
                    ],
                    "keywords": [],
                    "line": 411
                },
                {
                    "func": "pq(response.content)",
                    "args": [
                        "'link[rel=\"canonical\"]'"
                    ],
                    "keywords": [],
                    "line": 77
                },
                {
                    "func": "doc",
                    "args": [
                        "'ol.posts div.content a'"
                    ],
                    "keywords": [],
                    "line": 174
                },
                {
                    "func": "pq(response.content)",
                    "args": [
                        "'link[rel=\"canonical\"]'"
                    ],
                    "keywords": [],
                    "line": 301
                },
                {
                    "func": "pq(response.content)",
                    "args": [
                        "'link[rel=\"canonical\"]'"
                    ],
                    "keywords": [],
                    "line": 354
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 77
                },
                {
                    "func": "doc",
                    "args": [
                        "'iframe'"
                    ],
                    "keywords": [],
                    "line": 204
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 301
                },
                {
                    "func": "pq",
                    "args": [
                        "response.content"
                    ],
                    "keywords": [],
                    "line": 354
                },
                {
                    "func": "doc",
                    "args": [
                        "'ol.forums > li a'"
                    ],
                    "keywords": [],
                    "line": 365
                },
                {
                    "func": "doc",
                    "args": [
                        "'ol.forums > li a'"
                    ],
                    "keywords": [],
                    "line": 374
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\EasyCTF\\easyctf-2015\\api\\program-data\\generators\\looking-for-letters.py": {
        "vulnerabilities": [
            {
                "line": 22,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "21 \t\t\tfor b in range(20):\n22 \t\t\t\tchanged[i] = insert(changed[i], random.randint(0,9), random.randint(0,len(changed[i])-1))\n23 \t\t\tname = changed[i]\n"
            },
            {
                "line": 22,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "21 \t\t\tfor b in range(20):\n22 \t\t\t\tchanged[i] = insert(changed[i], random.randint(0,9), random.randint(0,len(changed[i])-1))\n23 \t\t\tname = changed[i]\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "math",
                            "asname": null
                        }
                    ],
                    "line": 1
                },
                {
                    "names": [
                        {
                            "name": "os",
                            "asname": null
                        }
                    ],
                    "line": 2
                },
                {
                    "names": [
                        {
                            "name": "random",
                            "asname": null
                        }
                    ],
                    "line": 3
                },
                {
                    "names": [
                        {
                            "name": "imp",
                            "asname": null
                        }
                    ],
                    "line": 5
                }
            ],
            "variables": [
                {
                    "name": "common",
                    "line": 6
                },
                {
                    "name": "chosen",
                    "line": 13
                },
                {
                    "name": "changed",
                    "line": 14
                },
                {
                    "name": "orig",
                    "line": 15
                },
                {
                    "name": "output",
                    "line": 17
                },
                {
                    "name": "f",
                    "line": 18
                },
                {
                    "name": "name",
                    "line": 23
                },
                {
                    "name": "f",
                    "line": 24
                }
            ],
            "calls": [
                {
                    "func": "imp.load_source",
                    "args": [
                        "'common'",
                        "'/home/easyctf/easyctf/api/program-data/generators/common.py'"
                    ],
                    "keywords": [],
                    "line": 6
                },
                {
                    "func": "random.sample",
                    "args": [
                        "set(common.strings)",
                        "10"
                    ],
                    "keywords": [],
                    "line": 13
                },
                {
                    "func": "range",
                    "args": [
                        "10"
                    ],
                    "keywords": [],
                    "line": 16
                },
                {
                    "func": "str",
                    "args": [
                        "new"
                    ],
                    "keywords": [],
                    "line": 9
                },
                {
                    "func": "set",
                    "args": [
                        "common.strings"
                    ],
                    "keywords": [],
                    "line": 13
                },
                {
                    "func": "open",
                    "args": [
                        "full_path + os.sep + 'test' + str(i) + '.out'",
                        "'w'"
                    ],
                    "keywords": [],
                    "line": 18
                },
                {
                    "func": "f.write",
                    "args": [
                        "'%s' % output"
                    ],
                    "keywords": [],
                    "line": 19
                },
                {
                    "func": "f.close",
                    "args": [],
                    "keywords": [],
                    "line": 20
                },
                {
                    "func": "range",
                    "args": [
                        "20"
                    ],
                    "keywords": [],
                    "line": 21
                },
                {
                    "func": "open",
                    "args": [
                        "full_path + os.sep + 'test' + str(i) + '.in'",
                        "'w'"
                    ],
                    "keywords": [],
                    "line": 24
                },
                {
                    "func": "f.write",
                    "args": [
                        "'%s\\n' % name"
                    ],
                    "keywords": [],
                    "line": 25
                },
                {
                    "func": "f.close",
                    "args": [],
                    "keywords": [],
                    "line": 26
                },
                {
                    "func": "insert",
                    "args": [
                        "changed[i]",
                        "random.randint(0, 9)",
                        "random.randint(0, len(changed[i]) - 1)"
                    ],
                    "keywords": [],
                    "line": 22
                },
                {
                    "func": "random.randint",
                    "args": [
                        "0",
                        "9"
                    ],
                    "keywords": [],
                    "line": 22
                },
                {
                    "func": "random.randint",
                    "args": [
                        "0",
                        "len(changed[i]) - 1"
                    ],
                    "keywords": [],
                    "line": 22
                },
                {
                    "func": "str",
                    "args": [
                        "i"
                    ],
                    "keywords": [],
                    "line": 18
                },
                {
                    "func": "str",
                    "args": [
                        "i"
                    ],
                    "keywords": [],
                    "line": 24
                },
                {
                    "func": "len",
                    "args": [
                        "changed[i]"
                    ],
                    "keywords": [],
                    "line": 22
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "common",
                    "line": 6
                },
                {
                    "type": "str",
                    "value": "/home/easyctf/easyctf/api/program-data/generators/common.py",
                    "line": 6
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 28
                },
                {
                    "type": "int",
                    "value": 10,
                    "line": 13
                },
                {
                    "type": "int",
                    "value": 10,
                    "line": 16
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 30
                },
                {
                    "type": "str",
                    "value": "\n",
                    "line": 17
                },
                {
                    "type": "str",
                    "value": "w",
                    "line": 18
                },
                {
                    "type": "int",
                    "value": 20,
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "w",
                    "line": 24
                },
                {
                    "type": "str",
                    "value": ".out",
                    "line": 18
                },
                {
                    "type": "str",
                    "value": "%s",
                    "line": 19
                },
                {
                    "type": "str",
                    "value": ".in",
                    "line": 24
                },
                {
                    "type": "str",
                    "value": "%s\n",
                    "line": 25
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 22
                },
                {
                    "type": "int",
                    "value": 9,
                    "line": 22
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 22
                },
                {
                    "type": "str",
                    "value": "test",
                    "line": 18
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 22
                },
                {
                    "type": "str",
                    "value": "test",
                    "line": 24
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\timtadh\\zhang-shasha\\zss\\tests\\test_metricspace.py": {
        "vulnerabilities": [
            {
                "line": 97,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "96         for y in p:\n97             for z in xrange(randint(1,1+width)):\n98                 n = Node(labels.next())\n"
            },
            {
                "line": 199,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "198             B = copy.deepcopy(A)\n199             node = random.choice([n for n in B.iter()])\n200             old_label = str(node.label)\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "names": [
                        {
                            "name": "copy",
                            "asname": null
                        }
                    ],
                    "line": 7
                },
                {
                    "names": [
                        {
                            "name": "itertools",
                            "asname": null
                        }
                    ],
                    "line": 8
                },
                {
                    "names": [
                        {
                            "name": "os",
                            "asname": null
                        }
                    ],
                    "line": 9
                },
                {
                    "names": [
                        {
                            "name": "sys",
                            "asname": null
                        }
                    ],
                    "line": 10
                },
                {
                    "names": [
                        {
                            "name": "random",
                            "asname": null
                        }
                    ],
                    "line": 11
                },
                {
                    "names": [
                        {
                            "name": "unittest",
                            "asname": null
                        }
                    ],
                    "line": 12
                },
                {
                    "module": "random",
                    "names": [
                        {
                            "name": "randint",
                            "asname": null
                        },
                        {
                            "name": "seed",
                            "asname": null
                        },
                        {
                            "name": "shuffle",
                            "asname": null
                        }
                    ],
                    "line": 13
                },
                {
                    "module": "zss",
                    "names": [
                        {
                            "name": "simple_distance",
                            "asname": null
                        },
                        {
                            "name": "Node",
                            "asname": null
                        }
                    ],
                    "line": 15
                },
                {
                    "module": "zss.compare",
                    "names": [
                        {
                            "name": "strdist",
                            "asname": null
                        }
                    ],
                    "line": 19
                },
                {
                    "names": [
                        {
                            "name": "cProfile",
                            "asname": null
                        }
                    ],
                    "line": 207
                }
            ],
            "variables": [
                {
                    "name": "N",
                    "line": 23
                },
                {
                    "name": "tree1_nodes",
                    "line": 41
                },
                {
                    "name": "tree2_nodes",
                    "line": 53
                },
                {
                    "name": "tree3_nodes",
                    "line": 65
                },
                {
                    "name": "tree4_nodes",
                    "line": 76
                },
                {
                    "name": "pools",
                    "line": 29
                },
                {
                    "name": "result",
                    "line": 30
                },
                {
                    "name": "labels",
                    "line": 89
                },
                {
                    "name": "labels",
                    "line": 91
                },
                {
                    "name": "root",
                    "line": 92
                },
                {
                    "name": "p",
                    "line": 93
                },
                {
                    "name": "c",
                    "line": 94
                },
                {
                    "name": "result",
                    "line": 32
                },
                {
                    "name": "p",
                    "line": 101
                },
                {
                    "name": "c",
                    "line": 102
                },
                {
                    "name": "root",
                    "line": 109
                },
                {
                    "name": "root",
                    "line": 119
                },
                {
                    "name": "root",
                    "line": 137
                },
                {
                    "name": "trees",
                    "line": 143
                },
                {
                    "name": "trees",
                    "line": 156
                },
                {
                    "name": "trees",
                    "line": 168
                },
                {
                    "name": "trees",
                    "line": 177
                },
                {
                    "name": "trees",
                    "line": 185
                },
                {
                    "name": "ab",
                    "line": 145
                },
                {
                    "name": "ba",
                    "line": 146
                },
                {
                    "name": "ab",
                    "line": 158
                },
                {
                    "name": "bc",
                    "line": 159
                },
                {
                    "name": "ac",
                    "line": 160
                },
                {
                    "name": "ab",
                    "line": 170
                },
                {
                    "name": "ba",
                    "line": 171
                },
                {
                    "name": "d",
                    "line": 179
                },
                {
                    "name": "ab",
                    "line": 188
                },
                {
                    "name": "bc",
                    "line": 189
                },
                {
                    "name": "ac",
                    "line": 190
                },
                {
                    "name": "B",
                    "line": 198
                },
                {
                    "name": "node",
                    "line": 199
                },
                {
                    "name": "old_label",
                    "line": 200
                },
                {
                    "name": "n",
                    "line": 98
                }
            ],
            "calls": [
                {
                    "func": "seed",
                    "args": [
                        "os.urandom(15)"
                    ],
                    "keywords": [],
                    "line": 21
                },
                {
                    "func": "os.urandom",
                    "args": [
                        "15"
                    ],
                    "keywords": [],
                    "line": 21
                },
                {
                    "func": "hasattr",
                    "args": [
                        "itertools",
                        "'product'"
                    ],
                    "keywords": [],
                    "line": 37
                },
                {
                    "func": "setattr",
                    "args": [
                        "itertools",
                        "'product'",
                        "product"
                    ],
                    "keywords": [],
                    "line": 38
                },
                {
                    "func": "Node('f').addkid(Node('d').addkid(Node('a')).addkid(Node('c').addkid(Node('b')))).addkid",
                    "args": [
                        "Node('e')"
                    ],
                    "keywords": [],
                    "line": 44
                },
                {
                    "func": "Node('a').addkid(Node('c').addkid(Node('d').addkid(Node('b')).addkid(Node('e')))).addkid",
                    "args": [
                        "Node('f')"
                    ],
                    "keywords": [],
                    "line": 56
                },
                {
                    "func": "Node('a').addkid(Node('d').addkid(Node('f')).addkid(Node('c').addkid(Node('b')))).addkid",
                    "args": [
                        "Node('e')"
                    ],
                    "keywords": [],
                    "line": 68
                },
                {
                    "func": "Node('f').addkid(Node('d').addkid(Node('q')).addkid(Node('c').addkid(Node('b')))).addkid",
                    "args": [
                        "Node('e')"
                    ],
                    "keywords": [],
                    "line": 79
                },
                {
                    "func": "shuffle",
                    "args": [
                        "labels"
                    ],
                    "keywords": [],
                    "line": 90
                },
                {
                    "func": "Node",
                    "args": [
                        "'root'"
                    ],
                    "keywords": [],
                    "line": 92
                },
                {
                    "func": "list",
                    "args": [],
                    "keywords": [],
                    "line": 94
                },
                {
                    "func": "xrange",
                    "args": [
                        "depth - 1"
                    ],
                    "keywords": [],
                    "line": 95
                },
                {
                    "func": "map",
                    "args": [
                        "tuple",
                        "args"
                    ],
                    "keywords": [],
                    "line": 29
                },
                {
                    "func": "kwds.get",
                    "args": [
                        "'repeat'",
                        "1"
                    ],
                    "keywords": [],
                    "line": 29
                },
                {
                    "func": "Node",
                    "args": [
                        "'e'"
                    ],
                    "keywords": [],
                    "line": 49
                },
                {
                    "func": "Node",
                    "args": [
                        "'f'"
                    ],
                    "keywords": [],
                    "line": 61
                },
                {
                    "func": "Node",
                    "args": [
                        "'e'"
                    ],
                    "keywords": [],
                    "line": 73
                },
                {
                    "func": "Node",
                    "args": [
                        "'e'"
                    ],
                    "keywords": [],
                    "line": 84
                },
                {
                    "func": "''.join",
                    "args": [
                        "x"
                    ],
                    "keywords": [],
                    "line": 89
                },
                {
                    "func": "list",
                    "args": [],
                    "keywords": [],
                    "line": 102
                },
                {
                    "func": "tree1",
                    "args": [],
                    "keywords": [],
                    "line": 109
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "'a' in root"
                    ],
                    "keywords": [],
                    "line": 110
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "'b' in root"
                    ],
                    "keywords": [],
                    "line": 111
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "'c' in root"
                    ],
                    "keywords": [],
                    "line": 112
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "'d' in root"
                    ],
                    "keywords": [],
                    "line": 113
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "'e' in root"
                    ],
                    "keywords": [],
                    "line": 114
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "'f' in root"
                    ],
                    "keywords": [],
                    "line": 115
                },
                {
                    "func": "self.assertFalse",
                    "args": [
                        "'q' in root"
                    ],
                    "keywords": [],
                    "line": 116
                },
                {
                    "func": "tree1",
                    "args": [],
                    "keywords": [],
                    "line": 119
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "root.get('a').label",
                        "'a'"
                    ],
                    "keywords": [],
                    "line": 120
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "root.get('b').label",
                        "'b'"
                    ],
                    "keywords": [],
                    "line": 121
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "root.get('c').label",
                        "'c'"
                    ],
                    "keywords": [],
                    "line": 122
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "root.get('d').label",
                        "'d'"
                    ],
                    "keywords": [],
                    "line": 123
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "root.get('e').label",
                        "'e'"
                    ],
                    "keywords": [],
                    "line": 124
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "root.get('f').label",
                        "'f'"
                    ],
                    "keywords": [],
                    "line": 125
                },
                {
                    "func": "self.assertNotEquals",
                    "args": [
                        "root.get('a').label",
                        "'x'"
                    ],
                    "keywords": [],
                    "line": 127
                },
                {
                    "func": "self.assertNotEquals",
                    "args": [
                        "root.get('b').label",
                        "'x'"
                    ],
                    "keywords": [],
                    "line": 128
                },
                {
                    "func": "self.assertNotEquals",
                    "args": [
                        "root.get('c').label",
                        "'x'"
                    ],
                    "keywords": [],
                    "line": 129
                },
                {
                    "func": "self.assertNotEquals",
                    "args": [
                        "root.get('d').label",
                        "'x'"
                    ],
                    "keywords": [],
                    "line": 130
                },
                {
                    "func": "self.assertNotEquals",
                    "args": [
                        "root.get('e').label",
                        "'x'"
                    ],
                    "keywords": [],
                    "line": 131
                },
                {
                    "func": "self.assertNotEquals",
                    "args": [
                        "root.get('f').label",
                        "'x'"
                    ],
                    "keywords": [],
                    "line": 132
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "root.get('x')",
                        "None"
                    ],
                    "keywords": [],
                    "line": 134
                },
                {
                    "func": "tree1",
                    "args": [],
                    "keywords": [],
                    "line": 137
                },
                {
                    "func": "self.assertEqual",
                    "args": [
                        "list((x.label for x in root.iter()))",
                        "['f', 'd', 'e', 'a', 'c', 'b']"
                    ],
                    "keywords": [],
                    "line": 138
                },
                {
                    "func": "itertools.product",
                    "args": [
                        "[tree1(), tree2(), tree3(), tree4()]"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "2"
                        }
                    ],
                    "line": 143
                },
                {
                    "func": "itertools.product",
                    "args": [
                        "[tree1(), tree2(), tree3(), tree4()]"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "3"
                        }
                    ],
                    "line": 156
                },
                {
                    "func": "itertools.product",
                    "args": [
                        "(randtree(5, repeat=3, width=2) for x in xrange(N))"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "2"
                        }
                    ],
                    "line": 168
                },
                {
                    "func": "itertools.product",
                    "args": [
                        "(randtree(5, repeat=3, width=2) for x in xrange(N))"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "2"
                        }
                    ],
                    "line": 177
                },
                {
                    "func": "itertools.product",
                    "args": [
                        "(randtree(5, repeat=3, width=2) for x in xrange(N))",
                        "(randtree(5, repeat=3, width=2) for x in xrange(N))",
                        "(randtree(5, repeat=3, width=2) for x in xrange(N))"
                    ],
                    "keywords": [],
                    "line": 185
                },
                {
                    "func": "len",
                    "args": [
                        "sys.argv"
                    ],
                    "keywords": [],
                    "line": 206
                },
                {
                    "func": "cProfile.run",
                    "args": [
                        "'unittest.main()'",
                        "'profile'"
                    ],
                    "keywords": [],
                    "line": 208
                },
                {
                    "func": "unittest.main",
                    "args": [],
                    "keywords": [],
                    "line": 210
                },
                {
                    "func": "tuple",
                    "args": [
                        "prod"
                    ],
                    "keywords": [],
                    "line": 34
                },
                {
                    "func": "Node('f').addkid",
                    "args": [
                        "Node('d').addkid(Node('a')).addkid(Node('c').addkid(Node('b')))"
                    ],
                    "keywords": [],
                    "line": 44
                },
                {
                    "func": "Node('a').addkid",
                    "args": [
                        "Node('c').addkid(Node('d').addkid(Node('b')).addkid(Node('e')))"
                    ],
                    "keywords": [],
                    "line": 56
                },
                {
                    "func": "Node('a').addkid",
                    "args": [
                        "Node('d').addkid(Node('f')).addkid(Node('c').addkid(Node('b')))"
                    ],
                    "keywords": [],
                    "line": 68
                },
                {
                    "func": "Node('f').addkid",
                    "args": [
                        "Node('d').addkid(Node('q')).addkid(Node('c').addkid(Node('b')))"
                    ],
                    "keywords": [],
                    "line": 79
                },
                {
                    "func": "itertools.product",
                    "args": [
                        "alpha"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "repeat"
                        }
                    ],
                    "line": 89
                },
                {
                    "func": "xrange",
                    "args": [
                        "randint(1, 1 + width)"
                    ],
                    "keywords": [],
                    "line": 97
                },
                {
                    "func": "root.get",
                    "args": [
                        "'x'"
                    ],
                    "keywords": [],
                    "line": 134
                },
                {
                    "func": "list",
                    "args": [
                        "(x.label for x in root.iter())"
                    ],
                    "keywords": [],
                    "line": 138
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "a",
                        "b"
                    ],
                    "keywords": [],
                    "line": 145
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "b",
                        "a"
                    ],
                    "keywords": [],
                    "line": 146
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "ab",
                        "ba"
                    ],
                    "keywords": [],
                    "line": 153
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "ab == 0 and a is b or a is not b"
                    ],
                    "keywords": [],
                    "line": 154
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "a",
                        "b"
                    ],
                    "keywords": [],
                    "line": 158
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "b",
                        "c"
                    ],
                    "keywords": [],
                    "line": 159
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "a",
                        "c"
                    ],
                    "keywords": [],
                    "line": 160
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "ac <= ab + bc"
                    ],
                    "keywords": [],
                    "line": 161
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "a",
                        "b"
                    ],
                    "keywords": [],
                    "line": 170
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "b",
                        "a"
                    ],
                    "keywords": [],
                    "line": 171
                },
                {
                    "func": "self.assertEquals",
                    "args": [
                        "ab",
                        "ba"
                    ],
                    "keywords": [],
                    "line": 174
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "a",
                        "b"
                    ],
                    "keywords": [],
                    "line": 179
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "d == 0 and a is b or a is not b"
                    ],
                    "keywords": [],
                    "line": 182
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "a",
                        "b"
                    ],
                    "keywords": [],
                    "line": 188
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "b",
                        "c"
                    ],
                    "keywords": [],
                    "line": 189
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "a",
                        "c"
                    ],
                    "keywords": [],
                    "line": 190
                },
                {
                    "func": "self.assertTrue",
                    "args": [
                        "ac <= ab + bc"
                    ],
                    "keywords": [],
                    "line": 192
                },
                {
                    "func": "randtree",
                    "args": [
                        "5"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "3"
                        },
                        {
                            "keyword": "width",
                            "value": "2"
                        }
                    ],
                    "line": 197
                },
                {
                    "func": "copy.deepcopy",
                    "args": [
                        "A"
                    ],
                    "keywords": [],
                    "line": 198
                },
                {
                    "func": "random.choice",
                    "args": [
                        "[n for n in B.iter()]"
                    ],
                    "keywords": [],
                    "line": 199
                },
                {
                    "func": "str",
                    "args": [
                        "node.label"
                    ],
                    "keywords": [],
                    "line": 200
                },
                {
                    "func": "Node('d').addkid(Node('a')).addkid",
                    "args": [
                        "Node('c').addkid(Node('b'))"
                    ],
                    "keywords": [],
                    "line": 45
                },
                {
                    "func": "Node('c').addkid",
                    "args": [
                        "Node('d').addkid(Node('b')).addkid(Node('e'))"
                    ],
                    "keywords": [],
                    "line": 57
                },
                {
                    "func": "Node('d').addkid(Node('f')).addkid",
                    "args": [
                        "Node('c').addkid(Node('b'))"
                    ],
                    "keywords": [],
                    "line": 69
                },
                {
                    "func": "Node('d').addkid(Node('q')).addkid",
                    "args": [
                        "Node('c').addkid(Node('b'))"
                    ],
                    "keywords": [],
                    "line": 80
                },
                {
                    "func": "randint",
                    "args": [
                        "1",
                        "1 + width"
                    ],
                    "keywords": [],
                    "line": 97
                },
                {
                    "func": "Node",
                    "args": [
                        "labels.next()"
                    ],
                    "keywords": [],
                    "line": 98
                },
                {
                    "func": "y.addkid",
                    "args": [
                        "n"
                    ],
                    "keywords": [],
                    "line": 99
                },
                {
                    "func": "c.append",
                    "args": [
                        "n"
                    ],
                    "keywords": [],
                    "line": 100
                },
                {
                    "func": "root.get",
                    "args": [
                        "'a'"
                    ],
                    "keywords": [],
                    "line": 120
                },
                {
                    "func": "root.get",
                    "args": [
                        "'b'"
                    ],
                    "keywords": [],
                    "line": 121
                },
                {
                    "func": "root.get",
                    "args": [
                        "'c'"
                    ],
                    "keywords": [],
                    "line": 122
                },
                {
                    "func": "root.get",
                    "args": [
                        "'d'"
                    ],
                    "keywords": [],
                    "line": 123
                },
                {
                    "func": "root.get",
                    "args": [
                        "'e'"
                    ],
                    "keywords": [],
                    "line": 124
                },
                {
                    "func": "root.get",
                    "args": [
                        "'f'"
                    ],
                    "keywords": [],
                    "line": 125
                },
                {
                    "func": "root.get",
                    "args": [
                        "'a'"
                    ],
                    "keywords": [],
                    "line": 127
                },
                {
                    "func": "root.get",
                    "args": [
                        "'b'"
                    ],
                    "keywords": [],
                    "line": 128
                },
                {
                    "func": "root.get",
                    "args": [
                        "'c'"
                    ],
                    "keywords": [],
                    "line": 129
                },
                {
                    "func": "root.get",
                    "args": [
                        "'d'"
                    ],
                    "keywords": [],
                    "line": 130
                },
                {
                    "func": "root.get",
                    "args": [
                        "'e'"
                    ],
                    "keywords": [],
                    "line": 131
                },
                {
                    "func": "root.get",
                    "args": [
                        "'f'"
                    ],
                    "keywords": [],
                    "line": 132
                },
                {
                    "func": "tree1",
                    "args": [],
                    "keywords": [],
                    "line": 143
                },
                {
                    "func": "tree2",
                    "args": [],
                    "keywords": [],
                    "line": 143
                },
                {
                    "func": "tree3",
                    "args": [],
                    "keywords": [],
                    "line": 143
                },
                {
                    "func": "tree4",
                    "args": [],
                    "keywords": [],
                    "line": 143
                },
                {
                    "func": "tree1",
                    "args": [],
                    "keywords": [],
                    "line": 156
                },
                {
                    "func": "tree2",
                    "args": [],
                    "keywords": [],
                    "line": 156
                },
                {
                    "func": "tree3",
                    "args": [],
                    "keywords": [],
                    "line": 156
                },
                {
                    "func": "tree4",
                    "args": [],
                    "keywords": [],
                    "line": 156
                },
                {
                    "func": "randtree",
                    "args": [
                        "5"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "3"
                        },
                        {
                            "keyword": "width",
                            "value": "2"
                        }
                    ],
                    "line": 168
                },
                {
                    "func": "randtree",
                    "args": [
                        "5"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "3"
                        },
                        {
                            "keyword": "width",
                            "value": "2"
                        }
                    ],
                    "line": 177
                },
                {
                    "func": "randtree",
                    "args": [
                        "5"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "3"
                        },
                        {
                            "keyword": "width",
                            "value": "2"
                        }
                    ],
                    "line": 185
                },
                {
                    "func": "randtree",
                    "args": [
                        "5"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "3"
                        },
                        {
                            "keyword": "width",
                            "value": "2"
                        }
                    ],
                    "line": 185
                },
                {
                    "func": "randtree",
                    "args": [
                        "5"
                    ],
                    "keywords": [
                        {
                            "keyword": "repeat",
                            "value": "3"
                        },
                        {
                            "keyword": "width",
                            "value": "2"
                        }
                    ],
                    "line": 185
                },
                {
                    "func": "xrange",
                    "args": [
                        "N * 4"
                    ],
                    "keywords": [],
                    "line": 197
                },
                {
                    "func": "simple_distance",
                    "args": [
                        "A",
                        "B"
                    ],
                    "keywords": [],
                    "line": 202
                },
                {
                    "func": "strdist",
                    "args": [
                        "old_label",
                        "node.label"
                    ],
                    "keywords": [],
                    "line": 202
                },
                {
                    "func": "Node",
                    "args": [
                        "'f'"
                    ],
                    "keywords": [],
                    "line": 44
                },
                {
                    "func": "Node('c').addkid",
                    "args": [
                        "Node('b')"
                    ],
                    "keywords": [],
                    "line": 47
                },
                {
                    "func": "Node",
                    "args": [
                        "'a'"
                    ],
                    "keywords": [],
                    "line": 56
                },
                {
                    "func": "Node('d').addkid(Node('b')).addkid",
                    "args": [
                        "Node('e')"
                    ],
                    "keywords": [],
                    "line": 58
                },
                {
                    "func": "Node",
                    "args": [
                        "'a'"
                    ],
                    "keywords": [],
                    "line": 68
                },
                {
                    "func": "Node('c').addkid",
                    "args": [
                        "Node('b')"
                    ],
                    "keywords": [],
                    "line": 71
                },
                {
                    "func": "Node",
                    "args": [
                        "'f'"
                    ],
                    "keywords": [],
                    "line": 79
                },
                {
                    "func": "Node('c').addkid",
                    "args": [
                        "Node('b')"
                    ],
                    "keywords": [],
                    "line": 82
                },
                {
                    "func": "labels.next",
                    "args": [],
                    "keywords": [],
                    "line": 98
                },
                {
                    "func": "xrange",
                    "args": [
                        "N"
                    ],
                    "keywords": [],
                    "line": 168
                },
                {
                    "func": "xrange",
                    "args": [
                        "N"
                    ],
                    "keywords": [],
                    "line": 177
                },
                {
                    "func": "xrange",
                    "args": [
                        "N"
                    ],
                    "keywords": [],
                    "line": 185
                },
                {
                    "func": "xrange",
                    "args": [
                        "N"
                    ],
                    "keywords": [],
                    "line": 185
                },
                {
                    "func": "xrange",
                    "args": [
                        "N"
                    ],
                    "keywords": [],
                    "line": 185
                },
                {
                    "func": "Node('d').addkid",
                    "args": [
                        "Node('a')"
                    ],
                    "keywords": [],
                    "line": 45
                },
                {
                    "func": "Node",
                    "args": [
                        "'b'"
                    ],
                    "keywords": [],
                    "line": 48
                },
                {
                    "func": "Node",
                    "args": [
                        "'c'"
                    ],
                    "keywords": [],
                    "line": 57
                },
                {
                    "func": "Node",
                    "args": [
                        "'e'"
                    ],
                    "keywords": [],
                    "line": 60
                },
                {
                    "func": "Node('d').addkid",
                    "args": [
                        "Node('f')"
                    ],
                    "keywords": [],
                    "line": 69
                },
                {
                    "func": "Node",
                    "args": [
                        "'b'"
                    ],
                    "keywords": [],
                    "line": 72
                },
                {
                    "func": "Node('d').addkid",
                    "args": [
                        "Node('q')"
                    ],
                    "keywords": [],
                    "line": 80
                },
                {
                    "func": "Node",
                    "args": [
                        "'b'"
                    ],
                    "keywords": [],
                    "line": 83
                },
                {
                    "func": "root.iter",
                    "args": [],
                    "keywords": [],
                    "line": 138
                },
                {
                    "func": "B.iter",
                    "args": [],
                    "keywords": [],
                    "line": 199
                },
                {
                    "func": "Node",
                    "args": [
                        "'a'"
                    ],
                    "keywords": [],
                    "line": 46
                },
                {
                    "func": "Node",
                    "args": [
                        "'c'"
                    ],
                    "keywords": [],
                    "line": 47
                },
                {
                    "func": "Node('d').addkid",
                    "args": [
                        "Node('b')"
                    ],
                    "keywords": [],
                    "line": 58
                },
                {
                    "func": "Node",
                    "args": [
                        "'f'"
                    ],
                    "keywords": [],
                    "line": 70
                },
                {
                    "func": "Node",
                    "args": [
                        "'c'"
                    ],
                    "keywords": [],
                    "line": 71
                },
                {
                    "func": "Node",
                    "args": [
                        "'q'"
                    ],
                    "keywords": [],
                    "line": 81
                },
                {
                    "func": "Node",
                    "args": [
                        "'c'"
                    ],
                    "keywords": [],
                    "line": 82
                },
                {
                    "func": "Node",
                    "args": [
                        "'d'"
                    ],
                    "keywords": [],
                    "line": 45
                },
                {
                    "func": "Node",
                    "args": [
                        "'b'"
                    ],
                    "keywords": [],
                    "line": 59
                },
                {
                    "func": "Node",
                    "args": [
                        "'d'"
                    ],
                    "keywords": [],
                    "line": 69
                },
                {
                    "func": "Node",
                    "args": [
                        "'d'"
                    ],
                    "keywords": [],
                    "line": 80
                },
                {
                    "func": "Node",
                    "args": [
                        "'d'"
                    ],
                    "keywords": [],
                    "line": 58
                }
            ],
            "constants": [
                {
                    "type": "int",
                    "value": 3,
                    "line": 23
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 41
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 53
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 65
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 65
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 65
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 65
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 65
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 65
                },
                {
                    "type": "str",
                    "value": "q",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 76
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 76
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 88
                },
                {
                    "type": "str",
                    "value": "abcdefghijklmnopqrstuvwxyz",
                    "line": 88
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 88
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 88
                },
                {
                    "type": "str",
                    "value": "__main__",
                    "line": 205
                },
                {
                    "type": "int",
                    "value": 15,
                    "line": 21
                },
                {
                    "type": "str",
                    "value": "product",
                    "line": 37
                },
                {
                    "type": "str",
                    "value": "product",
                    "line": 38
                },
                {
                    "type": "str",
                    "value": "root",
                    "line": 92
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 206
                },
                {
                    "type": "str",
                    "value": "repeat",
                    "line": 29
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 29
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 49
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 61
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 73
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 84
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 95
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 120
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 121
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 122
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 123
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 124
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 125
                },
                {
                    "type": "str",
                    "value": "x",
                    "line": 127
                },
                {
                    "type": "str",
                    "value": "x",
                    "line": 128
                },
                {
                    "type": "str",
                    "value": "x",
                    "line": 129
                },
                {
                    "type": "str",
                    "value": "x",
                    "line": 130
                },
                {
                    "type": "str",
                    "value": "x",
                    "line": 131
                },
                {
                    "type": "str",
                    "value": "x",
                    "line": 132
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 134
                },
                {
                    "type": "str",
                    "value": "xty",
                    "line": 201
                },
                {
                    "type": "str",
                    "value": "unittest.main()",
                    "line": 208
                },
                {
                    "type": "str",
                    "value": "profile",
                    "line": 208
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 89
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 110
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 111
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 112
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 113
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 114
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 115
                },
                {
                    "type": "str",
                    "value": "q",
                    "line": 116
                },
                {
                    "type": "str",
                    "value": "x",
                    "line": 134
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 138
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 138
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 138
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 138
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 138
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 138
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 143
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 156
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 168
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 177
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 197
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 97
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 120
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 121
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 122
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 123
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 124
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 125
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 127
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 128
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 129
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 130
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 131
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 132
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 168
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 177
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 5,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 197
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 197
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 44
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 56
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 68
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 79
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 97
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 168
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 168
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 177
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 177
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 3,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 2,
                    "line": 185
                },
                {
                    "type": "int",
                    "value": 4,
                    "line": 197
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 48
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 57
                },
                {
                    "type": "str",
                    "value": "e",
                    "line": 60
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 72
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 83
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 154
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 182
                },
                {
                    "type": "str",
                    "value": "a",
                    "line": 46
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 47
                },
                {
                    "type": "str",
                    "value": "f",
                    "line": 70
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 71
                },
                {
                    "type": "str",
                    "value": "q",
                    "line": 81
                },
                {
                    "type": "str",
                    "value": "c",
                    "line": 82
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 45
                },
                {
                    "type": "str",
                    "value": "b",
                    "line": 59
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 69
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 80
                },
                {
                    "type": "str",
                    "value": "d",
                    "line": 58
                }
            ]
        }
    },
    "F:\\qqprofile\\BAVEL\\py150_files\\data\\GoogleCloudPlatform\\appengine-flask-skeleton\\lib\\werkzeug\\serving.py": {
        "vulnerabilities": [
            {
                "line": 295,
                "test_id": "B311",
                "test_name": "blacklist",
                "severity": "LOW",
                "confidence": "HIGH",
                "context": "294     cert = crypto.X509()\n295     cert.set_serial_number(int(random() * sys.maxsize))\n296     cert.gmtime_adj_notBefore(0)\n"
            }
        ],
        "ast_features": {
            "imports": [
                {
                    "module": "__future__",
                    "names": [
                        {
                            "name": "with_statement",
                            "asname": null
                        }
                    ],
                    "line": 38
                },
                {
                    "names": [
                        {
                            "name": "os",
                            "asname": null
                        }
                    ],
                    "line": 40
                },
                {
                    "names": [
                        {
                            "name": "socket",
                            "asname": null
                        }
                    ],
                    "line": 41
                },
                {
                    "names": [
                        {
                            "name": "sys",
                            "asname": null
                        }
                    ],
                    "line": 42
                },
                {
                    "names": [
                        {
                            "name": "signal",
                            "asname": null
                        }
                    ],
                    "line": 43
                },
                {
                    "names": [
                        {
                            "name": "werkzeug",
                            "asname": null
                        }
                    ],
                    "line": 71
                },
                {
                    "module": "werkzeug._internal",
                    "names": [
                        {
                            "name": "_log",
                            "asname": null
                        }
                    ],
                    "line": 72
                },
                {
                    "module": "werkzeug._compat",
                    "names": [
                        {
                            "name": "reraise",
                            "asname": null
                        },
                        {
                            "name": "wsgi_encoding_dance",
                            "asname": null
                        }
                    ],
                    "line": 73
                },
                {
                    "module": "werkzeug.urls",
                    "names": [
                        {
                            "name": "url_parse",
                            "asname": null
                        },
                        {
                            "name": "url_unquote",
                            "asname": null
                        }
                    ],
                    "line": 74
                },
                {
                    "module": "werkzeug.exceptions",
                    "names": [
                        {
                            "name": "InternalServerError",
                            "asname": null
                        }
                    ],
                    "line": 75
                },
                {
                    "names": [
                        {
                            "name": "ssl",
                            "asname": null
                        }
                    ],
                    "line": 46
                },
                {
                    "module": "SocketServer",
                    "names": [
                        {
                            "name": "ThreadingMixIn",
                            "asname": null
                        },
                        {
                            "name": "ForkingMixIn",
                            "asname": null
                        }
                    ],
                    "line": 65
                },
                {
                    "module": "BaseHTTPServer",
                    "names": [
                        {
                            "name": "HTTPServer",
                            "asname": null
                        },
                        {
                            "name": "BaseHTTPRequestHandler",
                            "asname": null
                        }
                    ],
                    "line": 66
                },
                {
                    "module": "random",
                    "names": [
                        {
                            "name": "random",
                            "asname": null
                        }
                    ],
                    "line": 287
                },
                {
                    "module": "OpenSSL",
                    "names": [
                        {
                            "name": "crypto",
                            "asname": null
                        }
                    ],
                    "line": 333
                },
                {
                    "names": [
                        {
                            "name": "tempfile",
                            "asname": null
                        }
                    ],
                    "line": 352
                },
                {
                    "names": [
                        {
                            "name": "atexit",
                            "asname": null
                        }
                    ],
                    "line": 353
                },
                {
                    "module": "_reloader",
                    "names": [
                        {
                            "name": "run_with_reloader",
                            "asname": null
                        }
                    ],
                    "line": 686
                },
                {
                    "names": [
                        {
                            "name": "optparse",
                            "asname": null
                        }
                    ],
                    "line": 694
                },
                {
                    "module": "werkzeug.utils",
                    "names": [
                        {
                            "name": "import_string",
                            "asname": null
                        }
                    ],
                    "line": 695
                },
                {
                    "module": "OpenSSL",
                    "names": [
                        {
                            "name": "crypto",
                            "asname": null
                        }
                    ],
                    "line": 56
                },
                {
                    "module": "socketserver",
                    "names": [
                        {
                            "name": "ThreadingMixIn",
                            "asname": null
                        },
                        {
                            "name": "ForkingMixIn",
                            "asname": null
                        }
                    ],
                    "line": 68
                },
                {
                    "module": "http.server",
                    "names": [
                        {
                            "name": "HTTPServer",
                            "asname": null
                        },
                        {
                            "name": "BaseHTTPRequestHandler",
                            "asname": null
                        }
                    ],
                    "line": 69
                },
                {
                    "module": "OpenSSL.SSL",
                    "names": [
                        {
                            "name": "Error",
                            "asname": null
                        }
                    ],
                    "line": 413
                },
                {
                    "module": "werkzeug.debug",
                    "names": [
                        {
                            "name": "DebuggedApplication",
                            "asname": null
                        }
                    ],
                    "line": 632
                },
                {
                    "module": "werkzeug.wsgi",
                    "names": [
                        {
                            "name": "SharedDataMiddleware",
                            "asname": null
                        }
                    ],
                    "line": 635
                },
                {
                    "module": "_reloader",
                    "names": [
                        {
                            "name": "run_with_reloader",
                            "asname": null
                        }
                    ],
                    "line": 676
                },
                {
                    "module": "werkzeug.debug.tbtools",
                    "names": [
                        {
                            "name": "get_current_traceback",
                            "asname": null
                        }
                    ],
                    "line": 198
                }
            ],
            "variables": [
                {
                    "name": "LISTEN_QUEUE",
                    "line": 78
                },
                {
                    "name": "can_open_by_fd",
                    "line": 79
                },
                {
                    "name": "BaseRequestHandler",
                    "line": 283
                },
                {
                    "name": "crypto",
                    "line": 288
                },
                {
                    "name": "cert",
                    "line": 294
                },
                {
                    "name": "subject",
                    "line": 299
                },
                {
                    "name": "issuer",
                    "line": 303
                },
                {
                    "name": "pkey",
                    "line": 307
                },
                {
                    "name": "cert_file",
                    "line": 338
                },
                {
                    "name": "pkey_file",
                    "line": 339
                },
                {
                    "name": "crypto",
                    "line": 351
                },
                {
                    "name": "ctx",
                    "line": 365
                },
                {
                    "name": "ctx",
                    "line": 382
                },
                {
                    "name": "exc_types",
                    "line": 411
                },
                {
                    "name": "multithread",
                    "line": 445
                },
                {
                    "name": "multiprocess",
                    "line": 446
                },
                {
                    "name": "request_queue_size",
                    "line": 447
                },
                {
                    "name": "multithread",
                    "line": 518
                },
                {
                    "name": "multiprocess",
                    "line": 524
                },
                {
                    "name": "parser",
                    "line": 697
                },
                {
                    "name": "app",
                    "line": 719
                },
                {
                    "name": "ssl",
                    "line": 51
                },
                {
                    "name": "request_url",
                    "line": 91
                },
                {
                    "name": "url_scheme",
                    "line": 96
                },
                {
                    "name": "path_info",
                    "line": 97
                },
                {
                    "name": "environ",
                    "line": 99
                },
                {
                    "name": "environ",
                    "line": 136
                },
                {
                    "name": "headers_set",
                    "line": 137
                },
                {
                    "name": "headers_sent",
                    "line": 138
                },
                {
                    "name": "rv",
                    "line": 213
                },
                {
                    "name": "sig",
                    "line": 230
                },
                {
                    "name": "cn",
                    "line": 292
                },
                {
                    "name": "cn",
                    "line": 335
                },
                {
                    "name": "protocol",
                    "line": 381
                },
                {
                    "name": "error",
                    "line": 419
                },
                {
                    "name": "application",
                    "line": 633
                },
                {
                    "name": "application",
                    "line": 636
                },
                {
                    "name": "address",
                    "line": 711
                },
                {
                    "name": "hostname",
                    "line": 712
                },
                {
                    "name": "key",
                    "line": 123
                },
                {
                    "name": "application_iter",
                    "line": 180
                },
                {
                    "name": "rv",
                    "line": 215
                },
                {
                    "name": "message",
                    "line": 256
                },
                {
                    "name": "hdr",
                    "line": 258
                },
                {
                    "name": "handler",
                    "line": 452
                },
                {
                    "name": "real_sock",
                    "line": 457
                },
                {
                    "name": "port",
                    "line": 459
                },
                {
                    "name": "fd",
                    "line": 640
                },
                {
                    "name": "address_family",
                    "line": 661
                },
                {
                    "name": "s",
                    "line": 662
                },
                {
                    "name": "port",
                    "line": 714
                },
                {
                    "name": "header_keys",
                    "line": 149
                },
                {
                    "name": "application_iter",
                    "line": 189
                },
                {
                    "name": "traceback",
                    "line": 199
                },
                {
                    "name": "ssl_context",
                    "line": 475
                },
                {
                    "name": "ssl_context",
                    "line": 477
                },
                {
                    "name": "display_hostname",
                    "line": 491
                },
                {
                    "name": "quit_msg",
                    "line": 494
                },
                {
                    "name": "fd",
                    "line": 642
                },
                {
                    "name": "key",
                    "line": 152
                },
                {
                    "name": "exc_info",
                    "line": 173
                },
                {
                    "name": "display_hostname",
                    "line": 493
                }
            ],
            "constants": [
                {
                    "type": "str",
                    "value": "\n    werkzeug.serving\n    ~~~~~~~~~~~~~~~~\n\n    There are many ways to serve a WSGI application.  While you're developing\n    it you usually don't want a full blown webserver like Apache but a simple\n    standalone one.  From Python 2.5 onwards there is the `wsgiref`_ server in\n    the standard library.  If you're using older versions of Python you can\n    download the package from the cheeseshop.\n\n    However there are some caveats. Sourcecode won't reload itself when\n    changed and each time you kill the server using ``^C`` you get an\n    `KeyboardInterrupt` error.  While the latter is easy to solve the first\n    one can be a pain in the ass in some situations.\n\n    The easiest way is creating a small ``start-myproject.py`` that runs the\n    application::\n\n        #!/usr/bin/env python\n        # -*- coding: utf-8 -*-\n        from myproject import make_app\n        from werkzeug.serving import run_simple\n\n        app = make_app(...)\n        run_simple('localhost', 8080, app, use_reloader=True)\n\n    You can also pass it a `extra_files` keyword argument with a list of\n    additional files (like configuration files) you want to observe.\n\n    For bigger applications you should consider using `werkzeug.script`\n    instead of a simple start file.\n\n\n    :copyright: (c) 2014 by the Werkzeug Team, see AUTHORS for more details.\n    :license: BSD, see LICENSE for more details.\n",
                    "line": 2
                },
                {
                    "type": "int",
                    "value": 128,
                    "line": 78
                },
                {
                    "type": "str",
                    "value": "fromfd",
                    "line": 79
                },
                {
                    "type": "str",
                    "value": "A request handler that implements WSGI dispatching.",
                    "line": 84
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 286
                },
                {
                    "type": "str",
                    "value": "Dummy Certificate",
                    "line": 301
                },
                {
                    "type": "str",
                    "value": "Untrusted Authority",
                    "line": 304
                },
                {
                    "type": "str",
                    "value": "Self-Signed",
                    "line": 305
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 315
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 315
                },
                {
                    "type": "str",
                    "value": "Creates an SSL key for development.  This should be used instead of\n    the ``'adhoc'`` key which generates a new cert on each server start.\n    It accepts a path for where it should store the key and cert and\n    either a host or CN.  If a host is given it will use the CN\n    ``*.host/CN=host``.\n\n    For more information see :func:`run_simple`.\n\n    .. versionadded:: 0.9\n\n    :param base_path: the path to the certificate and key.  The extension\n                      ``.crt`` is added for the certificate, ``.key`` is\n                      added for the key.\n    :param host: the name of the host.  This can be used as an alternative\n                 for the `cn`.\n    :param cn: the `CN` to use.\n    ",
                    "line": 316
                },
                {
                    "type": "str",
                    "value": "Generates an adhoc SSL context for the development server.",
                    "line": 350
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 369
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 369
                },
                {
                    "type": "str",
                    "value": "Loads SSL context from cert/private key files and optional protocol.\n    Many parameters are directly taken from the API of\n    :py:class:`ssl.SSLContext`.\n\n    :param cert_file: Path of the certificate to use.\n    :param pkey_file: Path of the private key to use. If not given, the key\n                      will be obtained from the certificate file.\n    :param protocol: One of the ``PROTOCOL_*`` constants in the stdlib ``ssl``\n                     module. Defaults to ``PROTOCOL_SSLv23``.\n    ",
                    "line": 370
                },
                {
                    "type": "str",
                    "value": "A dummy class with a small subset of Python3's ``ssl.SSLContext``, only\n    intended to be used with and by Werkzeug.",
                    "line": 389
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 409
                },
                {
                    "type": "str",
                    "value": "Checks if the given error (or the current one) is an SSL error.",
                    "line": 410
                },
                {
                    "type": "str",
                    "value": "Returns AF_INET4 or AF_INET6 depending on where to connect to.",
                    "line": 424
                },
                {
                    "type": "str",
                    "value": "Simple single-threaded, single-process WSGI server.",
                    "line": 444
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 445
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 446
                },
                {
                    "type": "str",
                    "value": "A WSGI server that does threading.",
                    "line": 517
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 518
                },
                {
                    "type": "str",
                    "value": "A WSGI server that does forking.",
                    "line": 523
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 524
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 533
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 533
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 533
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 533
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 533
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 534
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 534
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 535
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 535
                },
                {
                    "type": "str",
                    "value": "Create a new server instance that is either threaded, or forks\n    or just processes one request after another.\n    ",
                    "line": 536
                },
                {
                    "type": "str",
                    "value": "Checks if the application is running from within the Werkzeug\n    reloader subprocess.\n\n    .. versionadded:: 0.10\n    ",
                    "line": 554
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 562
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 563
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 563
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 564
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 564
                },
                {
                    "type": "str",
                    "value": "auto",
                    "line": 565
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 565
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 566
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 566
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 566
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 567
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 567
                },
                {
                    "type": "str",
                    "value": "Start a WSGI application. Optional features include a reloader,\n    multithreading and fork support.\n\n    This function has a command-line interface too::\n\n        python -m werkzeug.serving --help\n\n    .. versionadded:: 0.5\n       `static_files` was added to simplify serving of static files as well\n       as `passthrough_errors`.\n\n    .. versionadded:: 0.6\n       support for SSL was added.\n\n    .. versionadded:: 0.8\n       Added support for automatically loading a SSL context from certificate\n       file and private key.\n\n    .. versionadded:: 0.9\n       Added command-line interface.\n\n    .. versionadded:: 0.10\n       Improved the reloader and added support for changing the backend\n       through the `reloader_type` parameter.  See :ref:`reloader`\n       for more information.\n\n    :param hostname: The host for the application.  eg: ``'localhost'``\n    :param port: The port for the server.  eg: ``8080``\n    :param application: the WSGI application to execute\n    :param use_reloader: should the server automatically restart the python\n                         process if modules were changed?\n    :param use_debugger: should the werkzeug debugging system be used?\n    :param use_evalex: should the exception evaluation feature be enabled?\n    :param extra_files: a list of files the reloader should watch\n                        additionally to the modules.  For example configuration\n                        files.\n    :param reloader_interval: the interval for the reloader in seconds.\n    :param reloader_type: the type of reloader to use.  The default is\n                          auto detection.  Valid values are ``'stat'`` and\n                          ``'watchdog'``. See :ref:`reloader` for more\n                          information.\n    :param threaded: should the process handle each request in a separate\n                     thread?\n    :param processes: if greater than 1 then handle each request in a new process\n                      up to this maximum number of concurrent processes.\n    :param request_handler: optional parameter that can be used to replace\n                            the default one.  You can use this to replace it\n                            with a different\n                            :class:`~BaseHTTPServer.BaseHTTPRequestHandler`\n                            subclass.\n    :param static_files: a dict of paths for static files.  This works exactly\n                         like :class:`SharedDataMiddleware`, it's actually\n                         just wrapping the application in that middleware before\n                         serving.\n    :param passthrough_errors: set this to `True` to disable the error catching.\n                               This means that the server will die on errors but\n                               it can be useful to hook debuggers in (pdb etc.)\n    :param ssl_context: an SSL context for the connection. Either an\n                        :class:`ssl.SSLContext`, a tuple in the form\n                        ``(cert_file, pkey_file)``, the string ``'adhoc'`` if\n                        the server should automatically create one, or ``None``\n                        to disable SSL (which is the default).\n    ",
                    "line": 568
                },
                {
                    "type": "str",
                    "value": "A simple command-line interface for :py:func:`run_simple`.",
                    "line": 691
                },
                {
                    "type": "str",
                    "value": "__main__",
                    "line": 727
                },
                {
                    "type": "str",
                    "value": "Handles a request ignoring dropped connections.",
                    "line": 212
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 213
                },
                {
                    "type": "str",
                    "value": "A horrible, horrible way to kill the server for Python 2.6 and\n        later.  It's the best we can do.\n        ",
                    "line": 226
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 235
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 237
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 239
                },
                {
                    "type": "str",
                    "value": "Called if the connection was closed by the client.  By default\n        nothing happens.\n        ",
                    "line": 240
                },
                {
                    "type": "str",
                    "value": "Handle a single HTTP request.",
                    "line": 245
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 252
                },
                {
                    "type": "str",
                    "value": "Send the response header and log the response code.",
                    "line": 253
                },
                {
                    "type": "str",
                    "value": "-",
                    "line": 267
                },
                {
                    "type": "str",
                    "value": "-",
                    "line": 267
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 291
                },
                {
                    "type": "str",
                    "value": "*",
                    "line": 292
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 296
                },
                {
                    "type": "int",
                    "value": 1024,
                    "line": 308
                },
                {
                    "type": "str",
                    "value": "md5",
                    "line": 310
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 334
                },
                {
                    "type": "str",
                    "value": ".crt",
                    "line": 338
                },
                {
                    "type": "str",
                    "value": ".key",
                    "line": 339
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 380
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 394
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 395
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 396
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 398
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 398
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 418
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 449
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 450
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 450
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 450
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 463
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 488
                },
                {
                    "type": "int",
                    "value": 40,
                    "line": 526
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 526
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 527
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 527
                },
                {
                    "type": "str",
                    "value": "true",
                    "line": 559
                },
                {
                    "type": "str",
                    "value": "-b",
                    "line": 699
                },
                {
                    "type": "str",
                    "value": "--bind",
                    "line": 699
                },
                {
                    "type": "str",
                    "value": "-d",
                    "line": 701
                },
                {
                    "type": "str",
                    "value": "--debug",
                    "line": 701
                },
                {
                    "type": "str",
                    "value": "-r",
                    "line": 704
                },
                {
                    "type": "str",
                    "value": "--reload",
                    "line": 704
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 709
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 709
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 716
                },
                {
                    "type": "str",
                    "value": "Werkzeug/",
                    "line": 88
                },
                {
                    "type": "bool",
                    "value": true,
                    "line": 94
                },
                {
                    "type": "str",
                    "value": "https",
                    "line": 96
                },
                {
                    "type": "str",
                    "value": "wsgi.version",
                    "line": 100
                },
                {
                    "type": "str",
                    "value": "wsgi.url_scheme",
                    "line": 101
                },
                {
                    "type": "str",
                    "value": "wsgi.input",
                    "line": 102
                },
                {
                    "type": "str",
                    "value": "wsgi.errors",
                    "line": 103
                },
                {
                    "type": "str",
                    "value": "wsgi.multithread",
                    "line": 104
                },
                {
                    "type": "str",
                    "value": "wsgi.multiprocess",
                    "line": 105
                },
                {
                    "type": "str",
                    "value": "wsgi.run_once",
                    "line": 106
                },
                {
                    "type": "str",
                    "value": "werkzeug.server.shutdown",
                    "line": 107
                },
                {
                    "type": "str",
                    "value": "SERVER_SOFTWARE",
                    "line": 108
                },
                {
                    "type": "str",
                    "value": "REQUEST_METHOD",
                    "line": 109
                },
                {
                    "type": "str",
                    "value": "SCRIPT_NAME",
                    "line": 110
                },
                {
                    "type": "str",
                    "value": "PATH_INFO",
                    "line": 111
                },
                {
                    "type": "str",
                    "value": "QUERY_STRING",
                    "line": 112
                },
                {
                    "type": "str",
                    "value": "CONTENT_TYPE",
                    "line": 113
                },
                {
                    "type": "str",
                    "value": "CONTENT_LENGTH",
                    "line": 114
                },
                {
                    "type": "str",
                    "value": "REMOTE_ADDR",
                    "line": 115
                },
                {
                    "type": "str",
                    "value": "REMOTE_PORT",
                    "line": 116
                },
                {
                    "type": "str",
                    "value": "SERVER_NAME",
                    "line": 117
                },
                {
                    "type": "str",
                    "value": "SERVER_PORT",
                    "line": 118
                },
                {
                    "type": "str",
                    "value": "SERVER_PROTOCOL",
                    "line": 119
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 106
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 110
                },
                {
                    "type": "str",
                    "value": "100-continue",
                    "line": 133
                },
                {
                    "type": "str",
                    "value": "write() before start_response",
                    "line": 141
                },
                {
                    "type": "str",
                    "value": "applications must write bytes",
                    "line": 163
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 167
                },
                {
                    "type": "str",
                    "value": "SIGKILL",
                    "line": 230
                },
                {
                    "type": "str",
                    "value": "true",
                    "line": 232
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 248
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 255
                },
                {
                    "type": "str",
                    "value": "HTTP/0.9",
                    "line": 257
                },
                {
                    "type": "str",
                    "value": "REMOTE_ADDR",
                    "line": 265
                },
                {
                    "type": "str",
                    "value": "info",
                    "line": 268
                },
                {
                    "type": "str",
                    "value": "\"%s\" %s %s",
                    "line": 268
                },
                {
                    "type": "str",
                    "value": "error",
                    "line": 271
                },
                {
                    "type": "str",
                    "value": "info",
                    "line": 274
                },
                {
                    "type": "int",
                    "value": 365,
                    "line": 297
                },
                {
                    "type": "str",
                    "value": "*.%s/CN=%s",
                    "line": 335
                },
                {
                    "type": "str",
                    "value": "wb",
                    "line": 341
                },
                {
                    "type": "str",
                    "value": "wb",
                    "line": 343
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 419
                },
                {
                    "type": "str",
                    "value": ":",
                    "line": 437
                },
                {
                    "type": "str",
                    "value": "AF_INET6",
                    "line": 437
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 451
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 456
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 459
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 468
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 473
                },
                {
                    "type": "NoneType",
                    "value": null,
                    "line": 482
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 539
                },
                {
                    "type": "str",
                    "value": "cannot have a multithreaded and multi process server.",
                    "line": 540
                },
                {
                    "type": "str",
                    "value": "WERKZEUG_RUN_MAIN",
                    "line": 559
                },
                {
                    "type": "str",
                    "value": "true",
                    "line": 652
                },
                {
                    "type": "str",
                    "value": "Usage: %prog [options] app_module:app_object",
                    "line": 698
                },
                {
                    "type": "str",
                    "value": "address",
                    "line": 699
                },
                {
                    "type": "str",
                    "value": "The hostname:port the app should listen on.",
                    "line": 700
                },
                {
                    "type": "str",
                    "value": "use_debugger",
                    "line": 701
                },
                {
                    "type": "str",
                    "value": "store_true",
                    "line": 702
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 702
                },
                {
                    "type": "str",
                    "value": "Use Werkzeug's debugger.",
                    "line": 703
                },
                {
                    "type": "str",
                    "value": "use_reloader",
                    "line": 704
                },
                {
                    "type": "str",
                    "value": "store_true",
                    "line": 705
                },
                {
                    "type": "bool",
                    "value": false,
                    "line": 705
                },
                {
                    "type": "str",
                    "value": "Reload Python process if modules change.",
                    "line": 706
                },
                {
                    "type": "str",
                    "value": ":",
                    "line": 711
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 712
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 713
                },
                {
                    "type": "str",
                    "value": "No application supplied, or too much. See --help\n",
                    "line": 717
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 718
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 719
                },
                {
                    "type": "str",
                    "value": "Using ad-hoc certificates requires the pyOpenSSL library.",
                    "line": 58
                },
                {
                    "type": "str",
                    "value": "http",
                    "line": 96
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 100
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 100
                },
                {
                    "type": "str",
                    "value": "Content-Type",
                    "line": 113
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 113
                },
                {
                    "type": "str",
                    "value": "Content-Length",
                    "line": 114
                },
                {
                    "type": "str",
                    "value": "",
                    "line": 114
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 115
                },
                {
                    "type": "int",
                    "value": 1,
                    "line": 116
                },
                {
                    "type": "int",
                    "value": 0,
                    "line": 117
                },
                {
                    "type": "str",
                    "value": "HTTP_",
                    "line": 123
                },
                {
                    "type": "str",
                    "value": "HTTP_HOST",
                    "line": 128
                },
                {
                    "type": "bytes",
                    "value": 